import { useEffect, useRef, useState } from "react";
import PkgGlobal from "../../../conf/PkgGlobal";
import PkgKakuchoParts from "../../../common/PkgKakuchoParts";
import PkgScreenControl, { usePrevScreen } from "../../../common/PkgScreenControl";
import MockupJson from "../../../mockup/300000/327/FrmG327P3E010.json";
import PkgMessage from "../../../common/PkgMessage";
import PkgComGlobal from "../../../conf/PkgComGlobal";
import PkgBasicParts from "../../../common/PkgBasicParts";
import {
  ButtonOnClickEvent,
  FormItemOnBlurEvent,
  FormItemOnChangeEvent,
  FormItemOnFocusEvent,
} from "../../../common/PkgType";
import PkgLog from "../../../common/PkgLog";
import PkgHttp from "../../../common/PkgHttp";
import DlgG32Z040010_01, { DlgG32Z040010_01Args } from "../32Z/DlgG32Z040010_01";
import DlgG32Z040010_02, { DlgG32Z040010_02Args } from "../32Z/DlgG32Z040010_02";
import DlgG32Z040010_03, { DlgG32Z040010_03Args } from "../32Z/DlgG32Z040010_03";
import DlgG32Z040010_04, { DlgG32Z040010_04Args } from "../32Z/DlgG32Z040010_04";
import DlgG32Z040010_05, { DlgG32Z040010_05Args } from "../32Z/DlgG32Z040010_05";
import DlgG32Z040010_06, { DlgG32Z040010_06Args } from "../32Z/DlgG32Z040010_06";
import DlgG32Z040010_07, { DlgG32Z040010_07Args } from "../32Z/DlgG32Z040010_07";
import DlgG32Z040010_08, { DlgG32Z040010_08Args } from "../32Z/DlgG32Z040010_08";
import DlgG32Z040010_09, { DlgG32Z040010_09Args } from "../32Z/DlgG32Z040010_09";
import DlgG32Z010010, { DlgG32Z010010Args } from "../32Z/DlgG32Z010010";
import DlgG32Z020010, { DlgG32Z020010Args } from "../32Z/DlgG32Z020010";
import DlgG32Z040010_19, { DlgG32Z040010_19Args } from "../32Z/DlgG32Z040010_19";
import DlgG32Z040010_20, { DlgG32Z040010_20Args } from "../32Z/DlgG32Z040010_20";
import PkgCheck from "../../../common/PkgCheck";
import PkgUtil from "../../../common/PkgUtil";

/************************************
 * 画面表示しない情報
 ************************************/
/** @[概要]:選択された変更区分 */
let Hnk: string = "";
/** @[概要]:選択された物品情報 */
let buppinList: string[][] = [];
/** @[概要]:処理区分 */
let syoriKBN: string = "";
/** @[概要]:所外所内区分（所外：１、所内：２） */
let sgisnFlg: string = "";
/** @[概要]:東西フラグ */
let ewFlg: string = "";
/** @[概要]:交換機ID */
let NOD_ID: string = "";
/** @[概要]:交換機種ID */
let noId: string = "";

/** @[概要]:物品定数情報 */
/** ab単価表示 */
let abTakhji: string = "";
/** 新品単価表示 */
let sinpinTanka: string = "";
/** 整理品単価表示 */
let seiriTanka: string = "";
/** 新品ダム単価 */
let sinpinDamTanka: string = "";
/** 整理品ダム単価 */
let seiriDamTanka: string = "";
/** @[概要]:数量 */
let txtSUU: string = "";
/** 現場調達品フラグ */
let gnbcthflg: string = "";
/** 本体内訳－構成品フラグ */
let htiutwkhf: string = "";

/** @[概要]:入力チェック結果用の変数 */
let messageParm: string[] = [];

/** @[概要]:EDI送信フラグ */
let ediSendFlg: string = "0";
/** @[概要]:装置名種別 */
let STMCLS_CD: string = "";

/** @[概要]:架名装置名フラグ保持用(チェック用) */
let hoji_kameisoutiFlg: string = "0";
/** @[概要]:SOAP対象項目変更有無フラグ */
let modifySoapColumn: string = "0";
/** @[概要]:物品ステータス */
let butsts: string = "";
/** @[概要]:要求種別 */
let ykSyubetu: string = "";
/** @[概要]:個単価 */
let koTAK: string | number = 0;
/** @[概要]:メートル単価 */
let mTak: string | number = 0;
/** @[概要]:GAIA取消区分 */
let gaiaTrikskbn: string = "";
/** @[概要]:ＮＳ／ＣＳ区分 */
let nscsKbn: string = "";

/** @[概要]:要求種別初期フラグ */
let initFlgPdlYouclsCd: boolean = true;
/** @[概要]:物流要再送初期フラグ */
let initFlgPdlButuYousaiso: boolean = true;
/** @[概要]:EDI要再送初期フラグ */
let initFlgPdlEdiYousaiso: boolean = true;
/** @[概要]:要求番号初期フラグ */
let initFlgPdlYOUBAN: boolean = true;
/** @[概要]:架情報初期フラグ */
let initFlgOptKaInfo: boolean = true;
/** @[概要]:装置情報初期フラグ */
let initFlgOptSoutiInfo: boolean = true;
/** @[概要]:在再フラグ初期フラグ */
let initFlgOptZSBFLG: boolean = true;
/** @[概要]:購入情報チェック有無（初期表示用） */
let checkFlg: string = "";
/** @[概要]:初期表示フラグ */
let initFlg: string = "0";
/* @[概要]:変更フラグ, */
let editFlg: boolean = false;


export default function FrmG327P30010() {
 /************************************
  * 定数定義
  ************************************/
  /** @[概要]:画面タイトル */
  const lblTitle = "物品データ追加／修正";
  /** @[概要]:画面ＩＤ */
  const GID = "G327P30010";
  /** @[概要]:画面Version */
  const GVER = "1.0";

  /** @[概要]:詳細処理ID 初期処理 */
  const SEQID_SYOKISYORI = "327P30001";
  /** @[概要]:詳細処理ID 要求種別リスト取得 */
  const SEQID_YOKYUSYUBETU_FIND_LIST = "327P30002";
  /** @[概要]:詳細処理ID 要求番号リスト取得 */
  const SEQID_YOKYUBANGO_FIND_LIST = "327P30003";
  /** @[概要]:詳細処理ID 登録処理（追加） */
  const SEQID_TOROKU_TUIKA = "327P30004";
  /** @[概要]:詳細処理ID 登録処理（修正） */
  const SEQID_TOROKU_SYUSEI = "327P30005";
  /** @[概要]:詳細処理ID 登録処理(要求種別変更） */
  const SEQID_TOROKU_YOKYUSYUBETU = "327P30006";
  /** @[概要]:詳細処理ID 物品定数取得 */
  const SEQID_BUPPINJYOSU_FIND = "327P30007";
  /** @[概要]:詳細処理ID ビルコード検索 */
  const SEQID_BILLCODE_FIND = "327P30008";
  /** @[概要]:詳細処理ID 登録処理（要再送補正） */
  const SEQID_TOROKU_SAISOUHOSEI = "327P30010";
  /** @[概要]:詳細処理ID 所要期チェック */
  const SEQID_SYOYOKI_CHECK = "327P30011";

 /************************************
  * 画面表示しない情報
  ************************************/
  let KOME_UME: string = "**************************************************";
  /** @[概要]:Ariba物品フラグ */
  let txtARIBA_FLG: string = "";
  /** @[概要]:エラーフラグ */
  let systemErrorFlg: boolean = false;
  /** @[概要]:ab長変更フラグ */
  let abLenChangeFlg: boolean = false;
  /** @[概要]:在再フラグ変更フラグ */
  let optZsbFlgChangeFlg: boolean = false;

 /************************************
  * 変数定義
  ************************************/
  /** @[概要]:施工組織コード */
  let lblSKS_CD: string = "";
  /** @[概要]:施工組織名 */
  let txtSekoSosikiName: string = "";
  /** @[概要]:総合工事番号 */
  let txtSKJBAN: string = "";
  /** @[概要]:総合工事名 */
  let txtSKJ_NM: string = "";
  /** @[概要]:WBSコード */
  let txtWBS_CD: string = "";
  /** @[概要]:工事名 */
  let txtKOJ_NM: string = "";
  /** @[概要]:工事マネージャ名 */
  let txtKOJMGR: string = "";
  /** @[概要]:部門名 */
  let txtBUM_NM: string = "";
  /** @[概要]:部門コード */
  let lblBUM_CD: string = "";
  /** @[概要]:品目コード */
  let txtHINMOKU_CD: string = "";
  /** @[概要]:管理責任者コード */
  let lblMNGSKH_CD: string = "";
  /** @[概要]:要求プラント保管場所コード（要求組織物管者コード） */
  let txtYPLHKAD_CD: string = "";
  /** @[概要]:指定事項有無 */
  let txtSTIJIKUMU: string = "";
  /** @[概要]:合価 */
  let txtGOK: number;
  /** @[概要]:ab長 */
  let txtAB_LEN: string = "";
  /** @[概要]:納入先住所コード */
  let txtNONYU_ADR_CD: string = "";
  /** @[概要]:在再フラグ */
  let zsbFlg: string = "";

  /** 遷移時フォーカス設定用 */
  const focusRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    PkgGlobal.MOCKUP_MODE ? mockup() : init();
  }, []);
  const prevScreen = usePrevScreen();

  // ヘッダー項目
  const [header, setHeader] = useState({
    lblScreenTitle: lblTitle,
    txtHeaderSksNm: "",
  });

  // 要求プラント保管場所コード（要求組織物管者コード）▼ボタンダイアログ処理
  const [dlgG32Z040010_01, setDlgG32Z040010_01] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_01(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_01Args) => { },
    sksCd: "",     // 施工組織コード
    sgisniFlg: "", // 所外所内フラグ
    ittsCd: "",    // 委託元組織コード
    ittbksCd: "",  // 委託元物管者コード
    fukaFlg: "",   // 使用不可フラグ
  });

  // 受取プラント保管場所コード（受取組織物管者コード）▼ボタンダイアログ処理
  const [dlgG32Z040010_02, setDlgG32Z040010_02] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_02(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_02Args) => { },
    sksCd: "",     // 施工組織コード
    sgisniFlg: "", // 所外所内フラグ
    fukaFlg: ""    // 使用不可フラグ
  });

  // 工通指示・検索ボタンダイアログ処理
  const [dlgG32Z040010_03, setDlgG32Z040010_03] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_03(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_03Args) => { },
    sksCd: "",       // 施工組織コード
    fukaFlg: "",     // 使用不可フラグ
    rksbmi: "",      // 略称ビル名
    yobidasiFlg: "", // 呼び出し元フラグ（1:検索 2工通指示）
    wbsCd: "",       // WBSコード（※工通指示の場合のみ設定可）
    mngskhCd: "",    // 管理責任者コード（※工通指示の場合のみ設定可）
  });

  // 交換機種ﾕﾆｯﾄｺｰﾄﾞ▼ボタンダイアログ処理
  const [dlgG32Z040010_04, setDlgG32Z040010_04] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_04(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_04Args) => { },
    sksCd: "",     // 施工組織コード
    bilCd: "",     // ビルコード
    untCd: ""      // ユニットコード
  });

  // 架名▼ボタン
  const [dlgG32Z040010_05, setDlgG32Z040010_05] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_05(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_05Args) => { },
    kmistmFlg: "",  // 架名-装置名フラグ
    nodId: "",      // 交換機ID
    stmcls: ""      // 装置名種別
  });

  // 配置番号▼ボタン
  const [dlgG32Z040010_06, setDlgG32Z040010_06] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_06(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_06Args) => { },
    sksCd: "",   // 施工組織コード
    wbsCd: "",   // WBSコード
    bilCd: ""    // ビルコード
  });

  // 装置種別名▼・装置名▼ボタン
  const [dlgG32Z040010_07, setDlgG32Z040010_07] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_07(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_07Args) => { },
    fukaFlg: ""   // 使用不可フラグ
  });

  // 品目コード参照ボタン
  const [dlgG32Z010010, setDlgG32Z010010] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z010010(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z010010Args) => { },
    HinMokuCd: "",    // 品目コード
    butuKanaNm: "" // 物品検索
  });

  // 仕入先コード参照ボタン
  const [dlgG32Z020010, setDlgG32Z020010] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z020010(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z020010Args) => { },
    sirCd: "",  // 仕入先コード
    mkm: ""     // メーカ名
  });

  // 納入先住所コード参照ボタン
  const [dlgG32Z040010_08, setDlgG32Z040010_08] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_08(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_08Args) => { },
    sksCd: "",  // 施工組織コード
    nonyuAdrCd: ""    // 納入先住所コード
  });

  // 要求者▼ボタン
  const [dlgG32Z040010_09, setDlgG32Z040010_09] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_09(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_09Args) => { },
    sksCd: "",  // 施工組織コード
    wbsCd: ""   // WBSコード
  });

  // 市町村コード（To）▼ボタン
  const [dlgG32Z040010_20, setDlgG32Z040010_20] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_20(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_20Args) => { },
    ScsCd: "", // 市町村コード（ビルコード）
    ScsNm: ""  // 市町村名（ビル名）
    });

  // 送付先郵便番号▼ボタン
  const [dlgG32Z040010_19, setDlgG32Z040010_19] = useState({
    show: false,
    setShow: (val: boolean) => setDlgG32Z040010_19(d => ({ ...d, show: val })),
    btnOkClickEvent: async (ev: ButtonOnClickEvent, args: DlgG32Z040010_19Args) => { },
    YbnNo: "",           // 郵便番号
    TdhknKanji: ""       // 都道府県
    });  

  // 要求種別プルダウンリスト
  const [pdlYOUCLS_CD, setlistPdlYOUCLS_CD] = useState([] as string[][]);

  // 物流要再送プルダウンリスト
  const [listPdlBUTUYOUSAISO, setlistPdlBUTUYOUSAISO] = useState(
    [] as string[][]
  );

  // ＥＤＩ要再送プルダウンリスト
  const [listPdlEDIYOUSAISO, setlistPdlEDIYOUSAISO] = useState(
    [] as string[][]
  );

  // 要求番号プルダウンリスト
  const [listPdlYOUBAN, setlistPdlYOUBAN] = useState([] as string[][]);

  // 入力条件
  const kensakuKbn = [
    ["1", "架情報入力"],
    ["2", "装置情報入力"],
  ];
  const optZSBFLG = [
    ["0", "在庫品"],
    ["1", "再用品"],
  ];
  const chkKOUNYUJYOHOU_FLG = ["1", "購入情報"];

  // フォーム項目
  const [form, setForm] = useState({
    lblSKS_CD: "",                   // 施工組織コード
    txtSekoSosikiName: "",           // 施工組織名
    txtSKJBAN: "",                   // 総合工事番号
    txtSKJ_NM: "",                   // 総合工事名
    txtKOJMGR: "",                   // 工事マネージャ名
    txtWBS_CD: "",                   // WBSコード
    txtKOJ_NM: "",                   // 工事名
    lblBUM_CD: "",                   // 部門コード
    txtBUM_NM: "",                   // 部門名
    ewFlg: "",                       // 東西フラグ
    txtHNK: "",                      // 変更区分
    lblMNGSKH_CD: "",                // 管理責任者コード
    sonkenFlg: "",                   // 存在確認フラグ
    txtNS_BAN: "",                   // NS番号
    txtBUTSTSRKS: "",                // 物品ステータス
    pdlYOUCLS_CD: "",                // 要求種別
    txtYPLHKAD_CD: "",               // 要求プラント保管場所コード（要求組織物管者コード）
    txtUTRHKAD_CD: "",               // 受取プラント保管場所コード（受取組織物管者コード）
    txtBIL_CD: "",                   // ビルコード
    txtBIL_NM: "",                   // ビル名
    txtBIL2: "",                     // ビル名
    optKaSoutiInfo: "",              // 架名装置名情報
    txtUNTHAIBAN: "",                // ユニットコード
    txtNODKSU_NM: "",                // 交換機種名
    txtKMI: "",                      // 架名
    txtKAB: "",                      // 架番号
    txtKTS: "",                      // 架番号桁数
    txtHaichi_FRA: "",               // 配置番号（フロア）
    txtHaichi_GUN: "",               // 配置番号（群）
    txtHaichi_TBN: "",               // 配置番号（通番）
    txtSTMCLS: "",                   // 装置種別名
    txtKMISTM: "",                   // 装置名
    txtSUIBAN: "",                   // 装置番号
    txtTAK: "0",                     // 単価
    txtTAK_asuta: "********",        // 単価
    mTak: "",                        // メートル単価
    txtGOK: "0",                     // 合価
    optZSBFLG: "",                   // 在再フラグ
    txtHINMOKU_CD: "",               // 品目コード
    txtKNA: "",                      // 物品カナ品名
    txtTAN: "",                      // 物品単位
    pdlBUTUYOUSAISO: "",             // 物流要再送プルダウン
    pdlEDIYOUSAISO: "",              // EDI要再送プルダウン
    txtSUU: "0",                     // 数量
    txtSUU_asuta: "*******",         // 数量
    txtHEN_SUU: "0",                 // 数量（変更）
    txtHEN_SUU_asuta: "*******",     // 数量（変更）
    txtGENSUU: "0",                  // 減数量
    txtGENSUU_asuta: "*******",      // 減数量
    txtAB_LEN: "0",                  // ab長
    txtAB_LEN_asuta: "********",     // ab長
    txtSIR_CD: "",                   // 仕入先コード
    txtSYOYTIJKISYK: "",             // 支給予定時期
    txtNONYU_ADR_CD: "",             // 納入先住所コード
    txtBKO: "",                      // 備考
    chkKOUNYUJYOHOU_FLG: ["0"],      // 購入情報
    pdlYOUBAN: "",                   // 要求番号
    txtYKM: "",                      // 要求者
    txtYKSTEL: "",                   // 要求者TEL
    txtTYOTATU_KIKAN: "",            // 調達期間
    txtPAS: "",                      // PAS
    txtSTIJIKUMU: "",                // 指定事項有無
    txtSTJ001: "",                   // 指定１
    txtSTJ002: "",                   // 指定２
    txtSTJ003: "",                   // 指定３
    txtGentyoTAN: "0",               // 単価（現場調達品）
    tenyoKasseiHikassei: true,       // 転用活性非活性用
    kounyujyohoKasseiHikassei: false,// 購入情報活性非活性用
    kajyohoKasseiHikassei: true,     // 架情報活性非活性用
    soutiKasseiHikassei: false,      // 装置情報活性非活性用
    buppinList: [],                  // 物品リスト
    txtLOT_NO: "",                   // ロット番号
    txtKONYU_SHINSEI_NO: "",         // 購入申請番号
    txtSCS_CD: "",                   // 市町村コード
    txtSFS_YBB: "",                  // 送付先郵便番号
    txtSFS_TDFK: "",                 // 送付先都道府県
    txtSFS_SKCS: "",                 // 送付先市区町村
    txtSFS_ADR1: "",                 // 送付先住所１
    txtSFS_ADR2: "",                 // 送付先住所2
    txtSFS_TEL: "",                  // 送付先電話番号
    txtSFS_MAILADDRESS: "",          // 送付先メールアドレス
    txtKJITKN: "",                   // 記事（通建）
    txtARIBA_FLG: "",                // Ariba物品フラグ
    txtJIKO_KAHI_FLG: "",            // 実行可否フラグ
    txtScsCd: "",                    // 市町村コード（ビルコード）
    txtScsNm: "",                    // 市町村名（ビル名）
    txtYbnNo: "",                    // 郵便番号
    txtTdhknKanji: "",               // 都道府県
    txtSikgnchsnKanji: "",           // 市区町村名
    txtOzaTushKanji: "",             // 大字・通称名
    txtAzaChmeKanji: "",             // 字名・丁目
    txtSfsSikOzaAza: "",             // 送付先市町村（市町村名＋太字・通称名＋字名・丁目）
  });
  const handleForm = (e: FormItemOnChangeEvent) => {
    setForm((f) => ({ ...f, [e.target.name]: e.target.value }));
  };

  /**
   * @[概要]モックアップ用;
   */
  const mockup = () => {
    PkgKakuchoParts.setWindowTitle("1.0", "G327P30010");
    setHeader(MockupJson.header);
    setForm(MockupJson.form);
    setlistPdlYOUCLS_CD(MockupJson.listpdlYOUCLS_CD);
    setlistPdlBUTUYOUSAISO(MockupJson.listpdlYpdlBUTUYOUSAISO);
    setlistPdlEDIYOUSAISO(MockupJson.listlblEDIYOUSAISO);
    setlistPdlYOUBAN(MockupJson.listpdlYOUBAN);
    PkgScreenControl.switchLoadingSpinner(false);
  };

  /**
   * @[概要] 初期処理
   * @[詳細] 画面初期化処理
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const init = async () => {
    try {
      // ウィンドウタイトルの設定
      PkgKakuchoParts.setWindowTitle(GVER, GID);

      // 呼出画面を保持
      var yobidasiMotoID = PkgScreenControl.getReffererScreenId();
      PkgLog.log(lblTitle + "OPEN！ このページから呼び出されました。>>>>>>>>>>>>>>>" + yobidasiMotoID + "\n");

      // 画面履歴の設定
      PkgScreenControl.setScreenHistory(
        PkgComGlobal.SCREEN_TYPE_AP,
        GID
      );

      // 引継ぎ情報取得
      // 施工組織コード
      lblSKS_CD = null2blank(PkgScreenControl.getScreenData("SKS_CD")) as string;
      // 施工組織名
      txtSekoSosikiName = null2blank(PkgScreenControl.getScreenData("SKS_NM")) as string;
      // 総合工事番号
      txtSKJBAN = null2blank(PkgScreenControl.getScreenData("SKJBAN")) as string;
      // 総合工事名
      txtSKJ_NM = null2blank(PkgScreenControl.getScreenData("SKJ_NM")) as string;
      // WBSコード
      txtWBS_CD = null2blank(PkgScreenControl.getScreenData("WBS_CD")) as string;
      // 工事名
      txtKOJ_NM = null2blank(PkgScreenControl.getScreenData("FKJ_NM")) as string;
      // 工事マネージャ名
      txtKOJMGR = null2blank(PkgScreenControl.getScreenData("MGR")) as string;
      // 部門コード
      lblBUM_CD = null2blank(PkgScreenControl.getScreenData("BUM_CD")) as string;
      // 部門名
      txtBUM_NM = null2blank(PkgScreenControl.getScreenData("BUM_NM")) as string;

      // 変更区分
      Hnk = null2blank(PkgScreenControl.getScreenData("HNK")) as string;

      // 処理区分
      syoriKBN = null2blank(PkgScreenControl.getScreenData("PRCKBN")) as string;
      // 所外所内区分（所外：１、所内：２）
      sgisnFlg = null2blank(PkgScreenControl.getScreenData("SGISNIFLG")) as string;
      // 東西フラグ
      ewFlg = null2blank(PkgScreenControl.getScreenData("EW_FLG")) as string;
      // 管理責任者コード
      lblMNGSKH_CD = null2blank(PkgScreenControl.getScreenData("MNGSKH_CD")) as string;

      // 引継ぎ項目をフォームに設定
      setHeader((h) => ({
        ...h,
        txtHeaderSksNm: txtSekoSosikiName    // 施工組織名
      }));
      setForm((f) => ({
        ...f,
        lblSKS_CD: lblSKS_CD,                   // 施工組織コード
        txtSKJBAN: txtSKJBAN,                   // 総合工事番号
        txtSKJ_NM: txtSKJ_NM,                   // 総合工事名
        txtWBS_CD: txtWBS_CD,                   // WBSコード
        txtKOJ_NM: txtKOJ_NM,                   // 工事名
        txtKOJMGR: txtKOJMGR,                   // 工事マネージャ名
        lblBUM_CD: lblBUM_CD,                   // 部門コード
        txtBUM_NM: txtBUM_NM,                   // 部門名
        lblMNGSKH_CD: lblMNGSKH_CD              // 管理責任者コード
      }));

      // スピナー表示
      await PkgScreenControl.switchLoadingSpinner(true);

      // 初期処理実施
      PkgLog.log("syoki");
      await syokisyori();

      // 変更フラグを初期状態（false）にリセット
      editFlg = false;

      // フォーカス設定
      if (focusRef.current) {
        // 一番上の活性項目を取得
        const focusableElements = focusRef.current.querySelectorAll(
          'input:not([disabled]):not([readonly]), select:not([disabled]):not([readonly]), textarea:not([disabled]):not([readonly]), button:not([disabled]), [tabindex]:not([tabindex="-1"])'
        );
        if (focusableElements.length > 0) {
          // 活性項目が存在する場合、一番上の活性項目にフォーカスを設定
          PkgBasicParts.focus(focusableElements[0].id);
        }
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "init");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    } finally {
      // スピナー非表示
      await PkgScreenControl.switchLoadingSpinner(false);
    }
  };

  /**
   * @[概要] 初期処理
   * @[詳細] 画面初期化処理
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const syokisyori = async () => {
    try {
      PkgLog.log("\n\n\n\n***** 初期処理 *****\n");

      // 要求種別リスト取得
      await findYokyuSyubetu();
      // システムエラーが発生した場合、後続処理をスキップ
      if (systemErrorFlg) {
        return;
      }

      // 上り電文を設定する
      let aryNobori = {
        SKS_CD: lblSKS_CD,  // 施工組織コード
        SKJBAN: txtSKJBAN,  // 総合工事番号
        WBS_CD: txtWBS_CD,  // WBSコード
        HNK: Hnk,           // 変更区分
        PRCKBN: syoriKBN,   // 処理区分
        LIST_BUT: PkgScreenControl.getScreenData("BUPPIN_LIST")  // 物品情報
      };

      type kudari = {
        HKM: string,
        NS_BAN_NM: string,
        BUTSTSRKS: string,
        BUTSTS: string,
        YOUCLS_CD: string,
        YPLHKAD_CD: string,
        UTRHKAD_CD: string,
        BIL_CD: string,
        BIL_NM: string,
        KMISTMFLG: string,
        NODKSU_NM: string,
        UNTHAIBAN: string,
        KMI: string,
        KAB: string,
        KTS: string,
        HAITI_FRA: string,
        HAITI_GUN: string,
        HAITI_TBN: string,
        SUIBAN: string,
        KMISTM: string,
        STM: string,
        ZSBFLG: string,
        HINMOKU_CD: string,
        SUU: number,
        HEN_SUU: number,
        GENSUU: number,
        AB_LEN: number,
        SIR_CD: string,
        SYOYTIJKISYK: string,
        NONYU_ADR_CD: string,
        BKO: string,
        KOUNYUJYOHOU_FLG: string,
        YKM: string,
        YKSTEL: string,
        TYOTATU_KIKAN: number,
        PAS: string,
        STIJIKUMU: string,
        STJ001: string,
        STJ002: string,
        STJ003: string,
        KNA: string,
        TAN: number,
        MNGSKH_CD: string,
        YOUBAN: string,
        BTRYOSSSNFLG: string,
        EDIYOSSSNFLG: string,
        GAIA_TRIKSKBN: string,
        LIST_BUT: number[][],
        LIST_COLUMN: Array<[string, boolean]>,
        TAK: number,
        HAIBAN: string,
        GOK: number,
        GENBA_TAK: number
        LOT_NO: string,                  // ロット番号
        KONYU_SHINSEI_NO: string,        // 購入申請番号
        SCS_CD: string,                  // 市町村コード
        SFS_YBB: string,                 // 送付先郵便番号
        SFS_TDFK: string,                // 送付先都道府県
        SFS_SKCS: string,                // 送付先市区町村
        SFS_ADR1: string,                // 送付先住所１
        SFS_ADR2: string,                // 送付先住所2
        SFS_TEL: string,                 // 送付先電話番号
        SFS_MAILADDRESS: string,         // 送付先メールアドレス
        KJITKN: string,                  // 記事（通建）
        ARIBA_FLG: string,               // Ariba物品フラグ
        JIKO_KAHI_FLG: string            // 実行可否フラグ
      };

      PkgLog.log(aryNobori.PRCKBN + "\n");
      // サーバ処理実行
      let rcdKudari = await PkgHttp.callGateway<kudari>(SEQID_SYOKISYORI, aryNobori);

      // サーバ処理後
      if (rcdKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
        // システムエラーの場合、全コントロールをロック
        PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
        // 戻るボタンにフォーカスをセット
        PkgBasicParts.focus("btnBack");
        return;
      } else if (rcdKudari.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
        // 業務エラーの場合、エラーメッセージを表示
        PkgMessage.putMessageBox(rcdKudari.MESSAGE_ID, rcdKudari.MSG_PARAM);
      } else if (rcdKudari.RESULT === PkgHttp.Result.SUCCESS) {
        // 正常終了の場合
        if (rcdKudari.MESSAGE_ID !== null && rcdKudari.MESSAGE_ID !== "") {
          PkgMessage.putMessageBox(rcdKudari.MESSAGE_ID , rcdKudari.MSG_PARAM);
          // 数量０の無効化データの時は登録ボタンを非活性
          if (rcdKudari.MESSAGE_ID === "NNCW1092") {
            PkgBasicParts.setDisabled("btnToroku", true);
          }
        }

        // 情報をセット
        let busiData = rcdKudari.BUSINESS_DATA;
        let txtHNK: string = null2blank(busiData.HKM) as string;                // 変更区分
        let txtNS_BAN: string = null2blank(busiData.NS_BAN_NM) as string;       // NS番号
        let txtBUTSTSRKS: string = null2blank(busiData.BUTSTSRKS) as string;    // 物品ステータス
        butsts = null2blank(busiData.BUTSTS) as string;                         // 物品ステータス
        ykSyubetu = null2blank(busiData.YOUCLS_CD) as string;                   // 要求種別
        txtYPLHKAD_CD = null2blank(busiData.YPLHKAD_CD) as string;              // 要求プラント保管場所コード（要求組織物管者コード）
        let txtUTRHKAD_CD: string = null2blank(busiData.UTRHKAD_CD) as string;  // 受取プラント保管場所コード（受取組織物管者コード）
        let txtBIL_CD: string = null2blank(busiData.BIL_CD) as string;          // ビルコード
        let txtBIL_NM: string = null2blank(busiData.BIL_NM) as string;          // 略称ビル名

        if (syoriKBN === "1") {
          PkgLog.log([txtBUM_NM, "******"]);
          if (txtBUM_NM === "交換") {
            await setKaSouti_option("0");
          } else {
            await setKaSouti_option("1");
          }
        } else {
          await setKaSouti_option(busiData.KMISTMFLG); // 架名装置名フラグ
        }

        let txtNODKSU_NM: string = null2blank(busiData.NODKSU_NM) as string;  // 交換機種名
        let txtUNTHAIBAN: string = null2blank(busiData.UNTHAIBAN) as string;  // ﾕﾆｯﾄｺｰﾄﾞ

        let txtKMI: string = null2blank(busiData.KMI) as string;  // 架名
        let txtKAB: string = null2blank(busiData.KAB) as string;  // 架番号
        let txtKTS: string = null2blank(busiData.KTS) as string;  // 架番号桁数
        PkgLog.log([">>>>>", busiData.KTS, "<<<<<<<<<"]);

        zeroPaddingForFRA(null2blank(busiData.HAITI_FRA) as string);               // 配置番号（フロア）
        let txtHaichi_GUN: string = null2blank(busiData.HAITI_GUN) as string;      // 配置番号 （群）
        zeroPadding("txtHaichi_TBN", null2blank(busiData.HAITI_TBN) as string, 4); // 配置番号 （通番）

        let txtSUIBAN: string = null2blank(busiData.SUIBAN) as string;  // 装置番号
        let txtSTMCLS: string = null2blank(busiData.KMISTM) as string;  // 装置種別名
        let txtKMISTM: string = null2blank(busiData.STM) as string;     // 装置名

        let tmp1: string = busiData.ZSBFLG;
        if (tmp1 !== "0" && tmp1 !== "1") {
          initFlgOptZSBFLG = false;  // 在再フラグ初期フラグ
        }

        txtHINMOKU_CD = null2blank(busiData.HINMOKU_CD) as string;                // 品目コード
        txtSUU = null2blank(String(busiData.SUU)) as string;                      // 数量
        let txtHEN_SUU: string = null2blank(String(busiData.HEN_SUU)) as string;  // 数量（変更）
        let txtGENSUU: string = null2blank(String(busiData.GENSUU)) as string;    // 減数量
        txtAB_LEN = null2blank(String(busiData.AB_LEN)) as string;                // ab長

        // 数字のアスタ対応
        // 数量
        if (isKome(txtSUU)) {
          PkgBasicParts.setDisplay("txtSUU", false);
          PkgBasicParts.setDisplay("txtSUU_asuta", true);
        } else {
          PkgBasicParts.setDisplay("txtSUU", true);
          PkgBasicParts.setDisplay("txtSUU_asuta", false);
        }
        // 数量（変更）
        if (isKome(txtHEN_SUU)) {
          PkgBasicParts.setDisplay("txtHEN_SUU", false);
          PkgBasicParts.setDisplay("txtHEN_SUU_asuta", true);
        } else {
          PkgBasicParts.setDisplay("txtHEN_SUU", true);
          PkgBasicParts.setDisplay("txtHEN_SUU_asuta", false);
        }
        // 減数量
        if (isKome(txtGENSUU)) {
          PkgBasicParts.setDisplay("txtGENSUU", false);
          PkgBasicParts.setDisplay("txtGENSUU_asuta", true);
        } else {
          PkgBasicParts.setDisplay("txtGENSUU", true);
          PkgBasicParts.setDisplay("txtGENSUU_asuta", false);
        }
        // ab長
        if (isKome(txtAB_LEN)) {
          PkgBasicParts.setDisplay("txtAB_LEN", false);
          PkgBasicParts.setDisplay("txtAB_LEN_asuta", true);
        } else {
          PkgBasicParts.setDisplay("txtAB_LEN", true);
          PkgBasicParts.setDisplay("txtAB_LEN_asuta", false);
        }

        let txtSIR_CD: string = null2blank(busiData.SIR_CD) as string;        // 仕入先コード
        let txtSYOYTIJKISYK: string = null2blank(busiData.SYOYTIJKISYK) as string;  // 支給予定時期
        txtNONYU_ADR_CD = null2blank(busiData.NONYU_ADR_CD) as string;        // 納入先住所コード
        let txtBKO: string = null2blank(busiData.BKO) as string;              // 備考

        let tmp: string = busiData.KOUNYUJYOHOU_FLG;  // 購入情報
        checkFlg = tmp;
        // 購入情報グループボックスの活性制御
        if (tmp === "1") {
          await changeInputModeKounyu(true);
        } else {
          await changeInputModeKounyu(false);
        }
        let txtYKM: string = null2blank(busiData.YKM) as string;              // 要求者
        let txtYKSTEL: string = null2blank(busiData.YKSTEL) as string;        // 要求者TEL
        let txtTYOTATU_KIKAN: string = null2blank(String(busiData.TYOTATU_KIKAN)) as string;  // 調達期間
        let txtPAS: string = null2blank(busiData.PAS) as string;              // PAS
        txtSTIJIKUMU = null2blank(busiData.STIJIKUMU) as string;              // 指定事項有無
        let txtSTJ001: string = null2blank(busiData.STJ001) as string;        // 指定１
        let txtSTJ002: string = null2blank(busiData.STJ002) as string;        // 指定２
        let txtSTJ003: string = null2blank(busiData.STJ003) as string;        // 指定３
        let txtKNA: string = null2blank(busiData.KNA) as string;              // カナ品名
        let txtTAN: string = null2blank(String(busiData.TAN)) as string;      // 単位
        let txtLOT_NO: string = null2blank(busiData.LOT_NO) as string;                  // ロット番号
        let txtKONYU_SHINSEI_NO: string = null2blank(busiData.KONYU_SHINSEI_NO) as string; // 購入申請番号
        let txtSCS_CD: string = null2blank(busiData.SCS_CD) as string;                  // 市町村コード
        let txtSFS_YBB: string = null2blank(busiData.SFS_YBB) as string;                // 送付先郵便番号
        let txtSFS_TDFK: string = null2blank(busiData.SFS_TDFK) as string;              // 送付先都道府県
        let txtSFS_SKCS: string = null2blank(busiData.SFS_SKCS) as string;              // 送付先市区町村
        let txtSFS_ADR1: string = null2blank(busiData.SFS_ADR1) as string;              // 送付先住所１
        let txtSFS_ADR2: string = null2blank(busiData.SFS_ADR2) as string;              // 送付先住所2
        let txtSFS_TEL: string = null2blank(busiData.SFS_TEL) as string;                // 送付先電話番号
        let txtSFS_MAILADDRESS: string = null2blank(busiData.SFS_MAILADDRESS) as string; // 送付先メールアドレス
        let txtKJITKN: string = null2blank(busiData.KJITKN) as string;                  // 記事（通建）
        let txtARIBA_FLG: string = null2blank(busiData.ARIBA_FLG) as string;            // Ariba物品フラグ
        let txtJIKO_KAHI_FLG: string = null2blank(busiData.JIKO_KAHI_FLG) as string;    // 実行可否フラグ

        // 要求番号リスト取得
        await findYokyuBango();
        // システムエラーが発生した場合、後続処理をスキップ
        if (systemErrorFlg) {
          return;
        }

        let tmp3 = busiData.YOUBAN;
        if (Number(tmp3) >= 0) {

        } else {
          initFlgPdlYOUBAN = false;
        }

        // 物流要再送プルダウンの作成
        let pulldownList: string[][] = createPullDown(syoriKBN, busiData.BTRYOSSSNFLG) as string[][];
        setlistPdlBUTUYOUSAISO(pulldownList);
        // ＥＤＩ要再送プルダウンの作成
        pulldownList = [];
        pulldownList = createPullDown(syoriKBN, busiData.EDIYOSSSNFLG) as string[][];
        setlistPdlEDIYOUSAISO(pulldownList);
        // GAIA取消区分
        gaiaTrikskbn = null2blank(busiData.GAIA_TRIKSKBN) as string;

        // 物品情報リストを取得
        let resultList: number[][] = busiData.LIST_BUT;
        if (resultList !== null && resultList.length > 0) {
          buppinList = resultList.map(subArray => subArray.map(num => num.toString()));
        } else {
          buppinList = [] as string[][];
        }

        // 入力可否リストをセット
        let resultColumnList: Array<[string, boolean]> = busiData.LIST_COLUMN;
        setColumnKasseiHikassei(resultColumnList);

        // 物品定数を取得
        if (!isKome(txtHINMOKU_CD)) {
          await buppinJyosusyutoku();
        } else {
          txtKNA = "";
          txtTAN = "";
        }
        koTAK = busiData.TAK;
        PkgLog.log(["*****　物品要求に登録されている単価[", koTAK, "]\n"]);
        // 表示単価をセット
        await takSet();

        setForm((f) => ({
          ...f,
          txtHNK: txtHNK,                         // 変更区分
          txtNS_BAN: txtNS_BAN,                   // NS番号
          txtBUTSTSRKS: txtBUTSTSRKS,             // 物品ステータス
          pdlYOUCLS_CD: ykSyubetu,                // 要求種別
          txtYPLHKAD_CD: txtYPLHKAD_CD,           // 要求プラント保管場所コード（要求組織物管者コード）
          txtUTRHKAD_CD: txtUTRHKAD_CD,           // 受取プラント保管場所コード（受取組織物管者コード）
          txtBIL_CD: txtBIL_CD,                   // ビルコード
          txtBIL_NM: txtBIL_NM,                   // 略称ビル名
          txtNODKSU_NM: txtNODKSU_NM,             // 交換機種名
          txtUNTHAIBAN: txtUNTHAIBAN,             // ﾕﾆｯﾄｺｰﾄﾞ
          txtKMI: txtKMI,                         // 架名
          txtKAB: txtKAB,                         // 架番号
          txtKTS: txtKTS,                         // 架番号桁数
          txtHaichi_GUN: txtHaichi_GUN,           // 配置番号 （群）
          txtSUIBAN: txtSUIBAN,                   // 装置番号
          txtSTMCLS: txtSTMCLS,                   // 装置種別名
          txtKMISTM: txtKMISTM,                   // 装置名
          optZSBFLG: tmp1,                        // 在再フラグ
          txtHINMOKU_CD: txtHINMOKU_CD,           // 品目コード
          txtSUU: txtSUU === "" ? "0" : txtSUU,   // 数量
          txtSUU_asuta: txtSUU,                   // 数量（アスタリスク）
          txtHEN_SUU: txtHEN_SUU === "" ? "0" : txtHEN_SUU, // 数量（変更）
          txtHEN_SUU_asuta: txtHEN_SUU,           // 数量（変更）（アスタリスク）
          txtGENSUU: txtGENSUU === "" ? "0" : txtGENSUU, // 減数量
          txtGENSUU_asuta: txtGENSUU,             // 減数量（アスタリスク）
          txtAB_LEN: txtAB_LEN === "" ? "0" : txtAB_LEN, // ab長
          txtAB_LEN_asuta: txtAB_LEN,             // ab長（アスタリスク）
          txtSIR_CD: txtSIR_CD,                   // 仕入先コード
          txtSYOYTIJKISYK: txtSYOYTIJKISYK.substring(0, 10), // 支給予定時期
          txtNONYU_ADR_CD: txtNONYU_ADR_CD,       // 納入先住所コード
          txtBKO: txtBKO,                         // 備考
          chkKOUNYUJYOHOU_FLG: [tmp],             // 購入情報
          txtYKM: txtYKM,                         // 要求者
          txtYKSTEL: txtYKSTEL.substring(0, 12),  // 要求者TEL
          txtTYOTATU_KIKAN: txtTYOTATU_KIKAN,     // 調達期間
          txtPAS: txtPAS,                         // PAS
          txtSTIJIKUMU: txtSTIJIKUMU,             // 指定事項有無
          txtSTJ001: txtSTJ001,                   // 指定１
          txtSTJ002: txtSTJ002,                   // 指定２
          txtSTJ003: txtSTJ003,                   // 指定３
          txtKNA: txtKNA,                         // カナ品名
          txtTAN: txtTAN,                         // 単位
          pdlYOUBAN: tmp3,                        // 要求番号
          pdlBUTUYOUSAISO: busiData.BTRYOSSSNFLG, // 物流要再送プルダウン
          pdlEDIYOUSAISO: busiData.EDIYOSSSNFLG,  // ＥＤＩ要再送プルダウン
          txtLOT_NO: txtLOT_NO,                   // ロット番号
          txtKONYU_SHINSEI_NO: txtKONYU_SHINSEI_NO,    // 購入申請番号
          txtSCS_CD: txtSCS_CD,                        // 市町村コード
          txtSFS_YBB: txtSFS_YBB,                      // 送付先郵便番号
          txtSFS_TDFK: txtSFS_TDFK,                    // 送付先都道府県
          txtSFS_SKCS: txtSFS_SKCS,                    // 送付先市区町村
          txtSFS_ADR1: txtSFS_ADR1,                    // 送付先住所１
          txtSFS_ADR2: txtSFS_ADR2,                    // 送付先住所2
          txtSFS_TEL: txtSFS_TEL,                      // 送付先電話番号
          txtSFS_MAILADDRESS: txtSFS_MAILADDRESS,      // 送付先メールアドレス
          txtKJITKN: txtKJITKN,                        // 記事（通建）
          txtARIBA_FLG: txtARIBA_FLG,                  // Ariba物品フラグ
          txtJIKO_KAHI_FLG: txtJIKO_KAHI_FLG,          // 実行可否フラグ

        }));
      }
      // ボタンの活性非活性
      await buttomCheck();

      // 要求種別変更時 初期は数量（変更）を非活性
      if (syoriKBN === "3") {
        PkgBasicParts.setDisabled("txtHEN_SUU", true);
      }
      if (syoriKBN === "1") {
        PkgBasicParts.setDisabled("chkKOUNYUJYOHOU_FLG_1", true);
        // 購入情報グループボックスを非活性化する
        await changeInputModeKounyu(false);
        setForm((f) => ({
          ...f,
          txtNONYU_ADR_CD: lblSKS_CD  // 納入先住所コード
        }));
      }
      initFlg = "1";
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 登録ボタン
   * @[詳細] (内部処理系)登録処理
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const touroku = async () => {
    try {
      PkgLog.log("***** 登録処理 *****\n");

      // 入力チェック
      let numRes;
      let msg = inputCheck() as string;
      if (msg !== null && msg !== "") {
        PkgLog.log(["MSGID=", msg]);
        numRes = PkgMessage.putMessageBox(msg, messageParm);
        if (msg === "NNCC1025") {
          if (numRes === false) {
            // キャンセル時処理終了
            return;
          }
        } else {
          return;
        }
      } else {
        // 所要期チェック
        if (checkSyoyoki() === false) {
          return;
        }

        // 変更要求（SOAP）チェック
        if (checkSoap() === false) {
          return ;
        }

        // 要求種別変更の場合、要求種別が購入ならエラーとする
        if (syoriKBN === "3") {
          if (form.pdlYOUCLS_CD === "0") {
            PkgMessage.putMessageBox("NNCW5072", []);
            return;
          }
          if (form.txtHEN_SUU > form.txtSUU) {
            let umekomi = [];
            umekomi[0] = "（変更）";
            umekomi[1] = "数量未満";
            PkgMessage.putMessageBox("NNCW1080", umekomi);
            return;
          }
        }

        // スピナー表示
        await PkgScreenControl.switchLoadingSpinner(true);

        // 内部保持データのＮＳ／ＣＳ区分が'2'（CS）の場合エラーとする
        if (nscsKbn === "2") {
          let umekomi = [];
          umekomi[0] = "CS物品";
          PkgMessage.putMessageBox("NNCW0018", umekomi);
          // 品目コードにフォーカスを設定する
          PkgBasicParts.focus("txtHINMOKU_CD");
          return;
        }

        // 処理区分が追加：1、修正：2 の場合は所要期チェックを実行する
        if (syoriKBN === "1" || syoriKBN === "2") {
          // 所要期チェック上り電文を設定する
          let checkNobori = {
            SYOYTIJKISYK: form.txtSYOYTIJKISYK      // 支給予定時期
          }

          type kudari = {
            msgID: string;
          };

          // サーバ処理実行（所要期チェック）
          const checkKudari = await PkgHttp.callGateway<kudari>(SEQID_SYOYOKI_CHECK, checkNobori);

          if (checkKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
            // システムエラーの場合、全コントロールをロック
            PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
            // 戻るボタンにフォーカスをセット
            PkgBasicParts.focus("btnBack");
            return;
          } else if (checkKudari.RESULT === PkgHttp.Result.SUCCESS) {
            let msgID = checkKudari.BUSINESS_DATA.msgID;
            let umekomi = [];
            umekomi[0] = "所要期";

            // 正常終了の場合
            if (msgID === "NNCC1075") {
              if (PkgMessage.putMessageBox(msgID, umekomi) === false) {
                // 登録ボタンにフォーカスをセット
                PkgBasicParts.focus("btnToroku");
                return;
              }
            }
          }
        }
        // GAIA取消区分が '0'（取消）、または*（アスタリスク）の場合
        if (gaiaTrikskbn === "0" || isKome(gaiaTrikskbn)) {
          let umekomi = [];
          umekomi[0] = "取消物品を修正";
          if (false === PkgMessage.putMessageBox("NNCC0001", umekomi)) {
            // キャンセル時処理終了
            return;
          }
        } else {
          // 上記以外の場合
          // 確認ダイアログ表示
          let umekomi = [];
          umekomi[0] = "登録";
          if (false === PkgMessage.putMessageBox("NNCC0001", umekomi)) {
            // キャンセル時処理終了
            return;
          }
        }
      }

      // 単価
      let tak = ""
      if (isKome(form.txtTAK) === false) {
        tak = form.txtTAK;
      } else {
        tak = KOME_UME;
      }

      // メートル単価（ab長部単価）
      let noboriMTak: number;
      if (abTakhji === "1") {
        // ab長物品の場合
        noboriMTak = mTak as number;
      } else {
        // その他物品
        noboriMTak = 0;
      }

      // 数量
      let suu = "";
      if (isKome(form.txtSUU) === false) {
        suu = form.txtSUU;
      } else {
        suu = KOME_UME;
      }
      // 数量（変更）
      let henSuu = "";
      if (isKome(form.txtHEN_SUU) === false) {
        henSuu = form.txtHEN_SUU;
      } else {
        henSuu = KOME_UME;
      }
      // 減数量
      let genSuu = "";
      if (isKome(form.txtGENSUU) === false) {
        genSuu = form.txtGENSUU;
      } else {
        genSuu = KOME_UME;
      }
      // ab長
      let abLen = "";
      if (isKome(form.txtAB_LEN) === false) {
        abLen = form.txtAB_LEN;
      } else {
        abLen = KOME_UME;
      }

      let tmp = String(form.chkKOUNYUJYOHOU_FLG); // 購入情報
      let kounyuhyohouFlg = "";
      if (tmp === "-1") {
        kounyuhyohouFlg = "-1";
      } else if (tmp === "0") {
        kounyuhyohouFlg = "1";
      } else {
        kounyuhyohouFlg = "0";
      }

      // 単価（現場調達品）
      let genbaTak = "";
      if (isKome(form.txtGentyoTAN) === false) {
        genbaTak = form.txtGentyoTAN;
      } else {
        genbaTak = KOME_UME;
      }

      // ダミーデータを設定
      let kmiDmy = form.txtKMI;
      let kabDmy = form.txtKAB;
      let stmDmy = form.txtKMISTM;
      let suibanDmy = form.txtSUIBAN;
      if (getKaSouti_option() === "0") {
        // 架名
        if (kmiDmy === null || kmiDmy === "") {
          kmiDmy = "ZZZZZZZZZZZZZZZZ";
        }
        if (kabDmy === null || kabDmy === "") {
          kabDmy = "9999";
        }
      } else {
        // 装置名
        if (stmDmy === null || stmDmy === "") {
          stmDmy = "ZZZZZZZZZZZZZZZZ";
        }
        if (suibanDmy === null || suibanDmy === "") {
          suibanDmy = "9999";
        }
      }

      // 上り電文を設定する
      let aryNobori = {
        SKS_CD: form.lblSKS_CD,               // 施工組織コード
        SKJBAN: form.txtSKJBAN,               // 総合工事番号
        WBS_CD: form.txtWBS_CD,               // WBSコード
        PRCKBN: syoriKBN,                     // 処理区分
        HNK: Hnk,                             // 変更区分
        LIST_BUT: buppinList,                 // 物品データ
        YOUCLS_CD: form.pdlYOUCLS_CD,         // 要求種別
        YPLHKAD_CD: form.txtYPLHKAD_CD,       // 要求プラント保管場所コード（要求組織物管者コード）
        UTRHKAD_CD: form.txtUTRHKAD_CD,       // 受取プラント保管場所コード（受取組織物管者コード）
        BIL_CD: form.txtBIL_CD,               // ビルコード
        BIL_NM: form.txtBIL_NM,               // ビル名
        NODKSU_NM: form.txtNODKSU_NM,         // 交換機種名
        KMI: kmiDmy,                          // 架名
        KAB: kabDmy,                          // 架番号
        KMISTM: STMCLS_CD,                    // 装置種別名
        STM: stmDmy,                          // 装置名
        SUIBAN: suibanDmy,                    // 装置番号
        TAK: tak,                             // 単価
        GOK: form.txtGOK,                     // 合価
        KOTAK: String(koTAK),                 // 個単価
        MTAK: String(noboriMTak),             // メートル単価（ab長部単価）
        ZSBFLG: form.optZSBFLG,               // 在再フラグ
        HINMOKU_CD: form.txtHINMOKU_CD,       // 品目コード
        SUU: suu,                             // 数量
        HEN_SUU: henSuu,                      // 数量（変更）
        GENSUU: genSuu,                       // 減数量
        AB_LEN: abLen,                        // ab長
        SIR_CD: form.txtSIR_CD,               // 仕入先コード
        SYOYTIJKISYK: form.txtSYOYTIJKISYK,   // 支給予定時期
        NONYU_ADR_CD: form.txtNONYU_ADR_CD,   // 納入先住所コード
        BKO: form.txtBKO,                     // 備考
        KOUNYUJYOHOU_FLG: kounyuhyohouFlg,    // 購入情報
        YOUBAN: form.pdlYOUBAN,               // 要求番号
        YKM: form.txtYKM,                     // 要求者
        YKSTEL: form.txtYKSTEL,               // 要求者TEL
        TYOTATU_KIKAN: form.txtTYOTATU_KIKAN, // 調達期間
        PAS: form.txtPAS,                     // PAS
        STIJIKUMU: form.txtSTIJIKUMU,         // 指定事項有無
        STJ001: form.txtSTJ001,               // 指定１
        STJ002: form.txtSTJ002,               // 指定２
        STJ003: form.txtSTJ003,               // 指定３
        KNA: form.txtKNA,                     // カナ品名
        TAN: form.txtTAK,                     // 単位
        GENBA_TAK: genbaTak,                  // 単価（現場調達品）
        KMISTMFLG: getKaSouti_option() as string, // 架名装置名フラグ
        SYOGAISYONAIFLG: sgisnFlg,            // 所内所外フラグ
        KMISTM_MDFY_FLG: hoji_kameisoutiFlg,  // 架名装置名変更フラグ
        EDI_SEND_FLG: ediSendFlg,             // EDI送信対象フラグ
        BUM_CD: form.lblBUM_CD,               // 部門コード
        UNTHAIBAN: form.txtUNTHAIBAN,         // ユニットコード
        HAITI_FRA: form.txtHaichi_FRA,        // 配置番号（フロア）
        HAITI_GUN: form.txtHaichi_GUN,        // 配置番号（群）
        HAITI_TBN: form.txtHaichi_TBN,        // 配置番号（通番）
        HTIUTWKHF: htiutwkhf,                 // 本体内訳-構成品
        GNBCTHFLG: gnbcthflg,                 // 現場調達品フラグ
        BTRYOSSSNFLG: form.pdlBUTUYOUSAISO,   // 物流要再送信フラグ
        EDIYOSSSNFLG: form.pdlEDIYOUSAISO,    // EDI要再送信フラグ
        EWFLG: ewFlg                          // 東西フラグ
      }

      // サーバ処理実行
      let SYORIID: string = "";
      if (syoriKBN === "4") {
        SYORIID = SEQID_TOROKU_SAISOUHOSEI;
      } else if (syoriKBN === "3") {
        SYORIID = SEQID_TOROKU_YOKYUSYUBETU;
      } else if (syoriKBN === "2") {
        SYORIID = SEQID_TOROKU_SYUSEI;
      } else {
        SYORIID = SEQID_TOROKU_TUIKA;
      }

      type kudari = {
        FOCUS_COLUMN: string;
      };

      const rcdKudari = await PkgHttp.callGateway<kudari>(SYORIID, aryNobori);

      // サーバ処理後の処理
      if (rcdKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
        // システムエラーの場合、全コントロールをロック
        PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
        // フォーカスを戻るボタンに設定
        PkgBasicParts.focus("btnBack");
        return;
      } else if (rcdKudari.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
        // 業務エラーの場合、エラーメッセージを表示
        let focus_column = rcdKudari.BUSINESS_DATA.FOCUS_COLUMN;
        if (focus_column !== null && focus_column !== "") {
          PkgBasicParts.focus(focus_column);
        }
        PkgMessage.putMessageBox(rcdKudari.MESSAGE_ID, rcdKudari.MSG_PARAM);
      } else if (rcdKudari.RESULT === PkgHttp.Result.SUCCESS) {
        // 正常終了の場合
        PkgMessage.putMessageBox(rcdKudari.MESSAGE_ID, rcdKudari.MSG_PARAM);

        // メニューに戻る 新規以外
        if (syoriKBN !== "1") {
          await prevScreen(PkgComGlobal.PREV_TYPE_PREV);
        }

        // 追加時の連続登録用初期処理
        await tuikaInit();
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "touroku");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
      PkgLog.log("例外が発生しました。位置:「touroku」");
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力チェック
   * @[詳細] 入力チェック
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const inputCheck = () => {
    try {
      // 追加の時
      if (syoriKBN === "1") {
        let res = "";
        let data;

        // 要求プラント保管場所コード（要求組織物管者コード） txtYPLHKAD_CD
        data = form.txtYPLHKAD_CD;
        if (isCheckTarget("btnYPLHKAD_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "要求プラント保管場所コード（要求組織物管者コード）";
            PkgBasicParts.focus("txtYPLHKAD_CD");
            return res;
          }
        }
        
        // 受取プラント保管場所コード（受取組織物管者コード） txtUTRHKAD_CD
        data = form.txtUTRHKAD_CD;
        if (isCheckTarget("btnUTRHKAD_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "受取プラント保管場所コード（受取組織物管者コード）";
            PkgBasicParts.focus("txtUTRHKAD_CD");
            return res;
          }
        }
        
        // ビルコード txtBIL_CD
        data = form.txtBIL_CD;
        if (isCheckTarget("txtBIL_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "ビルコード";
            PkgBasicParts.focus("txtBIL_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "ビルコード";
            PkgBasicParts.focus("txtBIL_CD");
            return res;
          }
        }

        // 架名装置名フラグより有効項目を判定する
        let kaSoutiFlg = getKaSouti_option();
        if (kaSoutiFlg === "0") {
          // ユニットコード txtUNTHAIBAN
          data = form.txtUNTHAIBAN;
          if (isCheckTarget("txtUNTHAIBAN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ユニットコード";
              PkgBasicParts.focus("txtUNTHAIBAN");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ユニットコード";
              PkgBasicParts.focus("txtUNTHAIBAN");
              return res;
            }
          }
          // 架名 txtKMI
          data = form.txtKMI;
          if (isCheckTarget("txtKMI", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisuKanaKigou(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "架名";
                PkgBasicParts.focus("txtKMI");
                return res;
              }
            }
          }
          // 架番号 txtKAB
          data = form.txtKAB;
          if (isCheckTarget("txtKAB", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisu(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "架番号";
                PkgBasicParts.focus("txtKAB");
                return res;
              }
            }
          }
        } else if (kaSoutiFlg === "1") {
          // 配置番号(フロア) txtHaichi_FRA
          data = form.txtHaichi_FRA;
          if (isCheckTarget("txtHaichi_FRA", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(フロア) ";
              PkgBasicParts.focus("txtHaichi_FRA");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(フロア) ";
              PkgBasicParts.focus("txtHaichi_FRA");
              return res;
            }
          }
          // 配置番号(群) txtHaichi_GUN
          data = form.txtHaichi_GUN;
          if (isCheckTarget("txtHaichi_GUN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(群)";
              PkgBasicParts.focus("txtHaichi_GUN");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(群)";
              PkgBasicParts.focus("txtHaichi_GUN");
              return res;
            }
            if (!("A" <= data && data <= "Z")) {
              messageParm = [];
              messageParm[0] = "A～Z \n配置番号(群)";
              PkgBasicParts.focus("txtHaichi_GUN");
              return "NNCW0056";
            }
          }
          // 配置番号(通番) txtHaichi_TBN
          data = form.txtHaichi_TBN;
          if (isCheckTarget("txtHaichi_TBN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(通番)";
              PkgBasicParts.focus("txtHaichi_TBN");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(通番)";
              PkgBasicParts.focus("txtHaichi_TBN");
              return res;
            }
          }
          // 装置名 txtKMISTM
          data = form.txtKMISTM;
          if (isCheckTarget("txtKMISTM", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisuKanaKigou(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "装置名";
                PkgBasicParts.focus("txtKMISTM");
                return res;
              }
            }
          }
          // 装置番号 txtSUIBAN
          data = form.txtSUIBAN;
          if (isCheckTarget("txtSUIBAN", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisu(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "装置番号";
                PkgBasicParts.focus("txtSUIBAN");
                return res;
              }
            }
          }
        }
        // 品目コード txtHINMOKU_CD
        data = form.txtHINMOKU_CD;
        if (isCheckTarget("txtHINMOKU_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "品目コード";
            PkgBasicParts.focus("txtHINMOKU_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "品目コード";
            PkgBasicParts.focus("txtHINMOKU_CD");
            return res;
          }
        }
        // 数量 txtSUU
        data = form.txtSUU;
        if (isCheckTarget("txtSUU", data)) {
          if (Number(data) < 0) {
            messageParm = [];
            messageParm[0] = "数量";
            PkgBasicParts.focus("txtSUU");
            return "NNCW0117";
          }
          res = checkHissuSuryo(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "数量";
            PkgBasicParts.focus("txtSUU");
            return res;
          }
          res = checkNumber(data, 4) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "数量";
            PkgBasicParts.focus("txtSUU");
            return res;
          }
          res = checkByte(data, 4) as string;
          if (res.length > 0) {
            messageParm = ["数量", "4"];
            PkgBasicParts.focus("txtSUU");
            return res;
          }
        }
        // 減数量 txtGENSUU
        data = form.txtGENSUU;
        if (isCheckTarget("txtGENSUU", data)) {
          res = checkNumber(data, 4) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "減数量";
            PkgBasicParts.focus("txtGENSUU");
            return res;
          }
          if (Number(data) < 0) {
            messageParm = [];
            messageParm[0] = "減数量";
            PkgBasicParts.focus("txtGENSUU");
            return "NNCW0117";
          }
          res = checkByte(data, 4) as string;
          if (res.length > 0) {
            messageParm = ["減数量", "4"];
            PkgBasicParts.focus("txtGENSUU");
            return res;
          }
        }
        // ab長 txtAB_LEN
        data = form.txtAB_LEN;
        if (isCheckTarget("txtAB_LEN", data)) {
          if (abTakhji === "1") {
            if (Number(data) < 0) {
              messageParm = [];
              messageParm[0] = "ab長";
              PkgBasicParts.focus("txtAB_LEN");
              return "NNCW0117";
            }
            res = checkHissuSuryo(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ab長";
              PkgBasicParts.focus("txtAB_LEN");
              return res;
            }
            res = checkNumber(data, 4) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ab長";
              PkgBasicParts.focus("txtAB_LEN");
              return res;
            }
            res = checkByte(data, 5) as string;
            if (res.length > 0) {
              messageParm = ["ab長", "5"];
              PkgBasicParts.focus("txtAB_LEN");
              return res;
            }
          }
        }
        // 仕入先コード txtSIR_CD
        data = form.txtSIR_CD;
        if (isCheckTarget("txtSIR_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "仕入先コード";
            PkgBasicParts.focus("txtSIR_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "仕入先コード";
            PkgBasicParts.focus("txtSIR_CD");
            return res;
          }
        }
        // 支給予定時期 txtSYOYTIJKISYK
        data = form.txtSYOYTIJKISYK;
        if (isCheckTarget("txtSYOYTIJKISYK", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "支給予定日";
            PkgBasicParts.focus("txtSYOYTIJKISYK");
            return res;
          }
          res = checkNengappi(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "支給予定日";
            PkgBasicParts.focus("txtSYOYTIJKISYK");
            return res;
          }
        }
        // 納入先住所コード txtNONYU_ADR_CD
        data = form.txtNONYU_ADR_CD;
        if (isCheckTarget("txtNONYU_ADR_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "納入先住所コード";
            PkgBasicParts.focus("txtNONYU_ADR_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "納入先住所コード";
            PkgBasicParts.focus("txtNONYU_ADR_CD");
            return res;
          }
        }
        
        // 備考 txtBKO
        data = form.txtBKO;
        if (isCheckTarget("txtBKO", data)) {
          if (data !== null && data.length > 0) {
            res = checkZenkaku(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "備考";
              PkgBasicParts.focus("txtBKO");
              return res;
            }
          }
        }
        // 購入情報
        if (form.chkKOUNYUJYOHOU_FLG.includes("1")) {
          // 要求番号 pdlYOUBAN
          let pdlYokyuBango= document.getElementById("pdlYOUBAN") as HTMLInputElement;
          data = GetTitlePullDown(pdlYokyuBango.value, listPdlYOUBAN) as string;
          if (isCheckTarget("pdlYOUBAN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求番号";
              PkgBasicParts.focus("pdlYOUBAN");
              return res;
            }
          }
          // 要求者 txtYKM
          data = form.txtYKM;
          if (isCheckTarget("txtYKM", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者";
              PkgBasicParts.focus("txtYKM");
              return res;
            }
            res = checkZenkaku(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者";
              PkgBasicParts.focus("txtYKM");
              return res;
            }
          }
          // 要求者TEL txtYKSTEL
          data = form.txtYKSTEL;
          if (isCheckTarget("txtYKSTEL", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者TEL";
              PkgBasicParts.focus("txtYKSTEL");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者TEL";
              PkgBasicParts.focus("txtYKSTEL");
              return res;
            }
          }
          // PAS txtPAS
          data = form.txtPAS;
          if (isCheckTarget("txtPAS", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisu(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "PAS";
                PkgBasicParts.focus("txtPAS");
                return res;
              }
            }
          }
          // 指定１ txtSTJ001
          let sitei = false;
          data = form.txtSTJ001;
          if (isCheckTarget("txtSTJ001", data)) {
            if (data !== null && data !== "") {
              sitei = true;
              res = checkHankakuEisuKanaKigou2(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "指定１";
                PkgBasicParts.focus("txtSTJ001");
                return res;
              }
            }
          }
          // 指定２ txtSTJ002
          data = form.txtSTJ002;
          if (isCheckTarget("txtSTJ002", data)) {
            if (data !== null && data !== "") {
              sitei = true;
              res = checkHankakuEisuKanaKigou2(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "指定２";
                PkgBasicParts.focus("txtSTJ002");
                return res;
              }
            }
          }
          // 指定３ txtSTJ003
          data = form.txtSTJ003;
          if (isCheckTarget("txtSTJ003", data)) {
            if (data !== null && data !== "") {
              sitei = true;
              res = checkHankakuEisuKanaKigou2(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "指定３";
                PkgBasicParts.focus("txtSTJ003");
                return res;
              }
            }
          }
          // 通知が有なら指定１～３のどれかに入力が必要
          if (isCheckTarget("txtSTJ001", form.txtSTIJIKUMU)) {
            if (form.txtSTIJIKUMU !== null && form.txtSTIJIKUMU === "あり") {
              if (sitei !== true) {
                messageParm = [];
                messageParm[0] = "指定事項";
                PkgBasicParts.focus("txtSTIJIKUMU");
                return "NNCW5076";
              }
            }
          }
        }
        // 単価 txtGentyoTAN
        if (gnbcthflg === "1") {
          data = form.txtGentyoTAN;
          if (isCheckTarget("txtGentyoTAN", data)) {
            if (Number(data) < 0) {
              messageParm = [];
              messageParm[0] = "単価(現場調達品)";
              PkgBasicParts.focus("txtGentyoTAN");
              return "NNCW0117";
            }
            res = checkNumber(data, 2) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "単価(現場調達品)";
               PkgBasicParts.focus("txtGentyoTAN");
               return res;
            }
          }
        }
        return res;

      } else if (syoriKBN === "2") {
        // 修正の場合
        let res = "";
        let data;

        // 要求プラント保管場所コード（要求組織物管者コード） txtYPLHKAD_CD
        data = form.txtYPLHKAD_CD;
        if (isCheckTarget("btnYPLHKAD_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "要求プラント保管場所コード（要求組織物管者コード）";
            PkgBasicParts.focus("txtYPLHKAD_CD");
            return res;
          }
        }
        
        // 受取プラント保管場所コード（受取組織物管者コード） txtUTRHKAD_CD
        data = form.txtUTRHKAD_CD;
        if (isCheckTarget("btnUTRHKAD_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "受取プラント保管場所コード（受取組織物管者コード）";
            PkgBasicParts.focus("txtUTRHKAD_CD");
            return res;
          }
        }
        
        // ビルコード txtBIL_CD
        data = form.txtBIL_CD;
        if (isCheckTarget("txtBIL_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "ビルコード";
            PkgBasicParts.focus("txtBIL_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "ビルコード";
            PkgBasicParts.focus("txtBIL_CD");
            return res;
          }
        }
        // 架名 装置名 フラグより有効項目を判定する
        let kaSoutiFlg = getKaSouti_option();
        if (kaSoutiFlg === "0") {
          // ユニットコード txtUNTHAIBAN
          data = form.txtUNTHAIBAN;
          if (isCheckTarget("txtUNTHAIBAN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ユニットコード";
              PkgBasicParts.focus("txtUNTHAIBAN");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ユニットコード";
              PkgBasicParts.focus("txtUNTHAIBAN");
              return res;
            }
          }
          // 架名 txtKMI
          data = form.txtKMI;
          if (isCheckTarget("txtKMI", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisuKanaKigou(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "架名";
                PkgBasicParts.focus("txtKMI");
                return res;
              }
            }
          }
          // 架番号 txtKAB
          data = form.txtKAB;
          if (isCheckTarget("txtKAB", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisu(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "架番号";
                PkgBasicParts.focus("txtKAB");
                return res;
              }
            }
          }
        } else if (kaSoutiFlg === "1") {
          // 配置番号(フロア) txtHaichi_FRA
          data = form.txtHaichi_FRA;
          if (isCheckTarget("txtHaichi_FRA", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(フロア) ";
              PkgBasicParts.focus("txtHaichi_FRA");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(フロア) ";
              PkgBasicParts.focus("txtHaichi_FRA");
              return res;
            }
          }
          // 配置番号(群) txtHaichi_GUN
          data = form.txtHaichi_GUN;
          if (isCheckTarget("txtHaichi_GUN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(群) ";
              PkgBasicParts.focus("txtHaichi_GUN");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(群)";
              PkgBasicParts.focus("txtHaichi_GUN");
              return res;
            }
            if (!("A" <= data && data <= "Z")) {
              messageParm = [];
              messageParm[0] = "A～Z \n配置番号(群)";
              PkgBasicParts.focus("txtHaichi_GUN");
              return "NNCW0056";
            }
          }
          // 配置番号(通番) txtHaichi_TBN
          data = form.txtHaichi_TBN;
          if (isCheckTarget("txtHaichi_TBN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(通番) ";
              PkgBasicParts.focus("txtHaichi_TBN");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "配置番号(通番) ";
              PkgBasicParts.focus("txtHaichi_TBN");
              return res;
            }
          }
          // 装置名 txtKMISTM
          data = form.txtKMISTM;
          if (isCheckTarget("txtKMISTM", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisuKanaKigou(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "装置名 ";
                PkgBasicParts.focus("txtKMISTM");
                return res;
              }
            }
          }
          // 装置番号 txtSUIBAN
          data = form.txtSUIBAN;
          if (isCheckTarget("txtSUIBAN", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisu(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "装置番号 ";
                PkgBasicParts.focus("txtSUIBAN");
                return res;
              }
            }
          }
        }
        // 品目コード txtHINMOKU_CD
        data = form.txtHINMOKU_CD;
        if (isCheckTarget("txtHINMOKU_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "品目コード ";
            PkgBasicParts.focus("txtHINMOKU_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "品目コード ";
            PkgBasicParts.focus("txtHINMOKU_CD");
            return res;
          }
        }
        // 数量(変更) txtHEN_SUU
        data = form.txtHEN_SUU;
        if (isCheckTarget("txtHEN_SUU", data)) {
          res = checkNumber(data, 4) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "数量(変更) ";
            PkgBasicParts.focus("txtHEN_SUU");
            return res;
          }
          if (Number(data) < 0) {
            messageParm = [];
            messageParm[0] = "数量(変更) ";
            PkgBasicParts.focus("txtHEN_SUU");
            return "NNCW0117";
          }
          res = checkByte(data, 4) as string;
          if (res.length > 0) {
            messageParm = ["数量(変更)", "4"];
            PkgBasicParts.focus("txtHEN_SUU");
            return res;
          }
        }
        // 減数量 txtGENSUU
        data = form.txtGENSUU;
        if (isCheckTarget("txtGENSUU", data)) {
          res = checkNumber(data, 4) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "減数量 ";
            PkgBasicParts.focus("txtGENSUU");
            return res;
          }
          if (Number(data) < 0) {
            messageParm = [];
            messageParm[0] = "減数量 ";
            PkgBasicParts.focus("txtGENSUU");
            return "NNCW0117";
          }
          res = checkByte(data, 4) as string;
          if (res.length > 0) {
            messageParm = ["減数量", "4"];
            PkgBasicParts.focus("txtGENSUU");
            return res;
          }
        }
        // ab長 txtAB_LEN
        data = form.txtAB_LEN;
        if (isCheckTarget("txtAB_LEN", data)) {
          if (abTakhji === "1") {
            if (Number(data) < 0) {
              messageParm = [];
              messageParm[0] = "ab長";
              PkgBasicParts.focus("txtAB_LEN");
              return "NNCW0117";
            }
            res = checkHissuSuryo(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ab長";
              PkgBasicParts.focus("txtAB_LEN");
              return res;
            }
            res = checkNumber(data, 4) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "ab長";
              PkgBasicParts.focus("txtAB_LEN");
              return res;
            }
            res = checkByte(data, 5) as string;
            if (res.length > 0) {
              messageParm = ["ab長", "5"];
              PkgBasicParts.focus("txtAB_LEN");
              return res;
            }
          }
        }
        // 仕入先コード txtSIR_CD
        data = form.txtSIR_CD;
        if (isCheckTarget("txtSIR_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "仕入先コード";
            PkgBasicParts.focus("txtSIR_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "仕入先コード";
            PkgBasicParts.focus("txtSIR_CD");
            return res;
          }
        }
        // 支給予定時期 txtSYOYTIJKISYK
        data = form.txtSYOYTIJKISYK;
        if (isCheckTarget("txtSYOYTIJKISYK", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "支給予定日";
            PkgBasicParts.focus("txtSYOYTIJKISYK");
            return res;
          }
          res = checkNengappi(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "支給予定日";
            PkgBasicParts.focus("txtSYOYTIJKISYK");
            return res;
          }
        }
        // 納入先住所コード txtNONYU_ADR_CD
        data = form.txtNONYU_ADR_CD;
        if (isCheckTarget("txtNONYU_ADR_CD", data)) {
          res = checkHissu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "納入先住所コード";
            PkgBasicParts.focus("txtNONYU_ADR_CD");
            return res;
          }
          res = checkHankakuEisu(data) as string;
          if (res.length > 0) {
            messageParm = [];
            messageParm[0] = "納入先住所コード";
            PkgBasicParts.focus("txtNONYU_ADR_CD");
            return res;
          }
        }
        
        // 備考 txtBKO
        data = form.txtBKO;
        if (isCheckTarget("txtBKO", data)) {
          if (data !== null && data.length > 0) {
            res = checkZenkaku(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "備考";
              PkgBasicParts.focus("txtBKO");
              return res;
            }
          }
        }
        // 購入情報
        if (form.chkKOUNYUJYOHOU_FLG.includes("1")) {
          // 要求番号 pdlYOUBAN
          let pdlYokyuBango= document.getElementById("pdlYOUBAN") as HTMLInputElement;
          data = GetTitlePullDown(pdlYokyuBango.value, listPdlYOUBAN) as string;
          if (isCheckTarget("pdlYOUBAN", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求番号";
              return res;
            }
          }
          // 要求者 txtYKM
          data = form.txtYKM;
          if (isCheckTarget("txtYKM", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者";
              PkgBasicParts.focus("txtYKM");
              return res;
            }
            res = checkZenkaku(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者";
              PkgBasicParts.focus("txtYKM");
              return res;
            }
          }
          // 要求者TEL txtYKSTEL
          data = form.txtYKSTEL;
          if (isCheckTarget("txtYKSTEL", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者TEL";
              PkgBasicParts.focus("txtYKSTEL");
              return res;
            }
            res = checkHankakuEisu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求者TEL";
              PkgBasicParts.focus("txtYKSTEL");
              return res;
            }
          }
          // PAS txtPAS
          data = form.txtPAS;
          if (isCheckTarget("txtPAS", data)) {
            if (data !== null && data.length > 0) {
              res = checkHankakuEisu(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "PAS";
                PkgBasicParts.focus("txtPAS");
                return res;
              }
            }
          }
          // 指定１ txtSTJ001
          let sitei = false;
          data = form.txtSTJ001;
          if (isCheckTarget("txtSTJ001", data)) {
            if (data !== null && data !== "") {
              sitei = true;
              res = checkHankakuEisuKanaKigou2(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "指定１";
                PkgBasicParts.focus("txtSTJ001");
                return res;
              }
            }
          }
          // 指定２ txtSTJ002
          data = form.txtSTJ002;
          if (isCheckTarget("txtSTJ002", data)) {
            if (data !== null && data !== "") {
              sitei = true;
              res = checkHankakuEisuKanaKigou2(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "指定２";
                PkgBasicParts.focus("txtSTJ002");
                return res;
              }
            }
          }
          // 指定３ txtSTJ003
          data = form.txtSTJ003;
          if (isCheckTarget("txtSTJ003", data)) {
            if (data !== null && data !== "") {
              sitei = true;
              res = checkHankakuEisuKanaKigou2(data) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "指定３";
                PkgBasicParts.focus("txtSTJ003");
                return res;
              }
            }
          }
          // 通知が有なら指定１～３のどれかに入力が必要
          if (isCheckTarget("txtSTJ001", form.txtSTIJIKUMU)) {
            if (form.txtSTIJIKUMU !== null && form.txtSTIJIKUMU === "あり") {
              if (sitei !== true) {
                messageParm = [];
                messageParm[0] = "指定事項";
                PkgBasicParts.focus("txtSTIJIKUMU");
                return "NNCW5076";
              }
            }
          }
        }
        // 単価 txtGentyoTAN
        if (gnbcthflg === "1") {
          data = form.txtGentyoTAN;
          if (isCheckTarget("txtGentyoTAN", data)) {
            if (Number(data) < 0) {
              messageParm = [];
              messageParm[0] = "単価(現場調達品)";
              PkgBasicParts.focus("txtGentyoTAN");
              return "NNCW0117";
            }
            res = checkNumber(data, 2) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "単価(現場調達品)";
              PkgBasicParts.focus("txtGentyoTAN");
              return res;
            }
          }
        }
        // 単価 txtTAK
        data = form.txtTAK;
        if (isCheckTarget("txtTAK", data)) {
          if (data !== null || data > 0) {
            if (Number(data) < 0) {
              messageParm = [];
              messageParm[0] = "単価(転用所掌替)";
              PkgBasicParts.focus("txtTAK");
              return "NNCW0117";
            }
            res = checkNumber(data, 2) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "単価(転用所掌替)";
              PkgBasicParts.focus("txtTAK");
              return res;
            }
          }
        }
        return res;
      } else if (syoriKBN === "3") {
        let res = "";
        let data;

        if (buppinList.length < 2) {
          // 要求種別変更
          // 要求種別 pdlYOUCLS_C
          data = form.pdlYOUCLS_CD;
          if (isCheckTarget("pdlYOUCLS_CD", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求種別";
              return res;
            }
          }
          // 単価 txtTAK
          data = form.txtTAK;
          if (isCheckTarget("txtTAK", data)) {
            if (data !== null || data > 0) {
              if (Number(data) < 0) {
                messageParm = [];
                messageParm[0] = "単価(転用所掌替)";
                PkgBasicParts.focus("txtTAK");
                return "NNCW0117";
              }
              res = checkNumber(data, 2) as string;
              if (res.length > 0) {
                messageParm = [];
                messageParm[0] = "単価(転用所掌替)";
                PkgBasicParts.focus("txtTAK");
                return res;
              }
            }
          }
          // 数量(変更) txtHEN_SUU
          data = form.txtHEN_SUU;
          if (isCheckTarget("txtHEN_SUU", data)) {
            res = checkNumber(data, 4) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "数量(変更)";
              PkgBasicParts.focus("txtHEN_SUU");
              return res;
            }
            if (Number(data) < 0) {
              messageParm = [];
              messageParm[0] = "数量(変更)";
              PkgBasicParts.focus("txtHEN_SUU");
              return "NNCW0117";
            }
            res = checkByte(data, 4) as string;
            if (res.length > 0) {
              messageParm = ["数量(変更)", "4"];
              PkgBasicParts.focus("txtHEN_SUU");
              return res;
            }
          }
        } else {
          // 要求種別変更（一括）
          // 要求種別 pdlYOUCLS_CD
          data = form.pdlYOUCLS_CD;
          if (isCheckTarget("pdlYOUCLS_CD", data)) {
            res = checkHissu(data) as string;
            if (res.length > 0) {
              messageParm = [];
              messageParm[0] = "要求種別";
              return res;
            }
          }
        }
        return res;
      }
      return "";
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力チェック対象外判断
   * @[詳細] 入力チェック対象外判断
   * @[備考] なし
   * @param  obj 対象オブジェクト
   * @param  val 対象文字列
   * @returns なし
   */
  const isCheckTarget = (obj: string, val: string) => {
    try {
      // 入力対象でなければチェックしない
      let newObj = document.getElementById(obj) as HTMLInputElement;
      if (newObj.disabled === true) {
        return false;
      }

      let tmp = val;
      if (tmp === null || tmp.length <= 0) {
        return true;
      } else if (isKome(tmp)) {
        PkgLog.log("アスタなのでチェックしません>>" + obj + ":" +  tmp + "\n");
        return false;
      }
      return true;
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] Nullチェック(数量1以上)
   * @[詳細] Nullチェック(数量1以上)
   * @[備考] なし
   * @param  val 対象文字列
   * @returns なし
   */
  const checkHissuSuryo = (val: string) => {
    try {
      let data: number = Number(val);
      if (data === null || data <= 0) {
        return "NNCW0115";
      } else {
        return "";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] Nullチェック
   * @[詳細] Nullチェック
   * @[備考] なし
   * @param  obj 対象オブジェクト
   * @param  val 対象文字列
   * @returns 文字列
   */
  const checkHissu = (val: string) => {
    try {
      let data = val;
      if (!PkgCheck.chkInput(data)) {
        return "NNCW0115";
      } else {
        return "";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] (日付書式)年月日チェック
   * @[詳細] (日付書式)年月日チェック
   * @[備考] なし
   * @param  YYYY_MM_DDvalue 対象文字列
   * @returns 文字列
   */
  const checkNengappi = (YYYY_MM_DDvalue: string) => {
    try {
      let tmp = YYYY_MM_DDvalue;
      if (!PkgCheck.chkDate(PkgComGlobal.DATE_TYPE13, tmp)) {
        return "NNCW0118";
      } else {
        return "";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力データチェック(半角英数字)
   * @[詳細] 入力データチェック(半角英数字)
   * @[備考] なし
   * @param  hanEisuuValue 対象文字列
   * @returns 文字列
   */
  const checkHankakuEisu = (hanEisuuValue: string) => {
    try {
      let tmp = hanEisuuValue;
      if (!PkgCheck.chkMarkHalf(tmp)) {
        return "NNCW0117";
      } else {
        return "";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力データチェック(半角英数字ｶﾅ記号)
   * @[詳細] 入力データチェック(半角英数字ｶﾅ記号)
   * @[備考] なし
   * @param  strCheckVal 対象文字列
   * @returns 文字列
   */
  const checkHankakuEisuKanaKigou2 = (strCheckVal: string) => {
    try {
      let ChkTmp = strCheckVal;
      if (!PkgCheck.chkMarkHalfKana(ChkTmp)) {
        return "NNCW0117";
      }
      if (PkgCheck.chkComma(ChkTmp)) {
        return "NNCW0117";
      }
      return "";
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力データチェック(半角英数字ｶﾅ記号)
   * @[詳細] 入力データチェック(半角英数字ｶﾅ記号)
   * @[備考] なし
   * @param  strCheckVal 対象文字列
   * @returns 文字列
   */
  const checkHankakuEisuKanaKigou = (strCheckVal: string) => {
    try {
      let ChkTmp = strCheckVal;
      if (!PkgCheck.chkMarkHalfKana(ChkTmp)) {
        return "NNCW0117";
      } else {
        return "";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力データチェック(全角)
   * @[詳細] 入力データチェック(全角)
   * @[備考] なし
   * @param  value 対象文字列
   * @returns 文字列
   */
  const checkZenkaku = (value: string) => {
    try {
      let tmp = value;
      if (!PkgCheck.chkAllJpn(tmp)) {
        return "NNCW0113";
      } else {
        return "";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力データチェック(小数)
   * @[詳細] 入力データチェック(小数)
   * @[備考] なし
   * @param  value 対象文字列
   * @param  numberFmt 数値フォーマット
   * @returns 文字列
   */
  const checkNumber = (value: string, numberFmt: number) => {
    try {
      let tmp = value;
      if (tmp.indexOf(".") >= 1) {
        if (!PkgCheck.chkNum(numberFmt, tmp)) {
          return "NNCW0124";
        } else {
          return "";
        }
      } else {
        if (!PkgCheck.chkNumber(tmp)) {
          return "NNCW0111";
        } else {
          return "";
        }
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

    /**
   * @[概要] バイト数チェック(整数部)
   * @[詳細] バイト数チェック(整数部)
   * @[備考] なし
   * @param  value 対象文字列
   * @param  numberByte 整数部桁数
   * @returns 文字列
   */
  const checkByte = (value: string, numberByte: number) => {
    try {
      let tmp = value;
      if (tmp.indexOf(".") >= 1) {
        tmp = tmp.split(".")[0];
      }

      if (!PkgCheck.chkByte(tmp, numberByte)) {
        return "NNCW0073";
      } else {
        return "";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 要求種別リスト取得
   * @[詳細] 要求種別リスト取得
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const findYokyuSyubetu = async () => {
    try {
      PkgLog.log("***** 要求種別リスト取得 *****\n");

      // 上り電文を設定する
      let aryNobori = {
        SKS_CD: lblSKS_CD,  // 施工組織コード
        SKJBAN: txtSKJBAN,  // 総合工事番号
        WBS_CD: txtWBS_CD,  // WBSコード
        PRCKBN: syoriKBN    // 処理区分
      };

      type kudari = {
        LIST_YOUCLS: string[][];
      };

      // サーバ処理実行
      let rcdKudari = await PkgHttp.callGateway<kudari>(SEQID_YOKYUSYUBETU_FIND_LIST, aryNobori);

      // サーバ処理後
      if (rcdKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
        // システムエラーの場合、全コントロールをロック
        PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
        // 戻るボタンにフォーカスをセット
        PkgBasicParts.focus("btnBack");
        // エラーフラグを設定
        systemErrorFlg = true;
        return;
      } else if (rcdKudari.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
        // 業務エラーの場合、エラーメッセージを表示
        PkgMessage.putMessageBox(rcdKudari.MESSAGE_ID, rcdKudari.MSG_PARAM);
      } else if (rcdKudari.RESULT === PkgHttp.Result.SUCCESS) {
        // 正常の場合、下り電文を要求種別プルダウンにセット
        let pdlYOUCLS_CD: string[][] = rcdKudari.BUSINESS_DATA.LIST_YOUCLS;;
        // 要求種別プルダウンに値を設定
        setlistPdlYOUCLS_CD(pdlYOUCLS_CD);
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 要求番号リスト取得
   * @[詳細] 要求番号リスト取得
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const findYokyuBango = async () => {
    try {
      PkgLog.log("***** 要求番号リスト取得 *****\n");

      // 上り電文を設定する
      let aryNobori = {
        SKS_CD: lblSKS_CD ? lblSKS_CD : form.lblSKS_CD,  // 施工組織コード
        SKJBAN: txtSKJBAN ? txtSKJBAN : form.txtSKJBAN,  // 総合工事番号
        WBS_CD: txtWBS_CD ? txtWBS_CD : form.txtWBS_CD,  // WBSコード
        YOUPCD: txtYPLHKAD_CD,    // 要求プラント保管場所コード（要求組織物管者コード）
      };

      type kudari = {
        LIST_YOUBAN: string[][]
      };

      // サーバ処理実行
      let rcdKudari = await PkgHttp.callGateway<kudari>(SEQID_YOKYUBANGO_FIND_LIST, aryNobori);

      // サーバ処理後
      if (rcdKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
        // システムエラーの場合、全コントロールをロック
        PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
        // 戻るボタンにフォーカスをセット
        PkgBasicParts.focus("btnBack");
        // エラーフラグを設定
        systemErrorFlg = true;
        return;
      } else if (rcdKudari.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
        // 業務エラーの場合、エラーメッセージを表示
        PkgMessage.putMessageBox(rcdKudari.MESSAGE_ID, rcdKudari.MSG_PARAM);
      } else if (rcdKudari.RESULT === PkgHttp.Result.SUCCESS) {
        // 正常の場合、下り電文を要求番号プルダウンにセット
        let resultList: string[][] = rcdKudari.BUSINESS_DATA.LIST_YOUBAN;
        let pdlYOUBAN: string[][] = resultList;
        // 要求番号プルダウンに値を設定
        setlistPdlYOUBAN(pdlYOUBAN);
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] Null空文字変換
   * @[詳細] 引数に渡された文字列がNullだった場合、空文字に変換する
   * @[備考] なし
   * @param  setVal 処理対象文字列
   * @returns setVal 処理結果
   */
  const null2blank = (setVal: string) => {
    try {
      if (setVal === null || setVal === undefined || setVal === "undefined") {
        setVal = "";
      }
      return setVal;
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] アスタリスク判別
   * @[詳細] アスタリスクかどうか判断する
   * @[備考] なし
   * @param  val 対象文字列
   * @returns アスタリスクがある場合true、ない場合false
   */
  const isKome = (val: string) => {
    try {
      if (val === "") {
        return false;
      }
      if (val.indexOf("*") >= 0) {
        return true;
      }
      return false;
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 架名装置名フラグの設定
   * @[詳細] 架名装置名フラグの設定
   * @[備考] なし
   * @param  setVal 処理対象文字列
   * @returns なし
   */
  const setKaSouti_option = async (setVal: string) => {
    try {
      if (isKome(setVal)) {
        return;
      }
      if (setVal === "1") {
        // 装置情報入力ラジオボタンを選択
        setForm((f) => ({
          ...f,
          optKaSoutiInfo: "2"
        }));
        PkgBasicParts.setDisabled("btnUNTHAIBAN", true);
        PkgBasicParts.setDisabled("btnKMI", true);
        return ;
      }
      if (setVal === "0") {
        // 架情報入力ラジオボタンを選択
        setForm((f) => ({
          ...f,
          optKaSoutiInfo: "1"
        }));
        PkgBasicParts.setDisabled("btnHaichi", true);
        PkgBasicParts.setDisabled("btnSTMCLS", true);
        PkgBasicParts.setDisabled("btnKMISTM", true);
        return ;
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 選択されたプルダウンのタイトル（ItemのTitle）
   * @[詳細] 選択されたプルダウンのタイトル（ItemのTitle）
   * @[備考] なし
   * @param  value 対象値
   * @param  obj 対象プルダウンのオブジェクト
   * @returns なし
   */
  const GetTitlePullDown = (value: string, obj: string[][]) => {
    try {
      for (let i = 0; i < obj.length; i++) {
        if (obj[i][0] === value) {
          return obj[i][1];
        }
      }
      return "";
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] フロアの０パディング
   * @[詳細] フロアの０パディングを行う
   * @[備考] なし
   * @param  value 処理対象文字列
   * @returns なし
   */
  const zeroPaddingForFRA = (value: string) => {
    try {
      if (value.length > 0) {
        let val = "0000" + value;
        setForm((f) => ({
          ...f,
          txtHaichi_FRA: val.slice(-4)
        }));
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] ０パディング
   * @[詳細] ０パディングを行う
   * @[備考] なし
   * @param  obj 処理対象項目名
   * @param  value 処理対象文字列
   * @param  lng 数値
   * @returns なし
   */
  const zeroPadding = (obj: string, value: string, lng: number) => {
    try {
      let val = "";
      if (value.length > 0) {
        for (var i = 0; i < lng; i++) {
          val = val + "0";
        }
        val = val + value;
      }
      setForm((f) => ({
        ...f,
        [obj]: val.slice(-4)
      }));
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] プルダウンリスト設定
   * @[詳細] プルダウンリストの内容を設定します。
   * @[備考] なし
   * @param  kbn 処理区分
   * @param  flg フラグ(物流要再送信フラグ or EDI要再送信フラグ
   * @returns pulldownList リスト
   */
  const createPullDown = (kbn: string, flg: string) => {
    try {
      let pulldownList: string[][] = [];
      if (kbn === "4" && flg === "1") {
        pulldownList = [
          ["要再送", "1"],
          ["確認済", "2"]
        ];
      } else if (isKome(flg)) {
        pulldownList = [
          ["***", "*"],
          ["－", "0"],
          ["要再送", "1"],
          ["確認済", "2"]
        ];
        // 初期表示設定時のためflgの文字列を「********************」 → 「*」へ詰め替え
        flg = "*";
      } else {
        pulldownList = [
          ["－", "0"],
          ["要再送", "1"],
          ["確認済", "2"]
        ];
      }
      return pulldownList;
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 入力項目の活性制御
   * @[詳細] サーバから指定される、入力項目の活性非活性を処理
   * @[備考] なし
   * @param  resultColumnList 処理対象リスト
   * @returns なし
   */
  const setColumnKasseiHikassei = async (resultColumnList: Array<[string, boolean]>) => {
    try {
      let tmp = resultColumnList;
      if (tmp === null || tmp.length === 0) return;

      let hikisu: Array<[string, boolean]> = resultColumnList;

      for (let n = 0 ; n < hikisu.length; n++) {
        let col: string = hikisu[n][0];
        let active: string = String(hikisu[n][1]);
        PkgLog.log(col + ":" + active + "\n");

        if (active === "0") {
          PkgBasicParts.setDisabled(col, true);

          if (col === "kajyohoKasseiHikassei") {
            // 架情報活性非活性用の場合
            await changeInputModeKajyoho(false);
          } else if (col === "soutiKasseiHikassei") {
            // 装置情報活性非活性用の場合
            await changeInputModeSouti(false);
          } else if (col === "tenyoKasseiHikassei") {
            // 転用活性非活性用の場合
            await changeInputMode(false);
          } else if (col === "kounyujyohoKasseiHikassei") {
            // 購入情報活性非活性用の場合
            await changeInputModeKounyu(false);
          }

          // チェックボックスやラジオボタンの非活性化
          if (col === "chkKOUNYUJYOHOU_FLG") {
            PkgBasicParts.setDisabled("chkKOUNYUJYOHOU_FLG_1", true);
          } else if (col === "optKaInfo" || col === "optSoutiInfo") {
            PkgBasicParts.setDisabled("optKaInfo_1", true);
            PkgBasicParts.setDisabled("optSoutiInfo_2", true);
          }
        }
      }
      return ;
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 単価セット
   * @[詳細] 単価セット
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const takSet = async () => {
    try {
      let youcls_cd = ykSyubetu;
      if (youcls_cd === "1" || youcls_cd === "3") {
        // 転用・所掌替単価にセット
        setForm((f) => ({
          ...f,
          txtTAK: String(koTAK),       // 単価
          txtTAK_asuta: String(koTAK), // 単価(アスタリスク）
        }));
        if (isKome(String(koTAK))) {
          PkgBasicParts.setDisplay("txtTAK", false);
          PkgBasicParts.setDisplay("txtTAK_asuta", true);
        } else {
          PkgBasicParts.setDisplay("txtTAK", true);
          PkgBasicParts.setDisplay("txtTAK_asuta", false);
        }
        // 合価セット
        await calcGoka();
      } else if (gnbcthflg === "1") {
        // 現場調達品
        setForm((f) => ({
          ...f,
          txtGentyoTAN: String(koTAK),      // 単価（現場調達品）
          txtGentyoTAN_asuta: String(koTAK) // 単価（現場調達品）(アスタリスク）
        }));
        if (isKome(String(koTAK))) {
          PkgBasicParts.setDisplay("txtGentyoTAN", false);
          PkgBasicParts.setDisplay("txtGentyoTAN_asuta", true);
        } else {
          PkgBasicParts.setDisplay("txtGentyoTAN", true);
          PkgBasicParts.setDisplay("txtGentyoTAN_asuta", false);
        }
      }
      PkgLog.log([">>>>個単価>>", koTAK, "\n"]);
      PkgLog.log([">>>>メートル単価>>", mTak, "\n"]);
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 追加時の連続登録用初期処理
   * @[詳細] 追加時の連続登録用初期処理
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const tuikaInit = async () => {
    try {
      PkgLog.log("***** 追加時の連続登録用初期処理  *****\n");

      setForm((f) => ({
        ...f,
        txtHINMOKU_CD: "",   // 品目コード
        txtKNA: "",          // カナ品名
        txtTAN: "",          // 単位
        txtSUU: "0",         // 数量
        txtAB_LEN: "0",      // ab長
        txtSIR_CD: "",       // 仕入先コード
        txtGentyoTAN: "",    // 単価（現場調達品）
        txtSYOYTIJKISYK: ""  // 支給予定時期
      }));
      hoji_kameisoutiFlg = "0";
      modifySoapColumn = "0";
      editFlg = false;
      PkgBasicParts.focus("txtHINMOKU_CD");
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] (内部処理系)ビルコード定数取得
   * @[詳細] (内部処理系)ビルコード定数取得
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const billJyosusyutoku = async () => {
    try {
      PkgLog.log("***** (内部処理系)ビルコード定数取得 *****\n");

      // 上り電文を設定する
      let aryNobori = {
        BIL_CD: form.txtBIL_CD  // ビルコード
      };

      type kudari = {
        SKS_CD: string,
        BIL_CD: string,
        BIL_NM: string,
        RKSBMI: string,
        UPD: string,
        FUKA_FLG: string,
        MNGSKH_CD: string
      };

    // サーバ処理実行
    let rcdKudari = await PkgHttp.callGateway<kudari>(SEQID_BILLCODE_FIND, aryNobori);

    // サーバ処理後の処理
    if (rcdKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
      // システムエラーの場合
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
      // 戻るボタンにフォーカスをセット
      PkgBasicParts.focus("btnBack");
      return;
    } else if (rcdKudari.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
      // 業務エラーの場合、何もしない
    } else if (rcdKudari.RESULT === PkgHttp.Result.SUCCESS) {
      // 正常終了の場合
      setForm((f) => ({
        ...f,
        txtBIL_NM: null2blank(rcdKudari.BUSINESS_DATA.RKSBMI) as string  // 略称ビル名
      }));
    }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 物品定数取得
   * @[詳細] 引数に渡された文字列がNullだった場合、空文字に変換する
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const buppinJyosusyutoku = async () => {
    try {
      PkgLog.log("***** (内部処理系)物品定数取得 *****\n");

      // 上り電文を設定する
      let aryNobori = {
        HINMOKU_CD: txtHINMOKU_CD  // 品目コード
      };

      type kudari = {
        SINPIN_TANKA: number,
        SINPIN_DAM_TANKA: number,
        SEIRI_TANKA: number,
        SEIRI_DAM_TANKA: number ,
        AB_TAKHJI: string,
        GNBCTHFLG: string,
        STIJIKUMU: string,
        UPD_CNT: number,
        TYOTATU_KIKAN: number,
        HTIUTWKHF: string,
        HINMOKU_CD: string,
        BUTU_KANA_NM: string,
        BUTU_TANI: string,
        SYM_CDUMU: string,
        NSCS_KBN: string
      };

      // サーバ処理実行
      let rcdKudari = await PkgHttp.callGateway<kudari>(SEQID_BUPPINJYOSU_FIND, aryNobori);

      // サーバ処理後
      if (rcdKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
        // システムエラーの場合、全コントロールをロック
        PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
        // 戻るボタンにフォーカスをセット
        PkgBasicParts.focus("btnBack");
        return;
      } else if (rcdKudari.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
        // 業務エラーの場合、何もしない
      } else if (rcdKudari.RESULT === PkgHttp.Result.SUCCESS) {
        // 正常の場合、下り電文を設定
        sinpinTanka = null2blank(String(rcdKudari.BUSINESS_DATA.SINPIN_TANKA)) as string;                    // 新品単価
        sinpinDamTanka = null2blank(String(rcdKudari.BUSINESS_DATA.SINPIN_DAM_TANKA)) as string;             // 新品ダム単価
        seiriTanka = null2blank(String(rcdKudari.BUSINESS_DATA.SEIRI_TANKA)) as string;                      // 整理品単価
        seiriDamTanka = null2blank(String(rcdKudari.BUSINESS_DATA.SEIRI_DAM_TANKA)) as string;               // 整理品ダム単価
        abTakhji = null2blank(rcdKudari.BUSINESS_DATA.AB_TAKHJI) as string;                                  // ab単価表示
        gnbcthflg = null2blank(rcdKudari.BUSINESS_DATA.GNBCTHFLG) as string;                                 // 現場調達品フラグ
        txtSTIJIKUMU = null2blank(rcdKudari.BUSINESS_DATA.STIJIKUMU) as string;                              // 指定事項有無
        let txtTYOTATU_KIKAN: string = null2blank(String(rcdKudari.BUSINESS_DATA.TYOTATU_KIKAN)) as string;  // 調達期間
        htiutwkhf = null2blank(rcdKudari.BUSINESS_DATA.HTIUTWKHF) as string;                                 // 本体内訳－構成品フラグ
        let txtKNA: string = null2blank(rcdKudari.BUSINESS_DATA.BUTU_KANA_NM) as string;                     // 物品カナ品名
        let txtTAN: string = null2blank(rcdKudari.BUSINESS_DATA.BUTU_TANI) as string;                        // 物品単位
        nscsKbn = null2blank(rcdKudari.BUSINESS_DATA.NSCS_KBN) as string;                                    // ＮＳ／ＣＳ区分

        setForm((f) => ({
          ...f,
          txtSTIJIKUMU: txtSTIJIKUMU,            // 指定事項有無
          txtTYOTATU_KIKAN: txtTYOTATU_KIKAN,    // 調達期間
          txtKNA: txtKNA,                        // 物品カナ品名
          txtTAN: txtTAN                         // 物品単位
        }));

        // 物品特定後の処理
        await setBuppinJyoho();
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
  * @[概要] (内部処理系)物品定数取得_ＮＳ／ＣＳ区分のみ
  * @[詳細] 物品定数取得しＮＳ／ＣＳ区分のみを内部保持データに格納する
  * @[備考] なし
  * @param  なし
  * @returns なし
  */
 const buppinJyosusyutoku_nscsKbn = async () => {
   try {
    PkgLog.log("***** (内部処理系)物品定数取得_ＮＳ／ＣＳ区分のみ *****\n");

    // 上り電文を設定する
    let aryNobori = {
      HINMOKU_CD: form.txtHINMOKU_CD  // 品目コード
    };

    type kudari = {
      SINPIN_TANKA: number,
      SINPIN_DAM_TANKA: number,
      SEIRI_TANKA: number,
      SEIRI_DAM_TANKA: number ,
      AB_TAKHJI: string,
      GNBCTHFLG: string,
      STIJIKUMU: string,
      UPD_CNT: number,
      TYOTATU_KIKAN: number,
      HTIUTWKHF: string,
      HINMOKU_CD: string,
      BUTU_KANA_NM: string,
      BUTU_TANI: string,
      SYM_CDUMU: string,
      NSCS_KBN: string
    };

    // サーバ処理実行
    let rcdKudari = await PkgHttp.callGateway<kudari>(SEQID_BUPPINJYOSU_FIND, aryNobori);

    // サーバ処理後の処理
    if (rcdKudari.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
      // システムエラーの場合
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
      // 戻るボタンにフォーカスをセット
      PkgBasicParts.focus("btnBack");
      return;
    } else if (rcdKudari.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
      // 業務エラーの場合、何もしない
    } else if (rcdKudari.RESULT === PkgHttp.Result.SUCCESS) {
      // 正常終了の場合
      nscsKbn = null2blank(rcdKudari.BUSINESS_DATA.NSCS_KBN) as string;  // ＮＳ／ＣＳ区分
    }
   } catch (e: unknown) {
     // 呼び出し元へスロー
     throw e;
   }
 };

  /**
   * @[概要] 物品データ絡みの処理
   * @[詳細] 物品データ絡みの処理
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const setBuppinJyoho = async () => {
    try {
      PkgLog.log("***** 物品データ絡みの処理 *****\n");

      // 指定事項有無の表示
      let stijikumuVal = txtSTIJIKUMU as string;
      if (stijikumuVal === null || stijikumuVal === "") {
        // 何もしない
      } else if (isKome(stijikumuVal)) {
        txtSTIJIKUMU = KOME_UME;
      } else if (stijikumuVal === "1") {
        txtSTIJIKUMU = "あり";
      } else {
        txtSTIJIKUMU = "なし";
      }

      // 合価クリア
      txtGOK = 0;

      // ab長
      let abLen = form.txtAB_LEN as string;
      if (abTakhji !== null && abTakhji === "1") {
        PkgLog.log("ab長物品です！！");
        PkgBasicParts.setDisabled("txtAB_LEN", false);
      } else {
        PkgBasicParts.setDisabled("txtAB_LEN", true);
        abLen = "0";
      }

      // 現場調達品判断
      if (gnbcthflg !== null && gnbcthflg === "1") {
        PkgLog.log("現場調達品です！！");
        PkgBasicParts.setDisabled("txtGentyoTAN", false);
        setForm((f) => ({
          ...f,
          txtGentyoTAN: sinpinTanka  // 現場調達品
        }));
        // 購入情報を非活性にする
        PkgBasicParts.setDisabled("chkKOUNYUJYOHOU_FLG_1", true);
        // 購入情報グループボックスを非活性化する
        await changeInputModeKounyu(false);
        setForm((f) => ({
          ...f,
          chkKOUNYUJYOHOU_FLG: ["-1"]  // 現場調達品
        }));
      } else {
        PkgBasicParts.setDisabled("txtGentyoTAN", true);
        setForm((f) => ({
          ...f,
          txtGentyoTAN: "0"  // 現場調達品
        }));

        if (syoriKBN === "2" && butsts === "01") {
          // 購入情報グループボックスを活性化する
          PkgBasicParts.setDisabled("txtPAS", false);     // ＰＡＳ
          PkgBasicParts.setDisabled("txtSTJ001", false);  // 指定１
          PkgBasicParts.setDisabled("txtSTJ002", false);  // 指定２
          PkgBasicParts.setDisabled("txtSTJ003", false);  // 指定３
        } else if (syoriKBN === "1") {
          // 購入情報を活性にする
          PkgBasicParts.setDisabled("chkKOUNYUJYOHOU_FLG_1", false);

          let check = (initFlg === "0") ? [checkFlg] : form.chkKOUNYUJYOHOU_FLG;
          if (check.includes("1")) {
            // 購入情報グループボックスを活性化する
            await changeInputModeKounyu(true);
          }
        }
      }
      PkgLog.log("\n");

      setForm((f) => ({
        ...f,
        txtSTIJIKUMU: txtSTIJIKUMU,             // 指定事項有無
        txtGOK: String(txtGOK),                 // 合価
        txtAB_LEN: abLen === "" ? "0" : abLen,  // ab長
      }));
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 合価計算
   * @[詳細] 合価計算
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const calcGoka = async () => {
    try {
      let tmpVal: number = abLenChangeFlg || optZsbFlgChangeFlg ? Number(txtGOK) : Number(form.txtGOK)
      if (tmpVal === null || tmpVal <= 0) {
        let tanka: number = Number(koTAK);
        let suryo: number = Number(txtSUU);
        tanka *= suryo;
        setForm((f) => ({
          ...f,
          txtGOK: String(tanka) // 合価
        }));
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 単価計算
   * @[詳細] 単価計算
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const calcTanka = async () => {
    try {
      let tmpVal: number = Number(form.txtTAK)
      if (tmpVal === null || tmpVal <= 0) {
        let goka: number = Number(form.txtGOK);
        let suryo: number = Number(form.txtSUU);
        let tanka: number = Math.floor(goka / suryo);
        setForm((f) => ({
          ...f,
          txtTAK: String(tanka) // 単価
        }));
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 所要期チェック
   * @[詳細] 所要期チェック
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const checkSyoyoki = () => {
    try {
      let pasVar = form.txtPAS;
      let chotatukikan = Number(form.txtTYOTATU_KIKAN);
      let sikyubi = form.txtSYOYTIJKISYK;

      if (pasVar !== null && pasVar.length > 0) {
        return true;
      }
      if (isKome(sikyubi)) {
        return true;
      }
      let sikyubiDate = new Date(sikyubi.replace(/-/g,"/"));
      let nowDate = new Date();
      PkgLog.log(["今の日付", nowDate, "\n"]);
      let diffTime = Math.abs(sikyubiDate.getTime() - nowDate.getTime());
      let sabun = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      PkgLog.log(["所要期と調達期間の差分", sabun, "\n"]);
      if (sabun >= 0 &&  chotatukikan <= sabun) {
        return true;
      }

      if (false === PkgMessage.putMessageBox("NNCC1025", [])) {
        // キャンセル時処理終了
        return false;
      }
      return true;
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] SOAP対象項目修正チェック
   * @[詳細] SOAP対象項目修正チェック
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const checkSoap = () => {
    try {
      // 追加の時はチェックしない
      if (syoriKBN === "1" || syoriKBN === "3") {
        return true;
      }
      // 購入/払出でなければチェックしない
      if (ykSyubetu !== "0" && ykSyubetu !== "2") {
        return true;
      }
      // 物品ステータスが初期値または購入要求前ならチェックしない
      if (butsts === "00" ||  butsts === "01") {
        return true;
      }

      if (modifySoapColumn === "1") {
        if (false === PkgMessage.putMessageBox("NNCC5029", [])) {
          /* キャンセル時処理終了 */
          return false;
        }
      }
      return true;
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] ボタン制御（活性非活性判断）
   * @[詳細] ボタン制御（活性非活性判断）
   * @[備考] なし
   * @param  なし
   * @returns なし
   */
  const buttomCheck = async () => {
    try {
      PkgLog.log("***** buttomCheck *****\n");
      PkgBasicParts.setDisabled("btnMenu", false);
      PkgBasicParts.setDisabled("btnBack", false);
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要]クリア処理
   * @[詳細]ビルコードが変更された時に行なうクリア処理
   * @[備考]なし
   * @param なし
   * @returns なし
   */
  const bilChange = async () => {
    try {
      setForm(f => ({
        ...f,
        txtNODKSU_NM: "",
        txtUNTHAIBAN: "",
        txtHaichi_FRA: "",
        txtHaichi_GUN: "",
        txtHaichi_TBN: ""
      }));
      await unitChange();
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要]架名装置名フラグの取得
   * @[詳細]架名装置名フラグの取得
   * @[備考]なし
   * @param なし
   * @returns 架名装置名フラグ
   */
  const getKaSouti_option = () => {
    try {
      if (form.optKaSoutiInfo === "2") {
        return "1";
      } else if (form.optKaSoutiInfo === "1") {
        return "0";
      } else {
        return "-1";
      }
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要]クリア処理
   * @[詳細]ユニットコードが変更された時に行なうクリア
   * @[備考]なし
   * @param なし
   * @returns なし
   */
  const unitChange = async () => {
    try {
      setForm(f => ({
        ...f,
        txtKMI: ""
      }));
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要]クリア処理
   * @[詳細]装置種別が変更された時に行なうクリア
   * @[備考]なし
   * @param なし
   * @returns なし
   */
  const soutiClsChange = async () => {
    try {
      setForm(f => ({
        ...f,
        txtKMISTM: ""
      }));
    } catch (e: unknown) {
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要]保持単価の計算と関連処理
   * @[詳細]保持単価の計算と関連処理
   * @[備考]なし
   * @param なし
   * @returns なし
   */
  const calcHojiTanka = async () => {
    try {
      let damTanka: number = 0;
      let abTyo: number = abLenChangeFlg ? Number(txtAB_LEN) : Number(form.txtAB_LEN);
      let kotae: number = 0;

      let zsFlg: string = optZsbFlgChangeFlg ? zsbFlg : form.optZSBFLG;
      if (ykSyubetu === "2" || zsFlg === "0") {
        // 所掌替または在庫品の場合
        mTak = Number(sinpinTanka);
        damTanka = Number(sinpinDamTanka);
      } else if (zsFlg === "1") {
        // 再用品の場合
        mTak = Number(seiriTanka);
        damTanka = Number(seiriDamTanka);
      }

      if (abTakhji === "1") {
        // ab長物品の場合
        kotae = (mTak as number) * abTyo + damTanka;
      } else {
        // その他物品
        kotae = mTak as number;
      }

      koTAK = kotae;

      // 単価表示処理
      await takSet();
    } catch (e: unknown) {
      koTAK = KOME_UME;
      mTak = KOME_UME;
      // 呼び出し元へスロー
      throw e;
    }
  };

  /**
   * @[概要] 転用活性非活性用変更
   * @[詳細] 転用活性非活性用変更処理
   * @[備考] なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const changeInputMode = async (flg: boolean) => {
    try {
      setForm(f => ({
        ...f,
        tenyoKasseiHikassei: flg
      }));

      if (flg === true) {
        // 活性化
        PkgBasicParts.setDisabled("txtTAK", false);        // 単価
        PkgBasicParts.setDisabled("txtTAK_asuta", false);  // 単価（アスタリスク）
        PkgBasicParts.setDisabled("txtGOK", false);        // 合価
        PkgBasicParts.setDisabled("optZSBFLG1_0", false);   // 在再フラグ
        PkgBasicParts.setDisabled("optZSBFLG2_1", false);   // 在再フラグ
      } else {
        // 非活性化
        PkgBasicParts.setDisabled("txtTAK", true);        // 単価
        PkgBasicParts.setDisabled("txtTAK_asuta", true);  // 単価（アスタリスク）
        PkgBasicParts.setDisabled("txtGOK", true);        // 合価
        PkgBasicParts.setDisabled("optZSBFLG1_0", true);   // 在再フラグ
        PkgBasicParts.setDisabled("optZSBFLG2_1", true);   // 在再フラグ
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "changeInputMode");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 購入情報活性非活性用変更
   * @[詳細] 購入情報活性非活性用変更処理
   * @[備考] なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const changeInputModeKounyu = async (flg: boolean) => {
    try {
      setForm(f => ({
        ...f,
        kounyujyohoKasseiHikassei: flg
      }));

      if (flg === true) {
        // 活性化
        PkgBasicParts.setDisabled("pdlYOUBAN", false);  // 要求番号
        PkgBasicParts.setDisabled("txtYKM", false);     // 要求者
        PkgBasicParts.setDisabled("btnYKM", false);     // 要求者ボタン
        PkgBasicParts.setDisabled("txtYKSTEL", false);  // ＴＥＬ
        PkgBasicParts.setDisabled("txtPAS", false);     // ＰＡＳ
        PkgBasicParts.setDisabled("txtSTJ001", false);  // 指定１
        PkgBasicParts.setDisabled("txtSTJ002", false);  // 指定２
        PkgBasicParts.setDisabled("txtSTJ003", false);  // 指定３
      } else {
        // 非活性化
        PkgBasicParts.setDisabled("pdlYOUBAN", true);  // 要求番号
        PkgBasicParts.setDisabled("txtYKM", true);     // 要求者
        PkgBasicParts.setDisabled("btnYKM", true);     // 要求者ボタン
        PkgBasicParts.setDisabled("txtYKSTEL", true);  // ＴＥＬ
        PkgBasicParts.setDisabled("txtPAS", true);     // ＰＡＳ
        PkgBasicParts.setDisabled("txtSTJ001", true);  // 指定１
        PkgBasicParts.setDisabled("txtSTJ002", true);  // 指定２
        PkgBasicParts.setDisabled("txtSTJ003", true);  // 指定３
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "changeInputModeKounyu");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 架情報活性非活性用変更
   * @[詳細] 架情報活性非活性用変更処理
   * @[備考] なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const changeInputModeKajyoho = async (flg: boolean) => {
    try {
      setForm(f => ({
        ...f,
        kajyohoKasseiHikassei: flg
      }));

      if (flg === true) {
        // 活性化
        PkgBasicParts.setDisabled("txtUNTHAIBAN", false);  // ユニットコード
        PkgBasicParts.setDisabled("btnUNTHAIBAN", false);  // 交換機種ボタン
        PkgBasicParts.setDisabled("txtKMI", false);        // 架名
        PkgBasicParts.setDisabled("btnKMI", false);  // 架名ボタン
        PkgBasicParts.setDisabled("txtKAB", false);  // 架番号
      } else {
        // 非活性化
        PkgBasicParts.setDisabled("txtUNTHAIBAN", true);  // ユニットコード
        PkgBasicParts.setDisabled("btnUNTHAIBAN", true);  // 交換機種ボタン
        PkgBasicParts.setDisabled("txtKMI", true);        // 架名
        PkgBasicParts.setDisabled("btnKMI", true);  // 架名ボタン
        PkgBasicParts.setDisabled("txtKAB", true);  // 架番号
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "changeInputModeKajyoho");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 装置情報活性非活性用変更
   * @[詳細] 装置情報活性非活性用変更処理
   * @[備考] なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const changeInputModeSouti = async (flg: boolean) => {
    try {
      setForm(f => ({
        ...f,
        soutiKasseiHikassei: flg
      }));

      if (flg === true) {
        // 活性化
        PkgBasicParts.setDisabled("txtHaichi_FRA", false);  // 配置番号（フロア）
        PkgBasicParts.setDisabled("txtHaichi_GUN", false);  // 配置番号（群）
        PkgBasicParts.setDisabled("txtHaichi_TBN", false);  // 配置番号（通番）
        PkgBasicParts.setDisabled("btnHaichi", false);  // 配置番号ボタン
        PkgBasicParts.setDisabled("txtSTMCLS", false);  // 装置種別
        PkgBasicParts.setDisabled("btnSTMCLS", false);  // 装置種別ボタン
        PkgBasicParts.setDisabled("txtKMISTM", false);  // 装置名
        PkgBasicParts.setDisabled("btnKMISTM", false);  // 装置名ボタン
        PkgBasicParts.setDisabled("txtSUIBAN", false);  // 装置番号
      } else {
        // 非活性化
        PkgBasicParts.setDisabled("txtHaichi_FRA", true);  // 配置番号（フロア）
        PkgBasicParts.setDisabled("txtHaichi_GUN", true);  // 配置番号（群）
        PkgBasicParts.setDisabled("txtHaichi_TBN", true);  // 配置番号（通番）
        PkgBasicParts.setDisabled("btnHaichi", true);  // 配置番号ボタン
        PkgBasicParts.setDisabled("txtSTMCLS", true);  // 装置種別
        PkgBasicParts.setDisabled("btnSTMCLS", true);  // 装置種別ボタン
        PkgBasicParts.setDisabled("txtKMISTM", true);  // 装置名
        PkgBasicParts.setDisabled("btnKMISTM", true);  // 装置名ボタン
        PkgBasicParts.setDisabled("txtSUIBAN", true);  // 装置番号
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "changeInputModeSouti");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 要求種別プルダウン変更
   * @[詳細] 要求種別プルダウン変更処理
   * @[備考] なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const pdlYouclsCdOnChange = async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);
      ykSyubetu = ev.target.value;

      // 転用のときのみ入力可とする
      if (ev.target.value === "1") {
        // 転用/所掌替の項目を活性化
        await changeInputMode(true);
        // 数量（変更）を活性化
        PkgBasicParts.setDisabled("txtHEN_SUU", false);
      } else if (ev.target.value === "3") {
        // 転用/所掌替の項目を非活性化
        await changeInputMode(false);
        // 所掌替の時は再用品に固定
        setForm(f => ({
          ...f,
          optZSBFLG: "1"
        }));
        // 数量（変更）を活性化
        PkgBasicParts.setDisabled("txtHEN_SUU", false);
      } else {
        // 転用/所掌替の項目を非活性化
        await changeInputMode(false);
        // 数量（変更）を非活性化
        PkgBasicParts.setDisabled("txtHEN_SUU", true);
      }
      // 単価セット
      await takSet();
      if (initFlgPdlYouclsCd === true) {
        editFlg = true;
      } else {
        initFlgPdlYouclsCd = false;
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "pdlYouclsCdOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 要求プラント保管場所コード（要求組織物管者コード）▼ボタン
   * @[詳細] 要求プラント保管場所コード（要求組織物管者コード）▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnYplhkadCdOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      // ダイアログのCRSをロード
      setDlgG32Z040010_01(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_01OkClick,
        sksCd: form.lblSKS_CD,     // 施工組織コード
        sgisniFlg: sgisnFlg,       // 所外所内フラグ
        ittsCd: "",                // 委託元組織コード
        ittbksCd: "",              // 委託元物管者コード
        fukaFlg: "0"               // 使用不可フラグ
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnYplhkadCdOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]要求プラント保管場所コード（要求組織物管者コード）▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_01OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_01Args) => {
    try {
      PkgLog.log("要求プラント保管場所（要求組織物管者）を閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtYPLHKAD_CD: args.YOUPCD,   // 要求プラント保管場所コード（要求組織物管者コード）
      }));

      txtYPLHKAD_CD = args.YOUPCD;
      // 要求番号リスト取得
      await findYokyuBango();

    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 受取プラント保管場所コード（受取組織物管者コード）▼ボタン
   * @[詳細] 受取プラント保管場所コード（受取組織物管者コード）▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnUtrhkadCdOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_02(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_02OkClick,
        sksCd: form.lblSKS_CD,     // 施工組織コード
        sgisniFlg: sgisnFlg,       // 所外所内フラグ
        fukaFlg: "0"               // 使用不可フラグ
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnUtrhkadCdOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]受取プラント保管場所コード（受取組織物管者コード）▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_02OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_02Args) => {
    try {
      PkgLog.log("受取組織物管者ダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtUTRHKAD_CD: args.UTRHKAD_CD,   // 受取プラント保管場所コード（受取組織物管者コード）
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 工通指示ボタン
   * @[詳細] 工通指示ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnKoutuOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_03(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_03OkClick,
        sksCd: form.lblSKS_CD,      // 施工組織コード
        fukaFlg: "0",               // 使用不可フラグ
        rksbmi: form.txtBIL2,       // 略称ビル名
        yobidasiFlg: "2",           // 呼出しフラグ
        wbsCd: form.txtWBS_CD,      // WBSコード
        mngskhCd: form.lblMNGSKH_CD // 管理責任者コード
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnKoutuOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]工通指示・検索ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_03OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_03Args) => {
    try {
      PkgLog.log(["ビル検索ダイアログを閉じます。\n", form.txtBIL_CD, args.BIL_CD]);
      if (form.txtBIL_CD !== args.BIL_CD) {
        await bilChange();
      }
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtBIL_CD: args.BIL_CD, // ビルコード
        txtBIL_NM: args.RKSBMI  // 略称ビル名
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 検索ボタン（ビルコード検索）
   * @[詳細] 検索ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnKensakuOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_03(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_03OkClick,
        sksCd: form.lblSKS_CD,      // 施工組織コード
        fukaFlg: "0",               // 使用不可フラグ
        rksbmi: form.txtBIL2,       // 略称ビル名
        yobidasiFlg: "1",           // 呼出しフラグ
        wbsCd: form.txtWBS_CD,      // WBSコード
        mngskhCd: form.lblMNGSKH_CD // 管理責任者コード
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnKensakuOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 交換機種ﾕﾆｯﾄｺｰﾄﾞ▼ボタン
   * @[詳細] 交換機種ﾕﾆｯﾄｺｰﾄﾞ▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnUNTHAIBANOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_04(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_04OkClick,
        sksCd: form.lblSKS_CD,      // 施工組織コード
        bilCd: form.txtBIL_CD,      // ビルコード
        untCd: form.txtUNTHAIBAN    // ユニットコード
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnUNTHAIBANOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]交換機種ﾕﾆｯﾄｺｰﾄﾞ▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_04OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_04Args) => {
    try {
      PkgLog.log("ユニットコード ダイアログを閉じます。\n");
      if (noId !== args.NOD_ID) {
        await unitChange();
       }
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtNODKSU_NM: args.NODKSU_NUM, // 交換機種名
        txtUNTHAIBAN: args.UNT_CD      // ユニットコード
      }));
      noId = args.NOD_ID;
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 架名▼ボタン
   * @[詳細] 架名▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnKMIOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_05(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_05OkClick,
        kmistmFlg: getKaSouti_option() as string, // 架名-装置名フラグ
        nodId: NOD_ID,                            // 交換機ID
        stmcls: ""                                // 装置名種別
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnKMIOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]架名▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_05OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_05Args) => {
    try {
      PkgLog.log("架名 ダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtKMI: args.KMISTM, // 架名-装置名
        txtKTS: args.KABKTS  // 架番号桁数
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 配置番号▼ボタン
   * @[詳細] 配置番号▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnHaichiOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_06(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_06OkClick,
        sksCd: form.lblSKS_CD,  // 施工組織コード
        wbsCd : form.txtWBS_CD, // WBSコード
        bilCd: form.txtBIL_CD   // ビルコード
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnHaichiOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]配置番号▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_06OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_06Args) => {
    try {
      PkgLog.log("配置番号 ダイアログを閉じます。\n");

      zeroPaddingForFRA(args.fra);
      zeroPadding("txtHaichi_TBN", args.tbn, 4);
      setForm(f => ({
        ...f,
        txtHaichi_GUN: args.gun  // 群
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 装置種別名▼ボタン
   * @[詳細] 装置種別名▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnStmclsOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_07(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_07OkClick,
        fukaFlg: "0"  // 使用不可フラグ
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnStmclsonClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]装置種別名▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_07OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_07Args) => {
    try {
      PkgLog.log("装置種別 ダイアログを閉じます。\n");

      if (STMCLS_CD !== args.STMCLS) {
        await soutiClsChange();
      }
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtSTMCLS: args.STMSBM  // 装置名種別名
      }));
      STMCLS_CD = args.STMCLS;  // 装置名種別
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 装置名ボタン押下処理
   * @[詳細] 装置名ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnKmistmOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_05(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_05OkClick2,
        kmistmFlg: getKaSouti_option() as string, // 架名-装置名フラグ
        nodId: NOD_ID,                            // 交換機ID
        stmcls: STMCLS_CD                         // 装置種別
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnKmistmOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]装置名▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_05OkClick2 = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_05Args) => {
    try {
      PkgLog.log("装置名 ダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtKMISTM: args.KMISTM // 架名-装置名
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 品目コードボタン押下処理
   * @[詳細] 品目コードボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnHinmokuCdOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z010010(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z010010OkClick,
        hinmokuCd: form.txtHINMOKU_CD,  // 品目コード
        butuKanaNm: ""            // 物品カナ品名
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnHinmokuCdOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]品目コード参照ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z010010OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z010010Args) => {
    try {
      PkgLog.log("品目コード ダイアログを閉じます。\n");
      // スピナー表示
      await PkgScreenControl.switchLoadingSpinner(true);

      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtHINMOKU_CD: args.BUPPING_CODE,      // 品目コード
        txtKNA: args.KANA_HINMEI,              // 物品カナ品名
        txtTAN: args.TANI,                     // 物品単位
        txtTYOTATU_KIKAN: args.TYOTATU_KIKAN,  // 調達期間
        txtSTIJIKUMU: args.STIJIKUMU,          // 指定事項有無
      }));
      abTakhji = args.AB_TABKHJI;              // ａｂ単価表示
      sinpinTanka = args.SHINPIN_TANKA;        // 新品単価表示
      seiriTanka = args.SEIRI_TANKA;           // 整理品単価表示
      sinpinDamTanka = args.SHINPIN_DAMTANKA;  // 新品ダム単価
      seiriDamTanka = args.SEIRI_DAMTANKA;     // 整理品ダム単価
      gnbcthflg = args.GNBCTH_FLG;             // 現場調達品フラグ
      htiutwkhf = args.HTIUTWKHF;              // 本体内訳－構成品フラグ
      txtSTIJIKUMU = args.STIJIKUMU            // 指定事項有無

      // 物品特定後の処理
      await setBuppinJyoho();
      // 単価再計算
      await calcHojiTanka();
      // ＮＳ／ＣＳ区分を設定
      await buppinJyosusyutoku_nscsKbn();

    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    } finally {
      // スピナー非表示
      await PkgScreenControl.switchLoadingSpinner(false);
    }
  };

  /**
   * @[概要] 仕入先コード参照ボタン
   * @[詳細] 仕入先コード参照ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnSirCdOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      // EDI送信フラグをONに変更
      ediSendFlg = "1";

      setDlgG32Z020010(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z020010OkClick,
        sirCd: form.txtSIR_CD,  // 仕入先コード
        mkm: ""                 // メーカ名
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnSirCdOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]仕入先コード参照ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z020010OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z020010Args) => {
    try {
      PkgLog.log("仕入先コード ダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtSIR_CD: args.SIR_CD // メーカーコード
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 納入先住所コード参照ボタン
   * @[詳細] 納入先住所コード参照ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnNonyuAdrCdOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_08(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_08OkClick,
        nonyuAdrCd: form.txtNONYU_ADR_CD  // 納入先住所コード
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnNonyuAdrCdOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]納入先住所コード参照ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_08OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_08Args) => {
    try {
      PkgLog.log("納入先住所コード ダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtNonyuAdrCd: args.nonyuAdrCd  // 納入先住所コード
      }));
      // EDI送信フラグをONに変更
      ediSendFlg = "1";
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 要求者▼ボタン
   * @[詳細] 要求者▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnYKMOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_09(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_09OkClick,
        sksCd: form.lblSKS_CD,  // 施工組織コード
        wbsCd: form.txtWBS_CD   // WBSコード
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnYKMOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]要求者▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_09OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_09Args) => {
    try {
      PkgLog.log("要求者 ダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtYKM: args.ykm,                        // 要求者名
        txtYKSTEL: args.yksTel.substring(0, 12)  // 要求者ＴＥＬ
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 市町村コード（To）▼ボタン
   * @[詳細] 市町村コード（To）▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnSITYOUOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_20(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_20OkClick,
        scsCd: form.txtScsCd,    // 市町村コード（ビルコード）
        scsNm: form.txtScsNm     // 市町村名（ビル名）
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnSITYOUOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]市町村コード（To）▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_20OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_20Args) => {
    try {
      PkgLog.log("市町村コードダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtScsCd: args.ScsCd,   // 市町村コード（ビルコード）
        txtScsNm: args.ScsNm    // 市町村名（ビル名）
      }));
    } catch (e: unknown) {
    // 例外メッセージを表示
    PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
    // 画面ロック
    PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] 送付先郵便番号▼ボタン
   * @[詳細] 送付先郵便番号▼ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnSFSYBNOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      setDlgG32Z040010_19(d => ({
        ...d,
        show: true,
        btnOkClickEvent: dlgG32Z040010_19OkClick,
        ybnNo: form.txtYbnNo,                    // 郵便番号
        tdhknKanji: form.txtTdhknKanji,          // 都道府県
        sikgnchsnKanji: form.txtSikgnchsnKanji,  // 市区町村名
        ozaTushKanji: form.txtOzaTushKanji,      // 大字・通称名
        azaChmeKanji: form.txtAzaChmeKanji       // 字名・丁目
      }));
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnSFSYBNOnClick");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ダイアログでOKが押下されたときの処理
   * @[詳細]送付先郵便番号▼ボタンダイアログ処理
   * @[備考]なし
   * @param {*} ev イベントオブジェクト
   * @param {*} args
   * @returns なし
   */
  const dlgG32Z040010_19OkClick = async (ev: ButtonOnClickEvent, args: DlgG32Z040010_19Args) => {
    try {
      PkgLog.log("送付先郵便番号ダイアログを閉じます。\n");
      // 画面項目に設定
      setForm(f => ({
        ...f,
        txtYbnNo: args.YBN_NO,              // 送付先郵便番号
        txtTdhknKanji: args.TDHKN_KANJI,    // 送付先都道府県
        // 送付先市町村（市町村名＋太字・通称名＋字名・丁目）
        txtSfsSikOzaAza: args.SIKGNCHSN_KANJI + args.OZA_TUSH_KANJI + args.AZA_CHME_KANJI                
      }));
    } catch (e: unknown) {
    // 例外メッセージを表示
    PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
    // 画面ロック
    PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]単価フォーカスアウト
   * @[詳細]単価フォーカスアウト処理
   * @[備考]なし
   * @param {FormItemOnBlurEvent} ev フォーム項目フォーカスアウトイベント
   * @returns なし
   */
  const txtTakOnBlur= async (ev: FormItemOnBlurEvent) => {
    try {
      let txtTak = document.getElementById("txtTAK") as HTMLInputElement;
      if (txtTak.disabled === false) {
        await calcGoka();
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "txtTakOnBlur");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]単価フォーカスアウト（tab遷移用）
   * @[詳細]単価フォーカスアウト処理（tab遷移用）
   * @[備考]なし
   * @param {FormItemOnFocusEvent} ev フォーム項目フォーカスインイベント
   * @returns なし
   */
  const txtTakOnFocus = async (ev: FormItemOnFocusEvent) => {
    try {
      await PkgUtil.sleep(0);
      ev.target.value = form.txtTAK;
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "txtTakOnFocus");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]合価フォーカスアウト
   * @[詳細]合価フォーカスアウト処理
   * @[備考]なし
   * @param {FormItemOnBlurEvent} ev フォーム項目フォーカスアウトイベント
   * @returns なし
   */
  const txtGokOnBlur = async (ev: FormItemOnBlurEvent) => {
    try {
      let txtGok = document.getElementById("txtGOK") as HTMLInputElement;
      if (txtGok.disabled === false) {
        await calcTanka();
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "txtGokOnBlur");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]合価フォーカスアウト（tab遷移用）
   * @[詳細]合価フォーカスアウト処理（tab遷移用）
   * @[備考]なし
   * @param {FormItemOnFocusEvent} ev フォーム項目フォーカスインイベント
   * @returns なし
   */
  const txtGokOnFocus = async (ev: FormItemOnFocusEvent) => {
    try {
      await PkgUtil.sleep(0);
      ev.target.value = form.txtGOK;
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "txtGokOnFocus");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]品目コードフォーカスアウト
   * @[詳細]品目コードフォーカスアウト処理
   * @[備考]なし
   * @param {FormItemOnBlurEvent} ev フォーム項目フォーカスアウトイベント
   * @returns なし
   */
  const btnHinmokuCdOnBlur= async (ev: FormItemOnBlurEvent) => {
    try {
      // スピナー表示
      await PkgScreenControl.switchLoadingSpinner(true);

      let txtHinmokuCd = document.getElementById("txtHINMOKU_CD") as HTMLInputElement;
      txtHINMOKU_CD = txtHinmokuCd.value;
      if (txtHinmokuCd.disabled === false) {
        if (txtHINMOKU_CD !== null && txtHINMOKU_CD.length > 0) {
          await buppinJyosusyutoku();
          // 単価再計算
          await calcHojiTanka();
        }
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "btnHinmokuCdOnBlur");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    } finally {
      // スピナー非表示
      await PkgScreenControl.switchLoadingSpinner(false);
    }
  };

  /**
   * @[概要]ビルコードフォーカスアウト
   * @[詳細]ビルコードフォーカスアウト処理
   * @[備考]なし
   * @param {FormItemOnBlurEvent} ev フォーム項目フォーカスアウトイベント
   * @returns なし
   */
  const txtBilCdOnBlur= async (ev: FormItemOnBlurEvent) => {
    try {
      // スピナー表示
      await PkgScreenControl.switchLoadingSpinner(true);

      let txtBilCd = document.getElementById("txtBIL_CD") as HTMLInputElement;
      if (txtBilCd.disabled === false) {
        if (txtBilCd.value !== null && txtBilCd.value.length > 0) {
          await billJyosusyutoku();
        }
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "txtBilCdOnBlur");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    } finally {
      // スピナー非表示
      await PkgScreenControl.switchLoadingSpinner(false);
    }
   };

  /**
   * @[概要]配置番号フォーカスアウト
   * @[詳細]配置番号フォーカスアウト処理
   * @[備考]なし
   * @param {FormItemOnBlurEvent} ev フォーム項目フォーカスアウトイベント
   * @returns なし
   */
  const txtHaichiOnBlur= async (ev: FormItemOnBlurEvent) => {
    try {
      let id = ev.target.id;
      if (id === "txtHaichi_FRA") {
        // 配置番号（フロア）の場合
        let txtHaichiFra = document.getElementById("txtHaichi_FRA") as HTMLInputElement;
        if (txtHaichiFra.disabled === false) {
          if (txtHaichiFra.value !== null && txtHaichiFra.value.length > 0) {
            zeroPaddingForFRA(txtHaichiFra.value);
          }
        }
      } else {
        // 配置番号（通番）の場合
        let txtHaichiTbn = document.getElementById("txtHaichi_TBN") as HTMLInputElement;
        if (txtHaichiTbn.disabled === false) {
          if (txtHaichiTbn.value !== null && txtHaichiTbn.value.length > 0) {
            zeroPadding("txtHaichi_TBN", txtHaichiTbn.value, 4);
          }
        }
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "txtHaichiOnBlur");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]プルダウン変更
   * @[詳細]プルダウン変更
   * @[備考]なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const pdlYousaisoOnChange= async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);
      if (ev.target.id === "pdlBUTUYOUSAISO") {
        // 物流要再送の場合
        if (initFlgPdlButuYousaiso === false) {
          editFlg = true;
        } else {
          initFlgPdlButuYousaiso = false;
        }
      } else if (ev.target.id === "pdlEDIYOUSAISO") {
        // EDI要再送の場合
        if (initFlgPdlEdiYousaiso === false) {
          editFlg = true;
        } else {
          initFlgPdlEdiYousaiso = false;
        }
      } else {
        // 要求番号の場合
        if (Number(ev.target.value) <= 0) {
          initFlgPdlYOUBAN = false;
        }
        if (initFlgPdlYOUBAN === false) {
          editFlg = true;
        } else {
          initFlgPdlYOUBAN = false;
        }
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "pdlYousaisoOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]架情報ラジオボタン
   * @[詳細]架情報ラジオボタン変更処理
   * @[備考]なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const optKaInfoOnChange= async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);
      if (initFlgOptKaInfo === false) {
        ediSendFlg = "1";
      } else {
        initFlgOptSoutiInfo = false;
        initFlgOptKaInfo = false;
      }

      if (ev.target.value === "1") {
        hoji_kameisoutiFlg = "1";
        await changeInputModeKajyoho(true);
        await changeInputModeSouti(false);
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "optKaInfoOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]装置情報ラジオボタン
   * @[詳細]装置情報ラジオボタン変更処理
   * @[備考]なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const optSoutiInfoOnChange= async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);
      if (initFlgOptSoutiInfo === false) {
        ediSendFlg = "1";
      } else {
        initFlgOptSoutiInfo = false;
        initFlgOptKaInfo = false;
      }

      if (ev.target.value === "2") {
        hoji_kameisoutiFlg = "1";
        await changeInputModeKajyoho(false);
        await changeInputModeSouti(true);
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "optSoutiInfoOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]購入情報チェックボックス
   * @[詳細]購入情報チェックボックス変更処理
   * @[備考]なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const chkKounyuJyohouFlgOnChange= async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);
      if (ev.target.value.includes("1")) {
        await changeInputModeKounyu(true);
      } else {
        await changeInputModeKounyu(false);
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "chkKounyuJyohouFlgOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]在再フラグ変更
   * @[詳細]在再フラグ変更処理
   * @[備考]なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const optZsbFlgOnChange= async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);
      optZsbFlgChangeFlg = true;
      zsbFlg = ev.target.value;
      if (initFlgOptZSBFLG === false) {
        editFlg = true;
        // 合価クリア
        txtGOK = 0;
        setForm((f) => ({
          ...f,
          txtGOK: "0"  // 合価
        }));
        // 単価再計算
        await calcHojiTanka();
      } else {
        initFlgOptZSBFLG = false;
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "optZsbFlgOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]ＥＤＩ対象項目変更イベント
   * @[詳細]ＥＤＩ対象項目変更イベント
   * @[備考]なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const ediOnChange= async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);

      // 変更された要素のIDを取得
      let elementId = ev.target.id;
      if (elementId === "txtBIL_CD") {
        // ビルコードの場合
        // 関連する項目の値をクリア
        await bilChange();
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
      } else if (elementId === "txtKMI") {
        // 架名の場合
        hoji_kameisoutiFlg = "1";
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
      } else if (elementId === "txtKMISTM") {
        // 装置名の場合
        hoji_kameisoutiFlg = "1";
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
      } else if (elementId === "txtUNTHAIBAN") {
        // ユニットコードの場合
        // 関連する項目の値をクリア
        await unitChange();
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
      } else if (elementId === "txtSUU" || elementId === "txtHEN_SUU" || elementId === "txtSYOYTIJKISYK") {
        // 数量、数量（変更）、支給予定日の場合
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
        modifySoapColumn = "1";
      } else if (elementId === "txtAB_LEN") {
        // ab長の場合
        // 単価再計算
        txtGOK = 0;
        setForm((f) => ({
          ...f,
          txtGOK: "0"  // 合価
        }));
        txtAB_LEN = ev.target.value;
        abLenChangeFlg = true;
        await calcHojiTanka();
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
      } else if (elementId === "txtSTMCLS") {
        // 装置種別の場合
        // 関連する項目の値をクリア
        await soutiClsChange();
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
      } else {
        // 架番号、配置番号（フロア、群、通番）、品目コード、仕入先コード、納入先住所コードの場合
        // ＥＤＩ送信対象フラグをONに変更
        ediSendFlg = "1";
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "ediOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要]単価変更イベント
   * @[詳細]単価変更イベント
   * @[備考]なし
   * @param {FormItemOnChangeEvent} ev フォーム項目変更イベント
   * @returns なし
   */
  const koTakOnChange= async (ev: FormItemOnChangeEvent) => {
    try {
      handleForm(ev);

      // 変更された要素のIDを取得
      let elementId = ev.target.name;
      if (elementId === "txtTAK" || elementId === "txtGentyoTAN") {
        // 単価、現場調達品（単価）の場合
        koTAK = Number(ev.target.value);
        PkgLog.log([">>>>個単価>>", koTAK, "\n"]);
      } else if (elementId === "txtGOK") {
        // 合価の場合
        koTAK = Number(form.txtTAK);
        PkgLog.log([">>>>個単価>>", koTAK, "\n"]);
      }
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, "koTakOnChange");
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    }
  };

  /**
   * @[概要] メニューボタン押下
   * @[詳細] メニュー画面へ遷移
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnMenuOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      if (editFlg) {
        // 変更がある場合、確認メッセージを表示
        if (!PkgMessage.putMessageBox("NNCC0010", [])) {
          // キャンセルの場合、フォーカスを登録ボタンに設定
          PkgBasicParts.focus("btnToroku");
          return;
        }
      }
      // メニュー画面に遷移
      await prevScreen(PkgComGlobal.PREV_TYPE_MENU);
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
      // スピナー非表示
      await PkgScreenControl.switchLoadingSpinner(false);
    }
  };

  /**
   * @[概要] 登録ボタン押下
   * @[詳細] 登録ボタン押下処理
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnTorokuOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      PkgLog.log(["EDIフラグ：", ediSendFlg, "\n"]);

      await touroku();

    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
    } finally {
      // スピナー非表示
      await PkgScreenControl.switchLoadingSpinner(false);
    }
  };

  /**
   * @[概要] 戻るボタン押下
   * @[詳細] 呼び出し元画面に遷移
   * @[備考] なし
   * @param {ButtonOnClickEvent} ev ボタンクリックイベントオブジェクト
   * @returns なし
   */
  const btnBackOnClick = async (ev: ButtonOnClickEvent) => {
    try {
      if (editFlg) {
        // 変更がある場合、確認メッセージを表示
        if (!PkgMessage.putMessageBox("NNCC0010", [])) {
          // キャンセルの場合、フォーカスを登録ボタンに設定
          PkgBasicParts.focus("btnToroku");
          return;
        }
      }
      // 呼び出し元画面に遷移
      await prevScreen(PkgComGlobal.PREV_TYPE_PREV);
    } catch (e: unknown) {
      // 例外メッセージを表示
      PkgMessage.putException(e, `${ev.target.id}_${ev.type}`);
      // 画面ロック
      PkgScreenControl.lockScreen("root", ["btnMenu", "btnBack"]);
      // スピナー非表示
      await PkgScreenControl.switchLoadingSpinner(false);
    }
  };

  // フッターボタン群定義
  const footerButtons = PkgKakuchoParts.GetDefaultFooterButtons();
  footerButtons[0][0] = { id: "btnMenu", text: "メニュー", onClick: btnMenuOnClick};
  footerButtons[0][1] = { id: "btnToroku", text: "登　録", onClick: btnTorokuOnClick};
  footerButtons[1][0] = { id: "btnBack", text: "戻　る", onClick: btnBackOnClick};

  return (
    <>
      <PkgKakuchoParts.ClsFormHeaderIppan header={header} />
      <div ref={focusRef}>
      <PkgKakuchoParts.ClsMainContents>
        <div className="row">
          <div className="form-row">
            <span className="form-item">
              {/* 施工組織コード */}
              <PkgBasicParts.ClsBaseLabel
                id="lblSKS_CD"
                value={form.lblSKS_CD}
                width={0}
                style={{display:"none"}}
              />
              {/* 総合工事番号 */}
              <PkgBasicParts.ClsBaseLabel
                id="lblSKJBAN"
                value="総合工事番号:&nbsp"
                width={PkgBasicParts.getWidth.Label(16)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtSKJBAN"
                name="txtSKJBAN"
                width={PkgBasicParts.getWidth.TextBox(8)}
                maxLength={8}
                value={form.txtSKJBAN}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
            <span className="form-item">
              {/* 総合工事名 */}
              <PkgBasicParts.ClsBaseLabel
                id="lblSKJ_NM"
                value="総合工事名:&nbsp"
                width={PkgBasicParts.getWidth.Label(12)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtSKJ_NM"
                name="txtSKJ_NM"
                width={PkgBasicParts.getWidth.TextBox(60)}
                maxLength={30}
                value={form.txtSKJ_NM}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
            <span className="form-item">
              {/* 工事マネージャ */}
              <PkgBasicParts.ClsBaseLabel
                id="lblKOJMGR"
                value="工事マネージャ:&nbsp"
                width={PkgBasicParts.getWidth.Label(16)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtKOJMGR"
                name="txtKOJMGR"
                width={PkgBasicParts.getWidth.TextBox(20)}
                maxLength={10}
                value={form.txtKOJMGR}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
          </div>
          <div className="form-row">
            <span className="form-item">
              {/* WBSコード */}
              <PkgBasicParts.ClsBaseLabel
                id="lblWBS_CD"
                value="WBSコード:&nbsp"
                width={PkgBasicParts.getWidth.Label(16)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtWBS_CD"
                name="txtWBS_CD"
                width={PkgBasicParts.getWidth.TextBox(23)}
                maxLength={23}
                value={form.txtWBS_CD}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
            <span className="form-item">
              {/* 工事名 */}
              <PkgBasicParts.ClsBaseLabel
                id="lblKOJ_NM"
                value="工事名:&nbsp"
                width={PkgBasicParts.getWidth.Label(8)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtKOJ_NM"
                name="txtKOJ_NM"
                width={PkgBasicParts.getWidth.TextBox(60)}
                maxLength={30}
                value={form.txtKOJ_NM}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
            <span className="form-item">
              {/* 部門 */}
              <PkgBasicParts.ClsBaseLabel
                id="lblBUM_NM"
                value="部門:&nbsp"
                width={PkgBasicParts.getWidth.Label(6)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtBUM_NM"
                name="txtBUM_NM"
                width={PkgBasicParts.getWidth.TextBox(8)}
                maxLength={4}
                value={form.txtBUM_NM}
                tabIndex={-1}
                readOnly={true}
              />
              <PkgBasicParts.ClsBaseLabel
                id="lblBUM_CD"
                value={form.lblBUM_CD}
                width={0}
                style={{display:"none"}}
              />
              <PkgBasicParts.ClsBaseLabel
                id="lblMNGSKH_CD"
                value={form.lblMNGSKH_CD}
                width={0}
                style={{display:"none"}}
              />
            </span>
          </div>
          <div className="form-row">
            <span className="form-item">
              {/* 変更区分 */}
              <PkgBasicParts.ClsBaseLabel
                id="lblHNK"
                value="変更区分:&nbsp"
                width={PkgBasicParts.getWidth.Label(16)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtHNK"
                name="txtHNK"
                width={PkgBasicParts.getWidth.TextBox(8)}
                maxLength={4}
                value={form.txtHNK}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
            <span className="form-item">
              {/* ＮＳ番号 */}
              <PkgBasicParts.ClsBaseLabel
                id="lblNS_BAN"
                value="ＮＳ番号:&nbsp"
                width={PkgBasicParts.getWidth.Label(10)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtNS_BAN"
                name="txtNS_BAN"
                width={PkgBasicParts.getWidth.TextBox(7)}
                maxLength={7}
                value={form.txtNS_BAN}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
            <span className="form-item">
              {/* 物品ステータス */}
              <PkgBasicParts.ClsBaseLabel
                id="lblBUTSTSRKS"
                value="物品ステータス:&nbsp"
                width={PkgBasicParts.getWidth.Label(16)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtBUTSTSRKS"
                name="txtBUTSTSRKS"
                width={PkgBasicParts.getWidth.TextBox(20)}
                maxLength={10}
                value={form.txtBUTSTSRKS}
                tabIndex={-1}
                readOnly={true}
              />
            </span>
            <span className="form-item">
              {/* 要求種別・プルダウン*/}
              <PkgBasicParts.ClsBaseLabel
                id="lblYOUCLS_CD"
                value="要求種別:&nbsp"
                width={PkgBasicParts.getWidth.Label(10)}
              />
              <PkgBasicParts.ClsBasePullDownList
                id="pdlYOUCLS_CD"
                name="pdlYOUCLS_CD"
                width={PkgBasicParts.getWidth.PullDownList(8)}
                options={pdlYOUCLS_CD}
                valueIndex={1}
                displayIndex={0}
                value={form.pdlYOUCLS_CD}
                onChange={pdlYouclsCdOnChange}
              />
            </span>
          </div>
          <div className="form-row">
            <div className="col-5" style={{ marginTop: 10 }}>
              <span className="form-item">
                {/* 要求プラント保管場所コード（要求組織物管者コード） */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblYPLHKAD_CD"
                  value="要求プラント保管場所コード:&nbsp"
                  width={PkgBasicParts.getWidth.Label(28)}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtYPLHKAD_CD"
                  name="txtYPLHKAD_CD"
                  width={PkgBasicParts.getWidth.TextBox(8)}
                  maxLength={8}
                  value={form.txtYPLHKAD_CD}
                  onChange={handleForm}
                  tabIndex={-1}
                  readOnly={true}
                />
                <PkgBasicParts.ClsBaseLabel
                  id="lblYPLHKAD_CDHyphen"
                  value="&nbsp-&nbsp"
                  width={PkgBasicParts.getWidth.Label(3)}
                />
                
                <PkgBasicParts.ClsAtaiListButton
                  id="btnYPLHKAD_CD"
                  onClick={btnYplhkadCdOnClick}
                />
                {/* eslint-disable-next-line */}
                <DlgG32Z040010_01.Dialog props={dlgG32Z040010_01} />
              </span>
              <span className="form-item">
                {/* ビルコード */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblBIL_CD"
                  value="ビルコード:&nbsp"
                  width={PkgBasicParts.getWidth.Label(12)}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtBIL_CD"
                  name="txtBIL_CD"
                  width={PkgBasicParts.getWidth.TextBox(10)}
                  maxLength={10}
                  value={form.txtBIL_CD}
                  onChange={ediOnChange}
                  onBlur={txtBilCdOnBlur}
                />
              </span>
              <div className="form-row">
                <span className="form-item">
                  {/* 受取プラント保管場所コード（受取組織物管者コード）*/}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblUTRHKAD_CD"
                    value="受取プラント保管場所コード:&nbsp"
                    width={PkgBasicParts.getWidth.Label(28)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtUTRHKAD_CD"
                    name="txtUTRHKAD_CD"
                    width={PkgBasicParts.getWidth.TextBox(8)}
                    maxLength={8}
                    value={form.txtUTRHKAD_CD}
                    onChange={handleForm}
                    tabIndex={-1}
                    readOnly={true}
                  />
                  <PkgBasicParts.ClsBaseLabel
                    id="lblUTRHKAD_CDHyphen"
                    value="&nbsp-&nbsp"
                    width={PkgBasicParts.getWidth.Label(3)}
                  />
                  
                  <PkgBasicParts.ClsAtaiListButton
                    id="btnUTRHKAD_CD"
                    onClick={btnUtrhkadCdOnClick}
                  />
                  {/* eslint-disable-next-line */}
                  <DlgG32Z040010_02.Dialog props={dlgG32Z040010_02} />
                </span>
                <span className="form-item">
                  {/* ビル名 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblBIL_NM"
                    value="ビル名:&nbsp"
                    width={PkgBasicParts.getWidth.Label(12)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtBIL_NM"
                    name="txtBIL_NM"
                    width={PkgBasicParts.getWidth.TextBox(20)}
                    maxLength={10}
                    value={form.txtBIL_NM}
                    onChange={handleForm}
                    tabIndex={-1}
                    readOnly={true}
                  />
                </span>
              </div>
            </div>
            <div className="col-3" style={{ marginTop: 15, width: 400 }}>
              {/* ビル選択 */}
              <PkgBasicParts.ClsBaseGroupBox>
                <PkgBasicParts.ClsBaseLabel
                  id="lblBILselect"
                  value="ビル選択:&nbsp"
                  width={PkgBasicParts.getWidth.Label(10)}
                />
                <PkgBasicParts.ClsBaseButton
                  id="btnKoutu"
                  text="工通指示"
                  onClick={btnKoutuOnClick}
                  style={{ marginRight: 10}}
                />
                <PkgBasicParts.ClsBaseButton
                  id="btnKensaku"
                  text="検索"
                  onClick={btnKensakuOnClick}
                  style={{ marginRight: 10}}
                />
                {/* eslint-disable-next-line */}
                <DlgG32Z040010_03.Dialog props={dlgG32Z040010_03} />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtBIL2"
                  name="txtBIL2"
                  width={PkgBasicParts.getWidth.TextBox(20)}
                  maxLength={10}
                  value={form.txtBIL2}
                  onChange={handleForm}
                />
              </PkgBasicParts.ClsBaseGroupBox>
            </div>
          </div>
        </div>
        <div className="row" style={{ marginTop: 15 }}>
          <div className="col-4">
            {/* 枠 */}
            <PkgBasicParts.ClsBaseGroupBox
              height={145}
              width={400}
            >
              <div className="form-row">
                <div className="form-item">
                  {/* 架情報活性非活性用 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="kajyohoKasseiHikassei"
                    value={String(form.kajyohoKasseiHikassei)}
                    width={0}
                    style={{display:"none"}}
                  />
                  {/* 架情報入力 */}
                  <PkgBasicParts.ClsBaseOptionButton
                    id="optKaInfo"
                    name="optKaSoutiInfo"
                    width={PkgBasicParts.getWidth.OptionButton(10)}
                    option={kensakuKbn[0]}
                    valueIndex={0}
                    displayIndex={1}
                    value={form.optKaSoutiInfo}
                    onChange={optKaInfoOnChange}
                  />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 交換機種ユニットコード */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblNODKSU_NM"
                    value="交換機種<br>ユニットコード"
                    width={PkgBasicParts.getWidth.Label(16)}
                    style={{ textAlign: "center", lineHeight: "normal" }}
                  />
                  <PkgBasicParts.ClsBaseLabel
                    id="lblNODKSU_NM1"
                    value=":&nbsp"
                    width={PkgBasicParts.getWidth.Label(2)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtNODKSU_NM"
                    name="txtNODKSU_NM"
                    width={PkgBasicParts.getWidth.TextBox(20)}
                    maxLength={20}
                    value={form.txtNODKSU_NM}
                    onChange={handleForm}
                    tabIndex={-1}
                    readOnly={true}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtUNTHAIBAN"
                    name="txtUNTHAIBAN"
                    width={PkgBasicParts.getWidth.TextBox(7)}
                    maxLength={7}
                    value={form.txtUNTHAIBAN}
                    onChange={ediOnChange}
                    readOnly={!(form.optKaSoutiInfo==="1")}
                    {...(form.optKaSoutiInfo==="2" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsAtaiListButton
                    id="btnUNTHAIBAN"
                    onClick={btnUNTHAIBANOnClick}
                  />
                  {/* eslint-disable-next-line */}
                  <DlgG32Z040010_04.Dialog props={dlgG32Z040010_04} />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 架名 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblKMI"
                    value="架名:&nbsp"
                    width={PkgBasicParts.getWidth.Label(18)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtKMI"
                    name="txtKMI"
                    width={PkgBasicParts.getWidth.TextBox(16)}
                    maxLength={16}
                    value={form.txtKMI}
                    onChange={ediOnChange}
                    readOnly={!(form.optKaSoutiInfo==="1")}
                    {...(form.optKaSoutiInfo==="2" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsAtaiListButton
                    id="btnKMI"
                    onClick={btnKMIOnClick}
                  />
                  {/* eslint-disable-next-line */}
                  <DlgG32Z040010_05.Dialog props={dlgG32Z040010_05} />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 架番号 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblKAB"
                    value="架番号:&nbsp"
                    width={PkgBasicParts.getWidth.Label(18)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtKAB"
                    name="txtKAB"
                    width={PkgBasicParts.getWidth.TextBox(4)}
                    maxLength={4}
                    value={form.txtKAB}
                    onChange={ediOnChange}
                    readOnly={!(form.optKaSoutiInfo==="1")}
                    {...(form.optKaSoutiInfo==="2" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtKTS"
                    name="txtKTS"
                    width={PkgBasicParts.getWidth.TextBox(1)}
                    maxLength={1}
                    value={form.txtKTS}
                    tabIndex={-1}
                    readOnly={true}
                  />
                  <PkgBasicParts.ClsBaseLabel
                    id="lblKTS"
                    value="桁で入力してください。"
                    width={PkgBasicParts.getWidth.Label(22)}
                  />
                </div>
              </div>
            </PkgBasicParts.ClsBaseGroupBox>
          </div>
          <div className="col-3">
            {/* 枠 */}
            <PkgBasicParts.ClsBaseGroupBox
              height={145}
              width={340}
              style={{marginLeft: -50}}
            >
              {/* 装置情報活性非活性用 */}
              <PkgBasicParts.ClsBaseLabel
                id="soutiKasseiHikassei"
                value={String(form.soutiKasseiHikassei)}
                width={0}
                style={{display:"none"}}
              />
              {/* 装置情報入力 */}
              <PkgBasicParts.ClsBaseOptionButton
                id="optSoutiInfo"
                name="optKaSoutiInfo"
                width={PkgBasicParts.getWidth.OptionButton(12)}
                option={kensakuKbn[1]}
                valueIndex={0}
                displayIndex={1}
                value={form.optKaSoutiInfo}
                onChange={optSoutiInfoOnChange}
              />
              <div className="form-row">
                <div className="form-item">
                  {/* 配置番号・プルダウン */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblHaichi"
                    value="配置番号:&nbsp"
                    width={PkgBasicParts.getWidth.Label(11)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtHaichi_FRA"
                    name="txtHaichi_FRA"
                    width={PkgBasicParts.getWidth.TextBox(4)}
                    maxLength={4}
                    value={form.txtHaichi_FRA}
                    onChange={ediOnChange}
                    onBlur={txtHaichiOnBlur}
                    readOnly={!(form.optKaSoutiInfo==="2")}
                    {...(form.optKaSoutiInfo==="1" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtHaichi_GUN"
                    name="txtHaichi_GUN"
                    width={PkgBasicParts.getWidth.TextBox(1)}
                    maxLength={1}
                    value={form.txtHaichi_GUN}
                    onChange={ediOnChange}
                    readOnly={!(form.optKaSoutiInfo==="2")}
                    {...(form.optKaSoutiInfo==="1" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtHaichi_TBN"
                    name="txtHaichi_TBN"
                    width={PkgBasicParts.getWidth.TextBox(4)}
                    maxLength={4}
                    value={form.txtHaichi_TBN}
                    onChange={ediOnChange}
                    onBlur={txtHaichiOnBlur}
                    readOnly={!(form.optKaSoutiInfo==="2")}
                    {...(form.optKaSoutiInfo==="1" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsAtaiListButton
                    id="btnHaichi"
                    onClick={btnHaichiOnClick}
                  />
                  {/* eslint-disable-next-line */}
                  <DlgG32Z040010_06.Dialog props={dlgG32Z040010_06} />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 装置種別・プルダウン */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblSTMCLS"
                    value="装置種別:&nbsp"
                    width={PkgBasicParts.getWidth.Label(11)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtSTMCLS"
                    name="txtSTMCLS"
                    width={PkgBasicParts.getWidth.TextBox(20)}
                    maxLength={10}
                    value={form.txtSTMCLS}
                    onChange={ediOnChange}
                    readOnly={!(form.optKaSoutiInfo==="2")}
                    {...(form.optKaSoutiInfo==="1" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsAtaiListButton
                    id="btnSTMCLS"
                    onClick={btnStmclsOnClick}
                  />
                  {/* eslint-disable-next-line */}
                  <DlgG32Z040010_07.Dialog props={dlgG32Z040010_07} />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 装置名・プルダウン */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblKMISTM"
                    value="装置名:&nbsp"
                    width={PkgBasicParts.getWidth.Label(11)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtKMISTM"
                    name="txtKMISTM"
                    width={PkgBasicParts.getWidth.TextBox(16)}
                    maxLength={16}
                    value={form.txtKMISTM}
                    onChange={ediOnChange}
                    readOnly={!(form.optKaSoutiInfo==="2")}
                    {...(form.optKaSoutiInfo==="1" ? { tabIndex: -1 } : {})}
                  />
                  <PkgBasicParts.ClsAtaiListButton
                    id="btnKMISTM"
                    onClick={btnKmistmOnClick}
                  />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 装置番号 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblSUIBAN"
                    value="装置番号:&nbsp"
                    width={PkgBasicParts.getWidth.Label(11)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtSUIBAN"
                    name="txtSUIBAN"
                    width={PkgBasicParts.getWidth.TextBox(4)}
                    maxLength={4}
                    value={form.txtSUIBAN}
                    onChange={handleForm}
                    readOnly={!(form.optKaSoutiInfo==="2")}
                    {...(form.optKaSoutiInfo==="1" ? { tabIndex: -1 } : {})}
                  />
                </div>
              </div>
            </PkgBasicParts.ClsBaseGroupBox>
          </div>
          <div className="col-3">
            {/* 枠 */}
            <PkgBasicParts.ClsBaseGroupBox
              style={{ marginLeft: -45, position: "relative" }}
              height={145}
            >
              <div
                style={{
                  position: "absolute",
                  top: -12,
                  left: 5,
                  backgroundColor: "var(--body-background-color)",
                }}
              >
                <PkgBasicParts.ClsBaseLabel
                  id="grpTenyo"
                  value="転用/所掌替"
                  width={PkgBasicParts.getWidth.Label(12)}
                />
                {/* 転用活性非活性用 */}
                <PkgBasicParts.ClsBaseLabel
                  id="tenyoKasseiHikassei"
                  value={String(form.tenyoKasseiHikassei)}
                  width={0}
                  style={{display:"none"}}
                />
              </div>
              <div className="form-row">
                <div className="form-item" style={{ marginTop: 10 }}>
                  {/* 単価 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblTAK"
                    value="単価:&nbsp"
                    width={PkgBasicParts.getWidth.Label(7)}
                  />
                  <PkgBasicParts.ClsBaseTextBoxForInteger
                    id="txtTAK"
                    name="txtTAK"
                    width={PkgBasicParts.getWidth.TextBox(14)}
                    maxLength={8}
                    value={form.txtTAK}
                    onFocus={txtTakOnFocus}
                    onChange={koTakOnChange}
                    onBlur={txtTakOnBlur}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtTAK_asuta"
                    name="txtTAK_asuta"
                    width={PkgBasicParts.getWidth.TextBox(14)}
                    maxLength={8}
                    value={form.txtTAK_asuta}
                    onChange={handleForm}
                    tabIndex={-1}
                    readOnly={true}
                    style={{ display:"none", textAlign: "right"}}
                  />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 合価 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblGOK"
                    value="合価:&nbsp"
                    width={PkgBasicParts.getWidth.Label(7)}
                  />
                  <PkgBasicParts.ClsBaseTextBoxForInteger
                    id="txtGOK"
                    name="txtGOK"
                    width={PkgBasicParts.getWidth.TextBox(14)}
                    maxLength={10}
                    value={form.txtGOK}
                    onFocus={txtGokOnFocus}
                    onChange={koTakOnChange}
                    onBlur={txtGokOnBlur}
                  />
                </div>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 在再フラグ・ラジオボタン */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblZSBFLG"
                    value="在再フラグ:&nbsp"
                    width={PkgBasicParts.getWidth.Label(13)}
                  />
                  <PkgBasicParts.ClsBaseOptionButton
                    id="optZSBFLG1"
                    name="optZSBFLG"
                    width={PkgBasicParts.getWidth.OptionButton(8)}
                    option={optZSBFLG[0]}
                    valueIndex={0}
                    displayIndex={1}
                    value={form.optZSBFLG}
                    onChange={optZsbFlgOnChange}
                  />
                  <PkgBasicParts.ClsBaseOptionButton
                    id="optZSBFLG2"
                    name="optZSBFLG"
                    width={PkgBasicParts.getWidth.OptionButton(16)}
                    option={optZSBFLG[1]}
                    valueIndex={0}
                    displayIndex={1}
                    value={form.optZSBFLG}
                    onChange={optZsbFlgOnChange}
                  />
                </div>
              </div>
            </PkgBasicParts.ClsBaseGroupBox>
          </div>
        </div>
        <div className="row" style={{ marginTop: 15 }}>
          <div className="col-7">
            <div className="form-row">
              {/* 品目コード*/}
              <PkgBasicParts.ClsBaseLabel
                id="lblHINMOKU_CD"
                value="品目コード:&nbsp"
                width={PkgBasicParts.getWidth.Label(14)}
              />
              <PkgBasicParts.ClsBaseTextBox
                id="txtHINMOKU_CD"
                name="txtHINMOKU_CD"
                width={PkgBasicParts.getWidth.TextBox(8)}
                maxLength={8}
                value={form.txtHINMOKU_CD}
                onChange={ediOnChange}
                onBlur={btnHinmokuCdOnBlur}
              />
              <PkgBasicParts.ClsAtaiListButton
                id="btnHINMOKU_CD"
                onClick={btnHinmokuCdOnClick}
              />
              <DlgG32Z010010.Dialog props={dlgG32Z010010} />
              <span className="form-item">
                {/* カナ品名 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblKNA"
                  value="カナ品名:&nbsp"
                  width={PkgBasicParts.getWidth.Label(10)}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtKNA"
                  name="txtKNA"
                  width={PkgBasicParts.getWidth.TextBox(50)}
                  maxLength={50}
                  value={form.txtKNA}
                  onChange={handleForm}
                  tabIndex={-1}
                  readOnly={true}
                />
                {/* 単位 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblTAN"
                  value="単位:&nbsp"
                  width={PkgBasicParts.getWidth.Label(6)}
                  style={{ marginLeft: 5 }}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtTAN"
                  name="txtKNA"
                  width={PkgBasicParts.getWidth.TextBox(3)}
                  maxLength={3}
                  value={form.txtTAN}
                  onChange={handleForm}
                  tabIndex={-1}
                  readOnly={true}
                />
              </span>
            </div>
            <div className="form-row">
              <div className="form-item">
                {/* 数量 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblSUU"
                  value="数量:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBaseTextBoxForNumber
                  id="txtSUU"
                  name="txtSUU"
                  width={PkgBasicParts.getWidth.TextBox(11)}
                  maxLength={6}
                  value={form.txtSUU}
                  decimalPlace={1}
                  onChange={ediOnChange}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtSUU_asuta"
                  name="txtSUU_asuta"
                  width={PkgBasicParts.getWidth.TextBox(11)}
                  maxLength={6}
                  value={form.txtSUU_asuta}
                  onChange={handleForm}
                  tabIndex={-1}
                  readOnly={true}
                  style={{ textAlign: "right", display:"none" }}
                />
              </div>
            </div>
          </div>
          <div className="col-5" style={{ marginLeft: -80 }}>
            <div className="form-row">
              <div className="form-item">
                {/* 物流要再送 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblBUTUYOUSAISO"
                  value="物流要再送:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBasePullDownList
                  id="pdlBUTUYOUSAISO"
                  name="pdlBUTUYOUSAISO"
                  width={PkgBasicParts.getWidth.PullDownList(8)}
                  options={listPdlBUTUYOUSAISO}
                  valueIndex={1}
                  displayIndex={0}
                  value={form.pdlBUTUYOUSAISO}
                  onChange={pdlYousaisoOnChange}
                />
              </div>
            </div>
            <div className="form-row">
              <div className="form-item">
                {/* ＥＤＩ要再送 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblEDIYOUSAISO"
                  value="ＥＤＩ要再送:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBasePullDownList
                  id="pdlEDIYOUSAISO"
                  name="pdlEDIYOUSAISO"
                  width={PkgBasicParts.getWidth.PullDownList(8)}
                  options={listPdlEDIYOUSAISO}
                  valueIndex={1}
                  displayIndex={0}
                  value={form.pdlEDIYOUSAISO}
                  onChange={pdlYousaisoOnChange}
                />
              </div>
            </div>
          </div>
        </div>
        <div className="row" style={{ marginTop: -2 }}>
          <div className="col-3">
            <div className="form-row">
              <div className="form-item" style={{ marginTop: 5 }}>
                {/* 数量（変更） */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblHEN_SUU"
                  value="数量（変更）:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBaseTextBoxForNumber
                  id="txtHEN_SUU"
                  name="txtHEN_SUU"
                  width={PkgBasicParts.getWidth.TextBox(11)}
                  maxLength={6}
                  value={form.txtHEN_SUU}
                  decimalPlace={1}
                  onChange={ediOnChange}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtHEN_SUU_asuta"
                  name="txtHEN_SUU_asuta"
                  width={PkgBasicParts.getWidth.TextBox(11)}
                  maxLength={6}
                  value={form.txtHEN_SUU_asuta}
                  onChange={handleForm}
                  tabIndex={-1}
                  readOnly={true}
                  style={{ textAlign: "right", display:"none" }}
                />
              </div>
            </div>
            </div>
            <div className="col-9" style={{ marginTop: 10 , marginLeft: -50 }}>
            {/* 枠 */}
            <PkgBasicParts.ClsBaseGroupBox
              style={{ position: "relative", marginLeft: -5 }}
              height={115}
              width={550}
            >
              <div
                style={{
                  position: "absolute",
                  top: -12,
                  left: 5,
                  backgroundColor: "var(--body-background-color)",
                }}
              >
                <span className="form-item">
                  {/* 購入情報活性非活性用 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="kounyujyohoKasseiHikassei"
                    value={String(form.kounyujyohoKasseiHikassei)}
                    width={0}
                    style={{display:"none"}}
                  />
                  {/* 購入情報 */}
                  <PkgBasicParts.ClsBaseCheckBox
                    id="chkKOUNYUJYOHOU_FLG"
                    name="chkKOUNYUJYOHOU_FLG"
                    option={chkKOUNYUJYOHOU_FLG}
                    valueIndex={0}
                    displayIndex={1}
                    value={form.chkKOUNYUJYOHOU_FLG}
                    onChange={chkKounyuJyohouFlgOnChange}
                  />
                </span>
              </div>
              <div className="form-row" style={{ marginTop: 15 }}>
                <span className="form-item">
                  {/* 要求番号 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblYOUBAN"
                    value="要求番号:&nbsp"
                    width={PkgBasicParts.getWidth.Label(14)}
                  />
                  <PkgBasicParts.ClsBasePullDownList
                    id="pdlYOUBAN"
                    name="pdlYOUBAN"
                    width={PkgBasicParts.getWidth.PullDownList(7)}
                    options={listPdlYOUBAN}
                    valueIndex={1}
                    displayIndex={0}
                    value={form.pdlYOUBAN}
                    onChange={pdlYousaisoOnChange}
                  />
                </span>
                <span className="form-item">
                  {/* 要求者 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblYKM"
                    value="要求者:&nbsp"
                    width={PkgBasicParts.getWidth.Label(8)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtYKM"
                    name="txtYKM"
                    width={PkgBasicParts.getWidth.TextBox(12)}
                    maxLength={6}
                    value={form.txtYKM}
                    onChange={handleForm}
                  />
                  <PkgBasicParts.ClsAtaiListButton
                    id="btnYKM"
                    onClick={btnYKMOnClick}
                  />
                  {/* eslint-disable-next-line */}
                  <DlgG32Z040010_09.Dialog props={dlgG32Z040010_09} />
                </span>
                <span className="form-item">
                  {/* ＴＥＬ */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblYKSTEL"
                    value="ＴＥＬ:&nbsp"
                    width={PkgBasicParts.getWidth.Label(8)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtYKSTEL"
                    name="txtYKSTEL"
                    width={PkgBasicParts.getWidth.TextBox(12)}
                    maxLength={12}
                    value={form.txtYKSTEL}
                    onChange={handleForm}
                  />
                </span>
              </div>
              <div className="form-row">
                <span className="form-item">
                  {/* 調達期間 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblTYOTATU_KIKAN"
                    value="調達期間:&nbsp"
                    width={PkgBasicParts.getWidth.Label(14)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtTYOTATU_KIKAN"
                    name="txtTYOTATU_KIKAN"
                    width={PkgBasicParts.getWidth.TextBox(3)}
                    maxLength={3}
                    value={form.txtTYOTATU_KIKAN}
                    onChange={handleForm}
                    tabIndex={-1}
                    readOnly={true}
                  />
                </span>
                <span className="form-item">
                  {/* ＰＡＳ */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblPAS"
                    value="ＰＡＳ:&nbsp"
                    width={PkgBasicParts.getWidth.Label(9)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtPAS"
                    name="txtPAS"
                    width={PkgBasicParts.getWidth.TextBox(3)}
                    maxLength={3}
                    value={form.txtPAS}
                    onChange={handleForm}
                  />
                </span>
              </div>
              <div className="form-row">
                <div className="form-item">
                  {/* 指定事項有無 */}
                  <PkgBasicParts.ClsBaseLabel
                    id="lblSTIJIKUMU"
                    value="指定事項有無:&nbsp"
                    width={PkgBasicParts.getWidth.Label(14)}
                  />
                  <PkgBasicParts.ClsBaseTextBox
                    id="txtSTIJIKUMU"
                    name="txtSTIJIKUMU"
                    width={PkgBasicParts.getWidth.TextBox(4)}
                    maxLength={2}
                    value={form.txtSTIJIKUMU}
                    onChange={handleForm}
                    tabIndex={-1}
                    readOnly={true}
                  />
                  <span className="form-item">
                    {/* 指定１ */}
                    <PkgBasicParts.ClsBaseLabel
                      id="lblSTJ001"
                      value="指定１:&nbsp"
                      width={PkgBasicParts.getWidth.Label(8)}
                    />
                    <PkgBasicParts.ClsBaseTextBox
                      id="txtSTJ001"
                      name="txtSTJ001"
                      width={PkgBasicParts.getWidth.TextBox(6)}
                      maxLength={6}
                      value={form.txtSTJ001}
                      onChange={handleForm}
                    />
                  </span>
                  <span className="form-item">
                    {/* 指定２ */}
                    <PkgBasicParts.ClsBaseLabel
                      id="lblSTJ002"
                      value="指定２:&nbsp"
                      width={PkgBasicParts.getWidth.Label(8)}
                    />
                    <PkgBasicParts.ClsBaseTextBox
                      id="txtSTJ002"
                      name="txtSTJ002"
                      width={PkgBasicParts.getWidth.TextBox(6)}
                      maxLength={6}
                      value={form.txtSTJ002}
                      onChange={handleForm}
                    />
                  </span>
                  <span className="form-item">
                    {/* 指定３ */}
                    <PkgBasicParts.ClsBaseLabel
                      id="lblSTJ003"
                      value="指定３:&nbsp"
                      width={PkgBasicParts.getWidth.Label(8)}
                    />
                    <PkgBasicParts.ClsBaseTextBox
                      id="txtSTJ003"
                      name="txtSTJ003"
                      width={PkgBasicParts.getWidth.TextBox(6)}
                      maxLength={6}
                      value={form.txtSTJ003}
                      onChange={handleForm}
                    />
                  </span>
                </div>
              </div>
            </PkgBasicParts.ClsBaseGroupBox>
            
          </div>
            <div className="form-row">
              <div className="form-item">
                {/* 減数量 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblGENSUU"
                  value="減数量:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBaseTextBoxForNumber
                  id="txtGENSUU"
                  name="txtGENSUU"
                  width={PkgBasicParts.getWidth.TextBox(11)}
                  maxLength={6}
                  value={form.txtGENSUU}
                  decimalPlace={1}
                  onChange={handleForm}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtGENSUU_asuta"
                  name="txtGENSUU_asuta"
                  width={PkgBasicParts.getWidth.TextBox(11)}
                  maxLength={6}
                  value={form.txtGENSUU_asuta}
                  onChange={handleForm}
                  tabIndex={-1}
                  readOnly={true}
                  style={{ textAlign: "right", display:"none" }}
                />
              </div>
            </div>
            <div className="form-row">
              <div className="form-item">
                {/* ａｂ長 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblAB_LEN"
                  value="ａｂ長:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBaseTextBoxForNumber
                  id="txtAB_LEN"
                  name="txtAB_LEN"
                  width={PkgBasicParts.getWidth.TextBox(12)}
                  maxLength={7}
                  value={form.txtAB_LEN}
                  decimalPlace={1}
                  onChange={ediOnChange}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtAB_LEN_asuta"
                  name="txtAB_LEN_asuta"
                  width={PkgBasicParts.getWidth.TextBox(12)}
                  maxLength={7}
                  value={form.txtAB_LEN_asuta}
                  onChange={handleForm}
                  tabIndex={-1}
                  readOnly={true}
                  style={{ textAlign: "right", display:"none" }}
                />
              </div>
            </div>
            <div className="form-row">
              <div className="form-item">
                {/* 仕入先コード */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblSIR_CD"
                  value="仕入先コード:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtSIR_CD"
                  name="txtSIR_CD"
                  width={PkgBasicParts.getWidth.TextBox(3)}
                  maxLength={3}
                  value={form.txtSIR_CD}
                  onChange={ediOnChange}
                />
                <PkgBasicParts.ClsAtaiListButton
                  id="btnSIR_CD"
                  onClick={btnSirCdOnClick}
                />
                <DlgG32Z020010.Dialog props={dlgG32Z020010} />
              </div>
            </div>
            <div className="form-row">
              <div className="form-item">
                {/* 支給予定日 */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblSYOYTIJKISYK"
                  value="支給予定日:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtSYOYTIJKISYK"
                  name="txtSYOYTIJKISYK"
                  width={PkgBasicParts.getWidth.TextBox(10)}
                  maxLength={10}
                  value={form.txtSYOYTIJKISYK}
                  onChange={ediOnChange}
                />
              </div>
            </div>
            <div className="form-row">
              <div className="form-item">
                {/* 納入先住所コード */}
                <PkgBasicParts.ClsBaseLabel
                  id="lblNONYU_ADR_CD"
                  value="納入先住所コード:&nbsp"
                  width={PkgBasicParts.getWidth.Label(14)}
                />
                <PkgBasicParts.ClsBaseTextBox
                  id="txtNONYU_ADR_CD"
                  name="txtNONYU_ADR_CD"
                  width={PkgBasicParts.getWidth.TextBox(8)}
                  maxLength={8}
                  value={form.txtNONYU_ADR_CD}
                  onChange={ediOnChange}
                />
                <PkgBasicParts.ClsBaseLabel
                  id="lblNONYU_ADR_CDHyphen"
                  value="&nbsp-&nbsp"
                  width={PkgBasicParts.getWidth.Label(3)}
                />
                <PkgBasicParts.ClsAtaiListButton
                  id="btnNONYU_ADR_CD"
                  onClick={btnNonyuAdrCdOnClick}
                />
                {/* eslint-disable-next-line */}
                <DlgG32Z040010_08.Dialog props={dlgG32Z040010_08} />
              </div>
            </div>
              <div className="form-item" style={{ marginLeft: 20 }}>
    {/* 市町村コード（To） */}
    <PkgBasicParts.ClsBaseLabel
      id="lblSCS_CD"
      value="市町村コード（To）:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtSCS_CD"
      name="txtSCS_CD"
      width={PkgBasicParts.getWidth.TextBox(8)}
      maxLength={8}
      value={form.txtSCS_CD}
      onChange={ediOnChange}
    />
    <PkgBasicParts.ClsBaseLabel
      id="lblSCS_CDHyphen"
      value="&nbsp-&nbsp"
      width={PkgBasicParts.getWidth.Label(3)}
    />
    <PkgBasicParts.ClsAtaiListButton
      id="btnSCS_CD"
      onClick={btnSITYOUOnClick}
    />
    <DlgG32Z040010_20.Dialog props={dlgG32Z040010_20} />
  </div>
  <div className="form-item" style={{ marginLeft: 20 }}>
    {/* 備考 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblBKO"
      value="備考:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtBKO"
      name="txtBKO"
      width={PkgBasicParts.getWidth.TextBox(12)}
      maxLength={7}
      value={form.txtBKO}
      onChange={handleForm}
    />
  </div>
  <div className="form-item" style={{ marginLeft: 20 }}>
    {/* ロット番号 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblLOT_NO"
      value="ロット番号:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtLOT_NO"
      name="txtLOT_NO"
      width={PkgBasicParts.getWidth.TextBox(8)}
      maxLength={20}
      value={form.txtLOT_NO}
      onChange={handleForm}
    />
  </div>
  <div className="form-item" style={{ marginLeft: 20 }}>
    {/* 単価（現場調達品） */}
    <PkgBasicParts.ClsBaseLabel
      id="lblGentyoTAN"
      value="単価（現場調達品）:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtGentyoTAN"
      name="txtGentyoTAN"
      width={PkgBasicParts.getWidth.TextBox(12)}
      maxLength={10}
      value={form.txtGentyoTAN}
      onChange={handleForm}
    />
  </div>
  <div className="form-item" style={{ marginLeft: 20 }}>
    {/* 購入申請番号 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblKONYU_SHINSEI_NO"
      value="購入申請番号:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtKONYU_SHINSEI_NO"
      name="txtKONYU_SHINSEI_NO"
      width={PkgBasicParts.getWidth.TextBox(8)}
      maxLength={20}
      value={form.txtKONYU_SHINSEI_NO}
      onChange={handleForm}
    />
  
</div>
<div className="form-row">
  <div className="form-item">
    {/* 送付先郵便番号 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblYBN_NO"
      value="送付先郵便番号:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtYBN_NO"
      name="txtYBN_NO"
      width={PkgBasicParts.getWidth.TextBox(8)}
      maxLength={8}
      value={form.txtSFS_YBB}
      onChange={ediOnChange}
    />
    <PkgBasicParts.ClsBaseLabel
      id="lblYBN_NOHyphen"
      value="&nbsp-&nbsp"
      width={PkgBasicParts.getWidth.Label(3)}
    />
    <PkgBasicParts.ClsAtaiListButton
      id="btnYBN_NO"
      onClick={btnSFSYBNOnClick}
    />
    <DlgG32Z040010_19.Dialog props={dlgG32Z040010_19} />
  </div>
  <div className="form-item" style={{ marginLeft: 20 }}>
    {/* 送付先都道府県 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblTDHKN_KANJI"
      value="送付先都道府県:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtTDHKN_KANJI"
      name="txtTDHKN_KANJI"
      width={PkgBasicParts.getWidth.TextBox(8)}
      maxLength={20}
      value={form.txtSFS_TDFK}
      onChange={handleForm}
    />
  </div>
</div>
<div className="form-row">
  <div className="form-item">
    {/* 送付先市区町村 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblSIKGNCHSN_KANJI"
      value="送付先市区町村:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtSIKGNCHSN_KANJI"
      name="txtSIKGNCHSN_KANJI"
      width={PkgBasicParts.getWidth.TextBox(20)}
      maxLength={50}
      value={form.txtSfsSikOzaAza}
      onChange={handleForm}
    />
  </div>
</div>
<div className="form-row">
  <div className="form-item">
    {/* 送付先住所１ */}
    <PkgBasicParts.ClsBaseLabel
      id="lblSFS_ADR1"
      value="送付先住所１:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtSFS_ADR1"
      name="txtSFS_ADR1"
      width={PkgBasicParts.getWidth.TextBox(20)}
      maxLength={50}
      value={form.txtSFS_ADR1}
      onChange={handleForm}
    />
  </div>
  <div className="form-item" style={{ marginLeft: 20 }}>
    {/* 送付先電話番号 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblSFS_TEL"
      value="送付先電話番号:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtSFS_TEL"
      name="txtSFS_TEL"
      width={PkgBasicParts.getWidth.TextBox(12)}
      maxLength={20}
      value={form.txtSFS_TEL}
      onChange={handleForm}
    />
  </div>
</div>
<div className="form-row">
  <div className="form-item">
    {/* 送付先住所２ */}
    <PkgBasicParts.ClsBaseLabel
      id="lblSFS_ADR2"
      value="送付先住所２:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtSFS_ADR2"
      name="txtSFS_ADR2"
      width={PkgBasicParts.getWidth.TextBox(20)}
      maxLength={50}
      value={form.txtSFS_ADR2}
      onChange={handleForm}
    />
  </div>
</div>
<div className="form-row">
  <div className="form-item">
    {/* 送付先メールアドレス */}
    <PkgBasicParts.ClsBaseLabel
      id="lblSFS_MAILADDRESS"
      value="送付先メールアドレス:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtSFS_MAILADDRESS"
      name="txtSFS_MAILADDRESS"
      width={PkgBasicParts.getWidth.TextBox(40)}
      maxLength={100}
      value={form.txtSFS_MAILADDRESS}
      onChange={handleForm}
    />
  </div>
</div>
<div className="form-row">
  <div className="form-item">
    {/* 記事 */}
    <PkgBasicParts.ClsBaseLabel
      id="lblKJITKN"
      value="記事:&nbsp"
      width={PkgBasicParts.getWidth.Label(14)}
    />
    <PkgBasicParts.ClsBaseTextBox
      id="txtKJITKN"
      name="txtKJITKN"
      width={PkgBasicParts.getWidth.TextBox(40)}
      maxLength={100}
      value={form.txtKJITKN}
      onChange={handleForm}
    />
  </div>
</div>
            
            
          
        </div>
      </PkgKakuchoParts.ClsMainContents>
      <PkgKakuchoParts.ClsFormFooter buttons={footerButtons} />
      </div>
    </>
  );
}
