「31603E_受渡書作成」のサーバ処理について
修正内容の詳細は設計書から確認できますが、概要だけ記載しておきます。
 
◆修正対象処理
　○物品費ＣＳＶ作成：修正対象
　○請負費ＣＳＶ作成：修正対象
　×受渡CSVデータ作成 ：対象外
 
◆修正内容
　クライアント側への戻り値を変更し、下り電文にCSVデータを設定して返していたところを
　CSVファイル自体を返すように修正
　※クライアントからの呼び出しがcallGateway⇒callDownloadへ変更される
 
◆修正対象ソース
　他に修正が必要ないかはご確認をお願いします
　java\src\main\java\jp\co\nttcom\nn\business\n5\n531\n5316030\logic\UkewatashisyoSakuseiLogic.java
　
◆参考ソース
　CSVファイルを返している処理です。参考にしてください
　java\src\main\java\jp\co\nttcom\nn\business\n5\n531\n5316020\logic\SyonaiUtiwakesyoSakuseiLogic.java


package jp.co.nttcom.nn.business.n5.n531.n5316030.logic;

import java.io.File;
import java.io.FileNotFoundException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import jp.co.nttcom.nn.base.cm.report.ReportCreator;
import jp.co.nttcom.nn.base.util.DateUtil;
import jp.co.nttcom.nn.base.util.FileIoUtil;
import jp.co.nttcom.nn.base.util.FileUtil;
import jp.co.nttcom.nn.base.util.SystemUtil;
import jp.co.nttcom.nn.business.n5.common.N5300000_CommonLogic;
import jp.co.nttcom.nn.business.n5.n531.entity.N5BreakdownOfWorkOrderListVO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5BreakdownOfWorkOrderVO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Budukwset_IdEntity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Budzog02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buibututk02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buibutuwkbkj01DTO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5BuibykgiajsnjyoEntity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buigiassnrrk01DTO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buigiassnrrk01Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buikss02DTO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buikss02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buisgiukh02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buisgiuts02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buistbukwjyo58Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buiutwgiassn01DTO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buiutwgiassn01Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buiutwuwslnk01Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buiuws02DTO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Buiuws02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5CommonResponseVO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5JikkoHanteiCdEntity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5KkiscdCnvEntity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5RestClientVO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Skifkj02DTO;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Skifkj02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5SkikdkYmhit58Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Skiksksib02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Skikyktks02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Skisissyukekjsn58Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5Skitukith02Entity;
import jp.co.nttcom.nn.business.n5.n531.entity.N5TsysKsiCtlEntity;
import jp.co.nttcom.nn.business.n5.n531.entity.NNCQS001_02OutParamDTO;
import jp.co.nttcom.nn.business.n5.n531.entity.NnWaNendoCd02Entity;
import jp.co.nttcom.scorpion.bean.Message;
import jp.co.nttcom.scorpion.business.logic.AbstractBusinessLogic;
import jp.co.nttcom.scorpion.exception.BusinessException;
import jp.co.nttcom.scorpion.exception.SystemException;
import jp.co.nttcom.scorpion.exception.UniqueKeyException;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.ProcessingException;

import org.glassfish.jersey.client.ClientProperties;
import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;

/**
 * <p>[システム名] グループ共通IT(施工管理)</p>
 * <p>[サブシステム名] 一般計画工事</p>
 * <p>[業務名] 受渡書作成</p>
 * <p>[プログラム名] 受渡書作成</p>
 * <p>[プログラムID] 316030</p>
 * <p>[会社識別] 共通<p>
 * <p>[概 要] 受渡書作成ロジック</p>
 * <p>[詳 細] 受渡書作成に連なる一連の処理を行うロジッククラス。</p>
 * <p>[備 考] </p>
 * <p>[環 境] OracleJDK "1.8.0_102"</p>
 * @since 2.1
 * <p>Copyright(c) NTT COMWARE CORPORATION 2007,2022</p>
 * <p>[作成日] 2007/02/28</p>
 * @author NTT COMWARE 立石 憲司
 * <p>[履歴]  [修正日]    [修正者]    [管理番号]  [修正内容]</p>
 * <p>[履歴]  2007/02/28  立石憲司  ４次１期開発  新規作成</p>
 * <p>[履歴]  2007/06/19  立石憲司  故施41P0-0029 工事一覧に関する<br>
 * エンティティへの引数に工事計画番号を追加</p>
 * <p>[履歴]  2007/07/03  立石憲司  故施41P0-0306 物品費設定ストアドの<br>
 * 実行条件変更</p>
 * <p>[履歴]  2007/07/18  立石憲司  設施41-0025   帳票7年保存対応</p>
 * <p>[履歴]  2007/07/24  立石憲司  設施41-0025   帳票7年保存対応（再）</p>
 * <p>[履歴]  2007/07/24  立石憲司  設施41-0025   帳票7年保存対応（再々）</p>
 * <p>[履歴]  2007/09/05  大勝宏美  故施41O2E-0076 受渡データ作成時の必須入力チェック<br>
 * メッセージ修正</p>
 * <p>[履歴]  2007/09/22  青木孝幸  故施41O2E-0148 受渡データ作成時の入力チェック</p>
 * <p>[履歴]  2007/09/25  大勝宏美  故施41O2E-0148 所内・共通詳細の会計組織コード初期設定</p>
 * <p>[履歴]  2007/09/25  大勝宏美  故施41E-0593   (暫定対処)損益工事時の委託費0円チェックを外す</p>
 * <p>[履歴]  2007/09/25  青木孝幸  故施41E-0593  帳票の合計欄追加</p>
 * <p>[履歴]  2007/10/03  大勝宏美  故施41M-0028  受渡FD作成で総合工事番号の新旧コード変換</p>
 * <p>[履歴]  2007/11/21  青木孝幸  故施41M-0018  個別契約費、共通アイテムのカスケード変更</p>
 * <p>[履歴]  2007/12/04  青木孝幸  仕施41M-0018  按分対処に伴う変更</p>
 * <p>[履歴]  2007/12/26  立石憲司  仕施41M-0025  受渡書作成処理の変更対処について</p>
 * <p>[履歴]  2008/01/24  全一宇    ４次４期開発  受渡FDインタフェース変更伴う修正</p>
 * <p>[履歴]  2008/02/20  全一宇    ４次５期開発  建設工事時の委託費0円チェックを外す</p>
 * <p>[履歴]  2008/03/18  大勝宏美  仕施44-0002   受渡FD出力時に増減科目28、88データが<br>
 * １対１でない場合処理続行の確認を行うよう修正</p>
 * <p>[履歴]  2008/04/16  王  春書  仕施44-0007   経理IFのＮＷ対応に伴う修正</p>
 * <p>[履歴]  2008/04/18  王  春書  仕施44-0011   仕施44-0011に伴う修正</p>
 * <p>[履歴]  2008/04/21  広瀬  学  仕施44-0012   仕施44-0012に伴う修正</p>
 * <p>[履歴]  2008/04/30  広瀬  学  仕施44-0013   資産チェックFD機能(現行仕様と同様の<br>
 * 受渡FD出力機能)を追加</p>
 * <p>[履歴]  2008/05/28  王  春書  故施45M-0005  バックアップフォルダにFDファイルをコピー</p>
 * <p>[履歴]  2008/06/25  王  春書  故施45M-0027  受渡書.金額が0の場合は、スペース埋め</p>
 * <p>[履歴]  2008/06/25  王  春書  故施45M-0027  リテストより修正不要だった為、ソースを戻す</p>
 * <p>[履歴]  2009/02/16  青木孝幸  仕施49M-0007  会計組織コードの存在チェック追加（経理不正対応）</p>
 * <p>[履歴]  2009/04/17  青木孝幸  仕施49M-0020  会計組織コードの存在チェック(東のみチェック）/p>
 * <p>[履歴]  2010/08/31  中嶋  宏  一般施工58-004 受渡データ作成時のチェックを追加</p>
 * <p>[履歴]  2010/08/31  中嶋  宏  一般施工58-005 項番詳細画面に備考１、２の項目を追加</p>
 * <p>[履歴]  2010/08/31  中嶋  宏  一般施工58-006 保管課コードの出力内容を管理責任者コード＋保管課に変更</p>
 * <p>[履歴]  2010/09/17  屋納正樹  仕施58-0001   受渡FD出力の取得日の設定を修正</p>
 * <p>[履歴]  2010/10/20  谷　昌史  仕施58-0009   受渡データ作成時、契約締結情報が変更されている<br>
 * 場合、確認メッセージを表示するように修正</p>
 * <p>[履歴]  2010/11/10  谷　昌史  仕施58-0020   開始前設備、開始設備の判定基準を変更</p>
 * <p>[履歴]  2017/04/14  村山　優弥  9次1期開発 東西同一化に伴う修正</p>
 * <p>[履歴]  2017/06/23  元木　愛  設計-H29-CW-018 バッチから呼出しの際、下り電文のエラー内容に""（空白）を設定</p>
 * <p>[履歴]  2017/08/25  石井邦明   bg91-0223  7年保存バッチ起動実行で複数センターで同時に実行した際、CSVファイル名が重複する不具合修正</p>
 * <p>[履歴]  2017/12/08  玉城  清春 9次2期開発 稼働開始年度設定の改善対応</p>
 * <p>[履歴]  2018/10/31  浅間  拓也 9次4期開発 内訳書－設備情報の紐付け対応</p>
 * <p>[履歴]  2018/11/30  浅間  拓也 仕変-94-0000145 N-GAIAへのリクエストパラメータの変更</p>
 * <p>[履歴]  2018/11/30  浅間  拓也 仕変-94-0000089 物品要求GAIA受信情報テーブルへの数量カラム追加に伴う修正</p>
 * <p>[履歴]  2018/11/30  浅間  拓也 仕変-94-0000159 N-GAIAとのIF仕様書制定に伴う修正</p>
 * <p>[履歴]  2018/12/17  浅間  拓也 仕変-94-0000232 レスポンスヘッダのステータスコードの物理名を修正</p>
 * <p>[履歴]  2019/01/25  浅間  拓也 仕変-94-0000283 レスポンスヘッダのステータスコードの物理名を再修正</p>
 * <p>[履歴]  2019/01/28  浅間  拓也 bg94-0041       GAIA送信における内訳書CSVとの差分対応</p>
 * <p>[履歴]  2022/06/30  笹川  壮史 11次2期開発 グループ共通IT（財務）との連携開始に伴う新コード体系変更対応および承認機能追加</p>
 * <p>[履歴]  2022/12/23  鈴木  康太 仕変-112-0001434 取得工事計画番号から取得ＷＢＳへの名称と取得方法の変更</p>
 * <p>[履歴]  2022/12/23  大郷  正隆 仕変-112-0001434 ＧＡＩＡ送信、財務承認時の任意取得時のチェック追加</p>
 */
public class UkewatashisyoSakuseiLogic extends AbstractBusinessLogic {

    /**
     * デバッグログ。
     */
    private static final Log log = LogFactory.getLog(UkewatashisyoSakuseiLogic.class);

    /***********************************************************************
     * 電文項目ＩＤ定義(Bizのpkg316030Conf.crsのUWS_DEFINITIONに対応する)
     ***********************************************************************/
    /** 施工組織コード。*/
    private static final String D_SKS_CD = "SKS_CD";
    /** 総合工事番号。*/
    private static final String D_SKJBAN = "SKJBAN";
    /** 総合工事名。*/
    private static final String D_SKJ_NM = "SKJ_NM";
    /** 所外所内区分。*/
    private static final String D_SGISNIKBN = "SGISNIKBN";
    /** システムコード。*/
    private static final String D_SYS_CD = "SYS_CD";
    /** 含み工事一覧。*/
    private static final String D_LIST_FKJ = "LIST_FKJ";
    /** 含み工事名。*/
    private static final String D_KOJ_NM = "KOJ_NM";
    /** 損建区分。*/
    private static final String D_SOEKBN = "SOEKBN";
    /** 工事計画番号。*/
    private static final String D_KKN = "KKN";
    /** 内訳書フラグ。*/
    private static final String D_UTSFLG = "UTSFLG";
    /** 受渡書フラグ。*/
    private static final String D_UWSFLG = "UWS_FLG";
    /** 開始年月。*/
    private static final String D_SYM = "SYM";
    /** 委託費。*/
    private static final String D_ITH = "ITH";
    /** 個別契約費。*/
    private static final String D_SEB_HI = "SEBGAK";
    /** 算定適用年月。*/
    private static final String D_SNTTKY_YM = "SNTTKY_YM";
    /** 工事計画番号一覧。*/
    private static final String D_LIST_KKN = "LIST_KKN";
    /** 接続ＩＤ一覧。 */
    private static final String D_LIST_UKWSET_ID = "LIST_UKWSET_ID";
    /** 受渡FD情報一覧。*/
    private static final String D_LIST_UKWFD_JYO = "LIST_UKWFD_JYO";
    /** 物品CSV一覧。*/
    private static final String D_LIST_BUPPIN = "LIST_BUPPIN";
    /** 請負費CSV一覧。*/
    private static final String D_LIST_UKEOI = "LIST_UKEOI";
    /** 更新カウンタ一覧。*/
    private static final String D_LIST_UPD_CNT = "LIST_UPD_CNT";
    /** 処理区分。*/
    private static final String D_SYORI_KBN = "PRCKBN";
    /** ビル収容区域コード。*/
    private static final String D_BILSKK_CD = "BILSKK_CD";
    /** 項番。*/
    private static final String D_KBA = "KBA";
    /** 初期表示時項番。*/
    private static final String D_KBA_SHOKI = "KBA_SHOKI";
    /** 増減科目。*/
    private static final String D_ZOG = "ZOG";
    /** 共通アイテム。*/
    private static final String D_ITM = "ITM";
    /** サービスコード。*/
    private static final String D_SV_CD = "SV_CD";
    /** 管理区分。*/
    private static final String D_MNGKBN = "MNGKBN";
    /** 設備。*/
    private static final String D_SBI = "SBI";
    /** 種目。*/
    private static final String D_SYU = "SYU";
    /** 細目。*/
    private static final String D_SMK = "SMK";
    /** 細分。*/
    private static final String D_SBN = "SBN";
    /** 所外所内フラグ。*/
    private static final String D_SGISNIFLG = "SGISNIFLG";
    /** 保管課コード。*/
    private static final String D_HKK_CD = "HKK_CD";
    /** 個別コード。*/
    private static final String D_KOB_CD = "KOB_CD";
    /** 個別略号。*/
    private static final String D_KOBRKG = "KOBRKG";
    /** 金額。*/
    private static final String D_GAK = "GAK";
    /** 物品費。*/
    private static final String D_BUTGAK = "BUTGAK";
    /** 請負額。*/
    private static final String D_UOIGAK = "UOIGAK";
    /** ペア番号。*/
    private static final String D_PEA = "PEA";
    /** 建設年度。*/
    private static final String D_KND = "KND";
    /** 数量。*/
    private static final String D_SRO001 = "SRO001";
    /** 請負費。*/
    private static final String D_UOIGAKU = "UOIGAK";
    /** 処理種別。*/
    private static final String D_SRICLS = "SRICLS";
    /** 共通詳細データ一覧。*/
    private static final String D_LIST_KSS = "LIST_KSS";
    /** 月別委託費情報データ一覧。*/
    private static final String D_LIST_TUK = "LIST_TUK";
    /** 受渡書種別。*/
    private static final String D_UWSCLS = "UWSCLS";
    /** 管理責任者氏名コード変更有無フラグ。*/
    private static final String D_MNGSKH_UMUFLG = "MNGSKH_UMUFLG";
    /** 取得責任者氏名コード。*/
    private static final String D_STKMNG_NM_CD = "STKMNG_NM_CD";
    /** 管理責任者氏名コード。*/
    private static final String D_MNGSKH_NM_CD = "MNGSKH_NM_CD";
    /** 管理責任者コード。*/
    private static final String D_MNGSKH_CD = "MNGSKH_CD";
    /** 投入年月。*/
    private static final String D_TUN_YM = "TUN_YM";
    /** 稼動開始年度。*/
    private static final String D_KSY = "KSY";       
    /** 取得年月。*/
    private static final String D_STK_YM = "STK_YM";
    /** 延稼動時間数。*/
    private static final String D_ENKTIM_SU = "ENKTIM_SU";
    /** 新設比率。*/
    private static final String D_SINHRT = "SINHRT";
    /** 撤去比率。*/
    private static final String D_TEKHRT = "TEKHRT";
    /** 撤去工事費。*/
    private static final String D_TEKKJH = "TEKKJH";
    /** 着工年月日。*/
    private static final String D_CKOYMD = "CKOYMD";
    /** 完成年月日。*/
    private static final String D_KNEYMD = "KNEYMD";
    /** 竣工年月日。*/
    private static final String D_SNKYMD = "SNKYMD";
    /** 受渡年月日。*/
    private static final String D_UKWYMD = "UKWYMD";
    /** 請負会社名。*/
    private static final String D_UKOCOM = "UKOCOM";
    /** 作成者名。*/
    private static final String D_SAKSYA_NM = "SAKSYA_NM";
    /** 作業通知又は監督通知番号。*/
    private static final String D_SGTMATKTB = "SGTMATKTB";
    /** 記事１。*/
    private static final String D_KJI001 = "KJI001";
    /** 記事２。*/
    private static final String D_KJI002 = "KJI002";
    /** 記事３。*/
    private static final String D_KJI003 = "KJI003";
    /** 記事４。*/
    private static final String D_KJI004 = "KJI004";
    /** 会計組織コード。*/
    private static final String D_KKISCD = "KKISCD";
    /** 形態１。*/
    private static final String D_KTI001 = "KTI001";
    /** 形態２。*/
    private static final String D_KTI002 = "KTI002";
    /** 償却可否。*/
    private static final String D_SYOKHI = "SYOKHI";
    /** 解消予定年月。*/
    private static final String D_KSHYTI_YM = "KSHYTI_YM";
    /** 項番データ一覧。*/
    private static final String D_LIST_KBADAT = "LIST_KBADAT";
    /** 増減科目コード一覧。*/
    private static final String D_LIST_ZOG = "LIST_ZOG";
    /** 登録件数。*/
    private static final String D_INS_CNT = "INS_CNT";
    /** 按分対象請負額。*/
    private static final String D_ANBUN_UOIGAKU = "ANBUN_UOIGAKU";
    /** 受渡FD作成エラー区分。*/
    private static final String D_FD_ERR_KBN = "FD_ERR_KBN";
    /** 業務管理番号一覧印刷下り電文.印刷イメージファイル名。*/
    private static final String D_PRNIMGFIL_NM = "PRNIMGFIL_NM";
    /** 帳票種別。 */
    private static final String D_SYRSBT = "SYRSBT";
    /** バッチ用帳票ファイル名。 */
    private static final String D_B_OUT_FILE_NAME = "OUT_FILE_NAME";
    /** バッチ帳票処理リターンコード。 */
    private static final String D_B_RTN = "RTN";
    /** バッチ帳票処理エラー内容。 */
    private static final String D_B_ERRNAI = "ERRNAI";

    /** 清算払請負費。 */
    private static final String D_LIST_SEB_HI = "LIST_SEB_HI";

    /** 清算払請負費。 */
    private static final String D_LIST_SEB_HI_UPDATE = "LIST_SEB_HI_UPDATE";

    // 仕施44-0002対応による追加 --start
    /**
     * ペア番号チェック有無("0":チェックなし、"1":チェックあり)
     */
    private static final String D_CHECKFLG = "CHECKFLG";
    // 仕施44-0002対応による追加 --end

    // 仕施44-0007対応による追加 --start
    
    /** 受渡書出力形態定数。 */
    private static final String D_OUT_KTI = "OUT_KTI";

    /** バージョン。 */
    private static final String D_VERSION = "VERSION";

    /** GAIA規制区分。 */
    private static final String D_GAIA_KSI_KBN = "GAIA_KSI_KBN";
    
    /** 受渡CSVファイル出力形態定数。 */
    private static final String D_UWS_CSV_FILE_OUT_KTI = "UWS_CSV_FILE_OUT_KTI";
    
    /**受渡CSVファイル出力形態定数(1:CSV出力) */
    private static final String D_OUT_TMP_SAVE = "1";
    
    /** 受渡CSVファイル出力形態定数(2:NW流通) */
    private static final String D_OUT_SAVE = "2";

    /** アップロードファイル名。 */
    private static final String D_UPLOAD_FILE_NAME = "UPLOAD_FILE_NAME";

    /** ダウンロードファイル名。 */
    private static final String D_DOWNLOAD_FILE_NAME = "DOWNLOAD_FILE_NAME";
    // 仕施44-0007対応による追加 --end

    // 仕施44-0012対応による追加 --start
    /** 取得組織コード。*/
    private static final String D_SYTSCD = "SYTSCD";
    /** 取得ＷＢＳ。*/
    private static final String D_SYTKKN = "SYTKKN";
    // 仕施44-0012対応による追加 --end

    // 一般施工58 追加 start
    /** 備考１。*/
    private static final String D_BIKO1 = "BKO1";
    /** 備考２。*/
    private static final String D_BIKO2 = "BKO2";
    /**
     * 確認フラグ("0":確認なし、"1":確認あり)
     */
    private static final String D_KAKUNINFLG = "KAKUNINFLG";
    // 一般施工58 追加 end

    // 9次2期 add start
    /** 稼働開始日 */
    private static final String D_WORK_START_DD = "WORK_START_DD";
    // 9次2期 add end
    
    /** 取得日。*/
    private static final String D_SYT_DD = "SYT_DD";
    /** 施工組織名。*/
    private static final String D_SKS_NM = "SKS_NM";
    /** 実行可否フラグ*/
    private static final String D_JIKO_KAHI = "JIKO_KAHI_FLG";
    /** 承認者ＩＤ*/
    private static final String D_SYONINSYA_ID = "SYONINSYA_ID";
    /** 承認者名*/
    private static final String D_SYONINSYA_NM = "SYONINSYA_NM";
    
    /***********************************************************************
     * 列インデックス定義（SQLを変更した際は注意すること）
     * *********************************************************************/
    // 含み工事情報照会用--------------------------------------------------
    /** 損建区分。*/
    private static final int C_FKJ_SOE_KBN = 0;
    /** 工事計画番号。*/
    private static final int C_FKJ_KNN = 1;
    /** 含み工事名。*/
    private static final int C_FKJ_FKJ_NM = 2;
    /** 工期至。*/
    private static final int C_FKJ_KOK_ST = 3;
    /** 固定資産管理組織コード。*/
    private static final int C_FKJ_KOTEI_SISAN_CD = 4;
    /** 内訳書フラグ。*/
    private static final int C_FKJ_UTS_FLG = 5;
    /** 受渡書フラグ。*/
    private static final int C_FKJ_UWS_FLG = 6;
    /** 開始年月。*/
    private static final int C_FKJ_SYM = 7;
    /** 委託費合計。*/
    private static final int C_FKJ_ITH = 8;
    /** 個別契約費合計。*/
    private static final int C_FKJ_SEB_SUM = 9;
    /** 受渡書作成完了日付。*/
    private static final int C_FKJ_UWS_SAKUSEI_YMD = 10;
    /** 部門コード。*/
    private static final int C_FKJ_BUMON_CD = 11;
    /** GAIA送信区分。*/
    private static final int C_FKJ_GAIA_SSNKBN = 12;
    /** 承認フラグ。*/
    private static final int C_FKJ_SYONIN_FLG = 13;

    // 共通詳細存在チェック用-----------------------------------------------
    /* 受渡データ作成（316030002） */
    /** 取得責任者氏名コード。*/
    private static final int C_KSS_SONZAI_CHECK_STK_SKH_NM_CD = 0;
    /** 管理責任者氏名コード。*/
    private static final int C_KSS_SONZAI_CHECK_MNG_SKH_NM_CD = 1;
    /** 受渡年月日。*/
    private static final int C_KSS_SONZAI_CHECK_UWS_YMD = 2;
    /** 委託費。*/
    private static final int C_KSS_SONZAI_CHECK_ITK_HI = 3;
    /** 会計組織コード。*/
    private static final int C_KSS_SONZAI_CHECK_KKISCD = 4;

    /* 受渡CSVデータ作成（316030003） */
    /** 着工年月日。 */
    private static final int C_KSS_SONZAI_CHECK_CKOYMD = 5;
    /** 完成年月日。 */
    private static final int C_KSS_SONZAI_CHEKC_KNEYMD = 6;
    /** 請負会社名。 */
    private static final int C_KSS_SONZAI_CHECK_UKOCOM = 7;
    /** 作成者名。 */
    private static final int  C_KSS_SONZAI_CHECK_SAKSYA_NM = 8;
    /** 作業通知又は監督通知番号。 */
    private static final int C_KSS_SONZAI_CHECK_SGTMATKTB = 9;

    // 受渡CSV検索用-------------------------------------------------------

    /** 工事計画番号。 */
    private static final int C_UWS_FD_KKN = 3;
    /** 取得責任者氏名コード。*/
    private static final int C_UWS_FD_STK_SKH_NM_CD = 34;
    /** 管理責任者氏名コード。*/
    private static final int C_UWS_FD_MNG_SKH_NM_CD = 33;
    /** 管理区分。*/
    private static final int C_UWS_FD_MNG_KBN = 17;

    // 受渡書帳票検索用--------------------------------------------------

    /** 投入年月。*/
    private static final int C_UWS_TYOHYO_TONYU_YM = 0;
    /** 取得年月。*/
    private static final int C_UWS_TYOHYO_SYUTOKU_YM = 1;
    /** 延稼働時間。*/
    private static final int C_UWS_TYOHYO_ENKADO_JIKAN_SU = 2;
    /** 着工年月日。*/
    private static final int C_UWS_TYOHYO_TYAKKO_YMD = 3;
    /** 完成年月日。*/
    private static final int C_UWS_TYOHYO_KANSEI_YMD = 4;
    /** 竣工年月日。*/
    private static final int C_UWS_TYOHYO_SYUNKO_YMD = 5;
    /** 請負会社名。*/
    private static final int C_UWS_TYOHYO_UKEOI_COM_NM = 6;
    /** 作成者名。*/
    private static final int C_UWS_TYOHYO_SAKUSEISYA_NM = 7;
    /** 作業通知又は監督通知番号。*/
    private static final int C_UWS_TYOHYO_SAGYO_KANTOKU_BANGO = 8;
    /** 記事１。*/
    private static final int C_UWS_TYOHYO_KIJI1 = 9;
    /** 記事２。*/
    private static final int C_UWS_TYOHYO_KIJI2 = 10;
    /** 記事３。*/
    private static final int C_UWS_TYOHYO_KIJI3 = 11;
    /** 記事４。*/
    private static final int C_UWS_TYOHYO_KIJI4 = 12;
    /** 注文番号。*/
    private static final int C_UWS_TYOHYO_TYUMON_BANGO = 13;
    /** 会計組織コード（新） 。 （処理組織）*/
    private static final int C_UWS_TYOHYO_KAIKEI_SOSIKI = 14;
    /** 処理区分(オンライン)。*/
    private static final int C_SYRKBN_ONLINE = 1;
    /** 処理区分(バッチ)。*/
    private static final int C_SYRKBN_BAT = 2;
    /** 処理種別(バッチ)。*/
    private static final String C_SYRSBT_BAT = "2";

    //受渡帳票合計表示検索用
    /** 金額合計。*/
    private static final int C_UWS_TYOHYO_GAK_SUM = 0;
    /** 物品費合計。*/
    private static final int C_UWS_TYOHYO_BUT_GAK_SUM = 1;
    /** 請負費合計。*/
    private static final int C_UWS_TYOHYO_UKEOI_GAK_SUM = 2;
    /** 委託費合計。*/
    private static final int C_UWS_TYOHYO_ITAKU_GAKU_SUM = 3;
    /** 個別契約費合計。*/
    private static final int C_UWS_TYOHYO_SEISAN_GAK_SUM = 4;

    // 明細リスト検索用--------------------------------------------------

    /** 番号。*/
    private static final int C_MEISAI_LIST_BANGO = 0;
    /** 増減科目。*/
    private static final int C_MEISAI_LIST_ZOG = 1;
    /** 開始年月。*/
    private static final int C_MEISAI_LIST_SYM = 11;
    /** 受渡数量。*/
    private static final int C_MEISAI_LIST_UWS_SURYO = 12;
    /** 工程種別コード。*/
    private static final int C_MEISAI_LIST_KSB_CD = 13;
    /** 記載工程コード。*/
    private static final int C_MEISAI_LIST_KSK_CD = 14;
    /** NS物品管理番号。*/
    private static final int C_MEISAI_LIST_NSBMNGBAN = 15;
    /** 記載工程名。*/
    private static final int C_MEISAI_LIST_KISAI_KOTEI_NM = 16;
    /** 表示単位。*/
    private static final int C_MEISAI_LIST_DISP_TANI = 17;
    /** 数量。*/
    private static final int C_MEISAI_LIST_SURYO = 18;
    /** 請負費。*/
    private static final int C_MEISAI_LIST_UOI_GAK = 19;
    /** 在再別フラグ。*/
    private static final int C_MEISAI_LIST_ZAISAI_FLG = 20;
    /** 物品コードカナ品名。*/
    private static final int C_MEISAI_LIST_BUT_CD = 21;
    /** 使用ab長。*/
    private static final int C_MEISAI_LIST_SIYO_AB_LEN = 22;
    /** 物品数量。*/
    private static final int C_MEISAI_LIST_BUT_SURYO = 23;
    /** 物品費。*/
    private static final int C_MEISAI_LIST_BUT_GAK = 24;

    // 工事内訳書情報リスト取得---------
    /** レコード通番 */
    private static final int C_UTW_JOHO_LIST_REC = 0;
    /** 物品情報ID */
    private static final int C_UTW_JOHO_LIST_BUTJYOSKB_ID = 1;
    /** 物理リソースID */
    private static final int C_UTW_JOHO_LIST_BTRRSC_ID = 2;
    /** 取消区分 */
    private static final int C_UTW_JOHO_LIST_TRIKSKBN = 3;
    /** 物品情報グループID */
    private static final int C_UTW_JOHO_LIST_BUTJYOGRP_ID = 4;
    /** 物品情報グループID通番 */
    private static final int C_UTW_JOHO_LIST_BUTJYOGRP_IDSEQ = 5;
    /** ビル名 */
    private static final int C_UTW_JOHO_LIST_BIL_NM = 6;
    /** 増減科目 */
    private static final int C_UTW_JOHO_LIST_ZOG = 7;
    /** 管理責任者 */
    private static final int C_UTW_JOHO_LIST_MNGSKH = 8;
    /** 収容区域コード */
    private static final int C_UTW_JOHO_LIST_SYK_CD = 9;
    /** 調書番号 */
    private static final int C_UTW_JOHO_LIST_CHOBAN = 10;
    /** サービスコード */
    private static final int C_UTW_JOHO_LIST_SV_CD = 11;
    /** 共通アイテム */
    private static final int C_UTW_JOHO_LIST_ITM = 12;
    /** 管理区分 */
    private static final int C_UTW_JOHO_LIST_MNGKBN = 13;
    /** 設備 */
    private static final int C_UTW_JOHO_LIST_SBI = 14;
    /** 種目 */
    private static final int C_UTW_JOHO_LIST_SYU = 15;
    /** 細目 */
    private static final int C_UTW_JOHO_LIST_SMK = 16;
    /** 細分 */
    private static final int C_UTW_JOHO_LIST_SBN = 17;
    /** 整理番号 */
    private static final int C_UTW_JOHO_LIST_SIRBAN = 18;
    /** 保管課コード */
    private static final int C_UTW_JOHO_LIST_HKK_CD = 19;
    /** 個別コード */
    private static final int C_UTW_JOHO_LIST_KOB_CD = 20;
    /** 細分名 */
    private static final int C_UTW_JOHO_LIST_SAIBUN_NM = 21;
    /** フロア */
    private static final int C_UTW_JOHO_LIST_FRA = 22;
    /** 群 */
    private static final int C_UTW_JOHO_LIST_GUN = 23;
    /** 通番 */
    private static final int C_UTW_JOHO_LIST_TBN = 24;
    /** 架名 */
    private static final int C_UTW_JOHO_LIST_KMI = 25;
    /** 装置名 */
    private static final int C_UTW_JOHO_LIST_STM = 26;
    /** 架番号 */
    private static final int C_UTW_JOHO_LIST_KAB = 27;
    /** 装置番号 */
    private static final int C_UTW_JOHO_LIST_SUIBAN = 28;
    /** 本体内訳-構成品フラグ */
    private static final int C_UTW_JOHO_LIST_HTIUTWKHF = 29;
    /** カナ品名 */
    private static final int C_UTW_JOHO_LIST_KNA = 30;
    /** ａｂ長 */
    private static final int C_UTW_JOHO_LIST_AB_LEN = 31;
    /** 物品コード */
    private static final int C_UTW_JOHO_LIST_BUTU_CD = 32;
    /** 本体数量 */
    private static final int C_UTW_JOHO_LIST_HTISRO = 33;
    /** 構成数量 */
    private static final int C_UTW_JOHO_LIST_KOUSEI_SRO = 34;
    /** 新設数量 */
    private static final int C_UTW_JOHO_LIST_SINSRO = 35;
    /** 撤去数量 */
    private static final int C_UTW_JOHO_LIST_TEKSRO = 36;
    /** 単価 */
    private static final int C_UTW_JOHO_LIST_TAK = 37;
    /** 合価 */
    private static final int C_UTW_JOHO_LIST_GOK = 38;
    /** 記事（内訳） */
    private static final int C_UTW_JOHO_LIST_KJIUTW = 39;
    /** メーカコード */
    private static final int C_UTW_JOHO_LIST_MAK_CD = 40;
    /** メーカ名 */
    private static final int C_UTW_JOHO_LIST_NKM = 41;
    /** ビルコード */
    private static final int C_UTW_JOHO_LIST_BIL_CD = 42;
    /** 開始年月 */
    private static final int C_UTW_JOHO_LIST_SYM = 43;
    /** 契約年度 */
    private static final int C_UTW_JOHO_LIST_KND = 44;
    /** 延稼働時間数 */
    private static final int C_UTW_JOHO_LIST_EKDTIM_SU = 45;
    /** 撤去比率 */
    private static final int C_UTW_JOHO_LIST_TEKHRT = 46;
    /** 新設比率 */
    private static final int C_UTW_JOHO_LIST_SINHRT = 47;
    /** 撤去工事費 */
    private static final int C_UTW_JOHO_LIST_TEKKJH = 48;
    /** 着工年月日 */
    private static final int C_UTW_JOHO_LIST_CKOYMD = 49;
    /** 竣工年月日 */
    private static final int C_UTW_JOHO_LIST_SHKYMD = 50;
    /** 請負会社名 */
    private static final int C_UTW_JOHO_LIST_UKOCOM = 51;
    /** 作成者名 */
    private static final int C_UTW_JOHO_LIST_SAKSYA_NM = 52;
    /** 作業通知又は監督通知番号 */
    private static final int C_UTW_JOHO_LIST_SGTMATKTB = 53;
    /** 記事１ */
    private static final int C_UTW_JOHO_LIST_KJI001 = 54;
    /** 記事２ */
    private static final int C_UTW_JOHO_LIST_KJI002 = 55;
    /** 記事３ */
    private static final int C_UTW_JOHO_LIST_KJI003 = 56;
    /** 記事４ */
    private static final int C_UTW_JOHO_LIST_KJI004 = 57;
    /** 取得年月 */
    private static final int C_UTW_JOHO_LIST_SYT_YM = 58;
    /** 会計組織コード（新） */
    private static final int C_UTW_JOHO_LIST_KKISCD_NEW = 59;
    /** 形態１ */
    private static final int C_UTW_JOHO_LIST_KTI001 = 60;
    /** 形態２ */
    private static final int C_UTW_JOHO_LIST_KTI002 = 61;
    /** 償却可否フラグ */
    private static final int C_UTW_JOHO_LIST_SYOKHIFLG = 62;
    /** 稼働開始年度 */
    private static final int C_UTW_JOHO_LIST_KSY = 63;
    /** 任意 */
    private static final int C_UTW_JOHO_LIST_NINI = 64;
    

    // 物品情報ID検索---------
    /** 物品情報ID */
    private static final int C_BUTJYO_ID_LIST_BUTJYOSKB_ID = 0;
    /** 物理リソースID */
    private static final int C_BUTJYO_ID_LIST_BTRRSC_ID = 1;
    /** 数量 */
    private static final int C_BUTJYO_ID_LIST_SRO = 2;
    
    
    
    /*********************************************************************
     * 帳票フィールド名定義
     *********************************************************************/

    // 受渡書帳票作成------------------------------------------------------------

    /** 帳票名。*/
    private static final String T_TYOHYO_NM = "T_TYOHYO_NM";
    /** 処理組織。*/
    private static final String T_SYORI_SOSIKI = "T_SYORI_SOSIKI";
    /** 総合工事番号。*/
    private static final String T_SOGO_KOJI_BANGO = "T_SOGO_KOJI_BANGO";
    /** 総合工事名。*/
    private static final String T_SOGO_KOJI_NM = "T_SOGO_KOJI_NM";
    /** 請負会社名。*/
    private static final String T_UKEOI_COM_NM = "T_UKEOI_COM_NM";
    /** 注文番号。*/
    private static final String T_TYUMON_BANGO = "T_TYUMON_BANGO";
    /** 投入年月。*/
    private static final String T_TONYU_YM = "T_TONYU_YM";
    /** 取得年月。*/
    private static final String T_SYUTOKU_YM = "T_SYUTOKU_YM";
    /** 工事計画番号。*/
    private static final String T_KOJI_KEIKAKU_BANGO = "T_KOJI_KEIKAKU_BANGO";
    /** 個別工事名。*/
    private static final String T_KOBETU_KOJI_NM = "T_KOBETU_KOJI_NM";
    /** 延稼働時間。*/
    private static final String T_EN_KADO_JIKAN = "T_EN_KADO_JIKAN";
    /** 撤去比率。*/
    private static final String T_TEKKYO_HIRITU = "T_TEKKYO_HIRITU";
    /** 新設比率。*/
    private static final String T_SINSETU_HIRITU = "T_SINSETU_HIRITU";
    /** 撤去工事費。*/
    private static final String T_TEKKYO_KOJI_HI = "T_TEKKYO_KOJI_HI";
    /** 着工年月日。*/
    private static final String T_TYAKKO_YMD = "T_TYAKKO_YMD";
    /**竣工年月日。*/
    private static final String T_SYUNKO_YMD = "T_SYUNKO_YMD";
    /** 完成年月日。*/
    private static final String T_KANSEI_YMD = "T_KANSEI_YMD";
    /** 項番。*/
    private static final String T_KOBAN = "T_KOBAN";
    /** 増減。*/
    private static final String T_ZOGEN = "T_ZOGEN";
    /** 管理責任者ｺｰﾄﾞ。*/
    private static final String T_MNG_SKH_CD = "T_MNG_SKH_CD";
    /** サービスコード。*/
    private static final String T_SV_CD = "T_SV_CD";
    /** ﾋﾞﾙ・収容区域ｺｰﾄﾞ。*/
    private static final String T_BIL_CD = "T_BIL_CD";
    /** 共通アイテム。*/
    private static final String T_ITM = "T_ITM";
    /** 管区。*/
    private static final String T_MNG_KBN = "T_MNG_KBN";
    /** 設備。*/
    private static final String T_SETUBI = "T_SETUBI";
    /** 種目。*/
    private static final String T_SYUMOKU = "T_SYUMOKU";
    /** 細目。*/
    private static final String T_SAIMOKU = "T_SAIMOKU";
    /** 細分。*/
    private static final String T_SAIBUN = "T_SAIBUN";
    /** 保管課。*/
    private static final String T_HOKANKA_CD = "T_HOKANKA_CD";
    /** 個別ｺｰﾄﾞ。*/
    private static final String T_KOBETU_CD = "T_KOBETU_CD";
    /** 個別略号。*/
    private static final String T_KOBETU_RYAKUGO = "T_KOBETU_RYAKUGO";
    /** 建年。*/
    private static final String T_KENSETU_NENDO = "T_KENSETU_NENDO";
    /** 稼動開始。*/
    private static final String T_KADOKAISI_NENDO = "T_KADOKAISI_NENDO";
    /** 開始年月。*/
    private static final String T_KAISI_NENGETU = "T_KAISI_NENGETU";
    /** 形態１。*/
    private static final String T_KEITAI1 = "T_KEITAI1";
    /** 形態２。*/
    private static final String T_KEITAI2 = "T_KEITAI2";
    /** 償却可否。*/
    private static final String T_SYOKYAKU_KAHI = "T_SYOKYAKU_KAHI";
    /** 解消予定年月。*/
    private static final String T_KAISYO_YOTEI_YM = "T_KAISYO_YOTEI_YM";
    /** 数量１。*/
    private static final String T_SURYO1 = "T_SURYO1";
    /** 金額。*/
    private static final String T_GAK = "T_GAK";
    /** 物品費。*/
    private static final String T_BUT_GAK = "T_BUT_GAK";
    /** 請負費。*/
    private static final String T_UKEOI_GAK = "T_UKEOI_GAK";
    /** 委託費。*/
    private static final String T_ITAKU_GAKU = "T_ITAKU_GAKU";
    /** 個別契約費。*/
    private static final String T_SEISAN_GAK = "T_SEISAN_GAK";
    /** ペア番号。*/
    private static final String T_PEA_BANGO = "T_PEA_BANGO";
    /** 業者名。*/
    private static final String T_GYOSYA_NM = "T_GYOSYA_NM";
    /** 作成者名。*/
    private static final String T_SAKUSEISYA_NM = "T_SAKUSEISYA_NM";
    /** 作業通知又は監督通知番号。*/
    private static final String T_SAGYO_KANTOKU_BANGO = "T_SAGYO_KANTOKU_BANGO";
    /** 記事上段。*/
    private static final String T_KIJI_JODAN = "T_KIJI_JODAN";
    /** 記事上段。*/
    private static final String T_KIJI_GEDAN = "T_KIJI_GEDAN";
    // 仕施44-0012対応による追加 --start
    /** 取得組織コード。*/
    private static final String T_SYUTOKU_SOSIKI_CD = "T_SYUTOKU_SOSIKI_CD";
    /** 取得ＷＢＳ。*/
    private static final String T_SYUTOKU_KOJI_KEIKAKU_BANGO = "T_SYUTOKU_KOJI_KEIKAKU_BANGO";
    // 仕施44-0012対応による追加 --end

    // 受渡明細リスト作成用----------------------------------------------------------
    /** 総合工事番号。*/
    private static final String T_MEISAI_SOGO_KOJI_BANGO = "T_MEISAI_SOGO_KOJI_BANGO";
    /** 総合工事名。*/
    private static final String T_MEISAI_SOGO_KOJI_NM = "T_MEISAI_SOGO_KOJI_NM";
    /** 個別工事番号。*/
    private static final String T_KOBETU_KOJI_BANGO = "T_KOBETU_KOJI_BANGO";
    /** 個別工事名。*/
    private static final String T_MEISAI_KOBETU_KOJI_NM = "T_MEISAI_KOBETU_KOJI_NM";
    /** 増減。*/
    private static final String T_MEISAI_ZOGEN = "T_MEISAI_ZOGEN";
    /** ビル収容区域コード。*/
    private static final String T_MEISAI_BIL_CD = "T_MEISAI_BIL_CD";
    /** 共通アイテム。*/
    private static final String T_MEISAI_ITM = "T_MEISAI_ITM";
    /** 管区。*/
    private static final String T_MEISAI_MNG_KBN = "T_MEISAI_MNG_KBN";
    /** 設備。*/
    private static final String T_MEISAI_SETUBI = "T_MEISAI_SETUBI";
    /** 種目。*/
    private static final String T_MEISAI_SYUMOKU = "T_MEISAI_SYUMOKU";
    /** 細目。*/
    private static final String T_MEISAI_SAIMOKU = "T_MEISAI_SAIMOKU";
    /** 細分。*/
    private static final String T_MEISAI_SAIBUN = "T_MEISAI_SAIBUN";
    /** 細分名。*/
    private static final String T_SAIBUN_NM = "T_SAIBUN_NM";
    /** 保管課コード。*/
    private static final String T_MEISAI_HOKANKA_CD = "T_MEISAI_HOKANKA_CD";
    /** 開始年月。*/
    private static final String T_MEISAI_KAISI_NENGETU = "T_MEISAI_KAISI_NENGETU";
    /** 受渡数量。*/
    private static final String T_UKW_SRO = "T_UKW_SRO";
    /** 工程種別コード。*/
    private static final String T_KSB_CD = "T_KSB_CD";
    /** 記載工程コード。*/
    private static final String T_KSK_CD = "T_KSK_CD";
    /** NS物品管理番号。*/
    private static final String T_NSMNGBAN = "T_NSMNGBAN";
    /** 記載工程名。*/
    private static final String T_KSK_NM = "T_KSK_NM";
    /** 単位。*/
    private static final String T_TANI = "T_TANI";
    /** ａｂ長。*/
    private static final String T_AB_LEN = "T_AB_LEN";
    /** 数量。*/
    private static final String T_SRO = "T_SRO";
    /** 物品数量。*/
    private static final String T_BUT_SRO = "T_BUT_SRO";
    /** 請負費。*/
    private static final String T_UKEOIHI = "T_UKEOIHI";
    /** 物品費。*/
    private static final String T_BUTHI = "T_BUTHI";
    /** 在再別。*/
    private static final String T_ZSIBETU = "T_ZSIBETU";
    /** 物品コード_カナ品名。*/
    private static final String T_BUT_CD_KANA = "T_BUT_CD_KANA";

    /** 金額。*/
    private static final String T_GAK_SUM = "T_GAK_SUM";
    /** 物品費。*/
    private static final String T_BUT_GAK_SUM = "T_BUT_GAK_SUM";
    /** 請負費。*/
    private static final String T_UKEOI_GAK_SUM = "T_UKEOI_GAK_SUM";
    /** 委託費。*/
    private static final String T_ITAKU_GAKU_SUM = "T_ITAKU_GAKU_SUM";
    /** 個別契約費。*/
    private static final String T_SEISAN_GAK_SUM = "T_SEISAN_GAK_SUM";

    /**
     * 定数定義：所外所内区分.所外。
     */
    private static final String C_SGISNIKBN_SYOGAI = "1";

    /**
     * 定数定義：所外所内区分.所内。
     */
    private static final String C_SGISNIKBN_SYONAI = "2";

    /**
     * 定数定義：処理区分.修正。
     */
    private static final String C_SYORIKBN_UPDATE = "0";

    /**
     * 定数定義：処理区分.一括修正。
     */
    private static final String C_SYORIKBN_UPDATE_IKKATU = "1";

    /**
     * 定数定義：処理区分.追加。
     */
    private static final String C_SYORIKBN_ADD = "2";

    // 仕施44-0007対応による追加 --start
    /**
     * 定数定義：送信先識別子。
     */
    private static final String SOUSIN_KEIRI = "KEIRI";

    /**
     * 定数定義：受渡ＦＤファイルの拡張子。
     */
    private static final String TARGET_EXT = ".DAT";

    /**
     * 定数定義：FINファイルの拡張子。
     */
    private static final String TARGET_READY_EXT = ".FIN";

    /**
     * 定数定義：文字変換前のファイル一時保存パスのキー。
     */
    private static final String FILE_TMP_SAVE_KEY = "nn_tmp";

    /**
     * 定数定義：EAI指定パスのキー。
     */
    private static final String FILE_SAVE_KEY = "cm_keiri_ippan_send";

    /**
     * 定数定義：EAI指定退避パスのキー。
     */
    private static final String FILE_SAVE_BACKUP_KEY = "cm_keiri_ippan_send_save";
    // 仕施44-0007対応による追加 --end

    // 仕施44-0013対応による追加 --start
    /**
     * 損益区分：建設
     * 仕施44-0013対応につき追加(4-7では削除予定)
     */
    private static final String SONEKI_KBN_KENSETU = "建設";
    /** 工事計画番号。 */
    private static final int C_SISAN_FD_KKN = 3;
    /** 取得責任者氏名コード。*/
    private static final int C_SISAN_FD_STK_SKH_NM_CD = 32;
    /** 管理責任者氏名コード。*/
    private static final int C_SISAN_FD_MNG_SKH_NM_CD = 40;
    /** 管理区分。*/
    private static final int C_SISAN_FD_MNG_KBN = 44;

    // 仕施44-0013対応による追加 --end

    // 一般施工58 追加 start
    /** 定数定義：開始前設備判定用(5) */
    private static final String C_PREINITIATION_SERVICE_5 = "5";
    /** 定数定義：開始前設備判定用(6) */
    private static final String C_PREINITIATION_SERVICE_6 = "6";
    /** 定数定義：開始前設備判定用(7) */
    private static final String C_PREINITIATION_SERVICE_7 = "7";
    /** 定数定義：開始前設備判定用(8) */
    private static final String C_PREINITIATION_SERVICE_8 = "8";
    /** 定数定義：開始前設備判定用(9) */
    private static final String C_PREINITIATION_SERVICE_9 = "9";
    /** 定数定義：確認フラグ。 */
    private static final String C_KAKUNINFLG = "1";
    // 一般施工58 追加 end
    
    // 工事内訳書情報登録用----------------------------------------------------------
    /** N-GAIAリクエスト業務ID **/
    private static final String GYOUMID = "GyoumID";
    /** HTTPステータスコード：200(OK) */
    private static final int HTTP_OK = 200;
    /** レスポンスヘッダ．リターンコード */
    private static final String RES_HERD_RETURN = "EaiReturnCode";
    /** レスポンスヘッダ．ステータスコード */
    private static final String RES_HERD_STATUS = "HttpResponseCode";
    /** レスポンスヘッダ．コンテンツタイプ **/
    private static final String MEDIA_TYPE_JSON = "application/json;charset=UTF-8";
    /** レスポンスヘッダ．リターンコード：正常 */
    private static final String HEAD_RET_NORMAL = "0000";
    /** レスポンスヘッダ．リターンコード：N-GAIAエラー */
    private static final String HEAD_RET_GAIA_ERR = "E002";
    /** レスポンスヘッダ．ステータスコード：正常 */
    private static final String HEAD_STS_OK = "200";
    /** レスポンスヘッダ．ステータスコード：サーバエラー */
    private static final String HEAD_STS_SERVER_ERR = "500";

    /**
     * <p>
     * [概 要] コンストラクタ。
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     */
    public UkewatashisyoSakuseiLogic() {
        super();
    }

    /**
     * <p>
     * [概 要] 受渡書工事一覧照会。(詳細処理ID：316030001）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws BusinessException    参照結果が０件
     * @throws SystemException      システムエラー発生
     */
    public final void fukumiKojiSentakuIchiranSyoukai() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("fukumiKojiSentakuIchiranSyoukai() - start");
        }

        // エンティティ実行結果格納用ArrayListの宣言
        List listFkj = new ArrayList();
        List listTyozo = new ArrayList();
        List listSeiri = new ArrayList();
        List listGenba = new ArrayList();
        List listUkeoi = new ArrayList();
        List listFkjSyoki = new ArrayList();

        // 下り電文設定用ArrayListの宣言
        List listForKudari = new ArrayList(); 

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************
        // 含み工事情報エンティティ生成
        final N5Skifkj02Entity entityFkj = (N5Skifkj02Entity) getEntity(N5Skifkj02Entity.class);
        // 物品／内訳エンティティ生成
        final N5Buibututk02Entity entityButUtk = (N5Buibututk02Entity) getEntity(N5Buibututk02Entity.class);
        // 契約締結情報エンティティ生成
        final N5Skikyktks02Entity entityKykTks = (N5Skikyktks02Entity) getEntity(N5Skikyktks02Entity.class);
        // 所外内訳書エンティティ生成
        final N5Buisgiuts02Entity entitySgiUts = (N5Buisgiuts02Entity) getEntity(N5Buisgiuts02Entity.class);
        
        // 処理別実行判定定数エンティティ生成
         final N5JikkoHanteiCdEntity entityJikkoHanteiCd = (N5JikkoHanteiCdEntity) getEntity(N5JikkoHanteiCdEntity.class);

        // 他システム接続機能規制制御定数エンティティ生成
        final N5TsysKsiCtlEntity entityTsysKsiCtl = (N5TsysKsiCtlEntity) getEntity(N5TsysKsiCtlEntity.class);

        //***********************************************************************************************
        // 含み工事情報ＤＴＯ生成
        //***********************************************************************************************
        final N5Skifkj02DTO dto = new N5Skifkj02DTO();
        dto.setSksCd(getRequestData(D_SKS_CD));
        dto.setSkjBan(getRequestData(D_SKJBAN));
        dto.setSniSgiKbn(getRequestData(D_SGISNIKBN));

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 受渡書工事一覧照会の実行
        listFkj = entityFkj.search(dto);

        // 業務例外の発行
        // 参照結果が０件の場合、業務エラーを発行
        if (listFkj.size() == 0) {
            throw new BusinessException(new Message("NNCW1097")
                    , "UkewatashisyoSakuseiLogic#fukumiKojiSentakuIchiranSyoukai()");
        }

        // 受渡書工事一覧照会で取得した件数分ループ
        for (int i = 0; i < listFkj.size(); i++) {

            final Object[] record = (Object[]) listFkj.get(i);
            final Object[] objForKudari = new Object[19];

            // 損建区分を設定
            if (record[C_FKJ_SOE_KBN] != null) {
                if (record[C_FKJ_SOE_KBN].equals("0")) {
                    objForKudari[0] = "建設";
                    // GAIA送信区分を設定
                    if (record[C_FKJ_GAIA_SSNKBN] != null) {
                        if (record[C_FKJ_GAIA_SSNKBN].equals("1")) {
                            objForKudari[17] = "送信済";
                        } else if (record[C_FKJ_GAIA_SSNKBN].equals("2")) {
                            objForKudari[17] = "要再送";
                        } else {
                            objForKudari[17] = "未送信";
                        }
                    } else {
                        objForKudari[17] = "未送信";
                    }
                } else if (record[C_FKJ_SOE_KBN].equals("1")) {
                    objForKudari[0] = "損益";
                    // 損益工事の場合はGAIA送信区分を"－"に設定する。
                    objForKudari[17] = "－";
                }
            } else {
                objForKudari[0] = "";
            }
            
            // 上り電文の所外所内区分が「1」（所外）の場合
            if (getRequestData(D_SGISNIKBN).equals(C_SGISNIKBN_SYOGAI)) {

                // 所外工事の場合はGAIA送信区分を"－"に設定する。
                objForKudari[17] = "－";
            }

            // 工事計画番号
            objForKudari[1] = record[C_FKJ_KNN];
            // 含み工事名
            objForKudari[2] = record[C_FKJ_FKJ_NM];

            // 内訳書フラグ
            if (record[C_FKJ_UTS_FLG] == null) {
                objForKudari[3] = "なし";        
            } else if (record[C_FKJ_UTS_FLG].equals("1")) {
                objForKudari[3] = "あり";
            } else {
                objForKudari[3] = "なし";
            }

            // 受渡書フラグ
            if (record[C_FKJ_UWS_FLG] != null) {
                if (record[C_FKJ_UWS_FLG].equals("0")) {
                    objForKudari[4] = "なし";        
                } else if (record[C_FKJ_UWS_FLG].equals("1")) {
                    objForKudari[4] = "あり";
                }
            } else {
                objForKudari[4] = "";
            }
            
            // 承認フラグ
            if ("1".equals(record[C_FKJ_SYONIN_FLG])) {
                objForKudari[18] = "済";
            } else {
                objForKudari[18] = "";
            }
            
            // 委託費～固定資産管理組織コード
            // 委託費
            objForKudari[10] = record[C_FKJ_ITH];
            // 個別契約費小計
            objForKudari[11] = record[C_FKJ_SEB_SUM];
            // 工期至
            objForKudari[12] = record[C_FKJ_KOK_ST];
            // 開始年月
            objForKudari[13] = record[C_FKJ_SYM];
            // 受渡書作成完了日付
            objForKudari[14] = record[C_FKJ_UWS_SAKUSEI_YMD];
            // 固定資産管理組織コード
            objForKudari[15] = record[C_FKJ_KOTEI_SISAN_CD];
            // 部門コード
            objForKudari[16] = record[C_FKJ_BUMON_CD];

            // 上り電文の所外所内区分が「2」（所内）かつ、
            // 受渡書工事一覧照会の結果(listFkj)の損建区分＝「0」、
            // 内訳書フラグ＝「1」の場合
            if (record[C_FKJ_SOE_KBN] != null && record[C_FKJ_UTS_FLG] != null 
                            && getRequestData(D_SGISNIKBN).equals(C_SGISNIKBN_SYONAI)
                            && record[C_FKJ_SOE_KBN].equals("0") 
                            && record[C_FKJ_UTS_FLG].equals("1")) {
                // 貯蔵品小計取得の実行
                listTyozo = entityButUtk.getTyozohin(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), record[C_FKJ_KNN].toString());
                // 整理品小計取得の実行
                listSeiri = entityButUtk.getSeirihin(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), record[C_FKJ_KNN].toString());
                // 現場調達品小計取得の実行
                listGenba = entityButUtk.getGenbaTyoutatuhin(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), record[C_FKJ_KNN].toString());
                // 所内請負費取得の実行
                listUkeoi = entityKykTks.getUkeoi(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), record[C_FKJ_KNN].toString());

                // 貯蔵品小計を下り電文に設定
                if (listTyozo.size() != 0) {
                    Object[] obj = (Object[]) listTyozo.get(0);
                    objForKudari[5] = obj[0];
                } else {
                    objForKudari[5] = 0;
                }

                // 整理品小計を下り電文に設定
                if (listSeiri.size() != 0) {
                    Object[] obj = (Object[]) listSeiri.get(0);
                    objForKudari[6] = obj[0];
                } else {
                    objForKudari[6] = 0;
                }

                // 現場調達品小計を下り電文に設定
                if (listGenba.size() != 0) {
                    Object[] obj = (Object[]) listGenba.get(0);
                    objForKudari[7] = obj[0];
                } else {
                    objForKudari[7] = 0;
                }

                // 物品費を下り電文に設定
                // ８次２期対応 intの桁あふれ対応 Integer.valueOf → Long.valueOf
                objForKudari[8] = Long.valueOf(objForKudari[5].toString()) 
                                    + Long.valueOf(objForKudari[6].toString()) 
                                    + Long.valueOf(objForKudari[7].toString());

                // 請負費を下り電文に設定
                if (listUkeoi.size() != 0) {
                    Object[] obj = (Object[]) listUkeoi.get(0);
                    objForKudari[9] = obj[0];
                } else {
                    objForKudari[9] = 0;
                }
            // 上り電文の所外所内区分が「1」（所外）かつ、
            // 受渡書工事一覧照会の結果(listFkj)の損建区分＝「0」、
            // 内訳書フラグ＝「1」、受渡書フラグ＝「1」の場合
            } else if (record[C_FKJ_SOE_KBN] != null && record[C_FKJ_UTS_FLG] != null && record[C_FKJ_UWS_FLG] != null
                    && getRequestData(D_SGISNIKBN).equals(C_SGISNIKBN_SYOGAI)
                    && record[C_FKJ_SOE_KBN].equals("0") 
                    && record[C_FKJ_UTS_FLG].equals("1") 
                    && record[C_FKJ_UWS_FLG].equals("1")) {

                // 所外含み工事初期表示照会の実行
                listFkjSyoki = entitySgiUts.searchFkjSyoki(getRequestData(D_SKS_CD)
                                                                , getRequestData(D_SKJBAN)
                                                                , record[C_FKJ_KNN].toString());

                // 請負費を下り電文に設定
                if (listFkjSyoki.size() != 0) {
                    Object[] obj = (Object[]) listFkjSyoki.get(0);
                    objForKudari[5] = obj[0];
                    objForKudari[6] = obj[1];
                    objForKudari[7] = 0;
                    objForKudari[8] = obj[2];
                    objForKudari[9] = obj[3];
                } else {
                    objForKudari[5] = 0;
                    objForKudari[6] = 0;
                    objForKudari[7] = 0;
                    objForKudari[8] = 0;
                    objForKudari[9] = 0;
                }
            } else {
                // 貯蔵品、整理品、現場調達品、物品費、請負費に0を設定する
                objForKudari[5] = 0;
                objForKudari[6] = 0;
                objForKudari[7] = 0;
                objForKudari[8] = 0;
                objForKudari[9] = 0;
            }

            // 含み工事選択一覧画面に表示する一行データを追加
            listForKudari.add(objForKudari);
        }

        // 下り電文に含み工事情報一覧を追加
        addResponseData(D_LIST_FKJ, listForKudari); 
        
        // 実行可否フラグ
        String jikkokahi = "";
        
        List listJikkokahi = new ArrayList();
        
        // 処理別実行判定定数エンティティ．財務送信実行可否フラグ取得の実行
        listJikkokahi = entityJikkoHanteiCd.searchZaimuJikkokahi();

        // 下り電文に実行可否フラグを追加
        if(listJikkokahi.size() != 0) {
            final Object[] recordJikkokahi = (Object[]) listJikkokahi.get(0);
            jikkokahi = recordJikkokahi[0].toString();
        }
        
        addResponseData(D_JIKO_KAHI, jikkokahi);

        // GAIA規制区分
        String gaiaKsiKbn = "";
        
        List tsysKsiCtlList = entityTsysKsiCtl.find(getRequestData(D_SYS_CD));
        if (tsysKsiCtlList != null && tsysKsiCtlList.size() > 0) {
            final Object[] tsysKsiCtlRecord = (Object[]) tsysKsiCtlList.get(0);
            gaiaKsiKbn = StringUtils.defaultString((String) tsysKsiCtlRecord[0]);
        }
        
        // 下り電文にGAIA規制区分を追加
        addResponseData(D_GAIA_KSI_KBN, gaiaKsiKbn);

        if (log.isDebugEnabled()) {
            log.debug("fukumiKojiSentakuIchiranSyoukai() - end");
        }
    }

    /**
     * <p>
     * [概 要] 受渡データ作成。（詳細処理ID：316030002）
     * </p>
     *
     * <p>
     * [詳 細] 
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void ukewatashiDataSakusei() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiDataSakusei() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************
        // 一般施工58-004 追加 start
        // 設備別受渡情報エンティティ生成
        final N5Buistbukwjyo58Entity buistbukwjyoKss = 
                                    (N5Buistbukwjyo58Entity) getEntity(N5Buistbukwjyo58Entity.class);
        // 稼働開始年月排他管理エンティティ生成
        final N5SkikdkYmhit58Entity skikdkYmhit = 
            (N5SkikdkYmhit58Entity) getEntity(N5SkikdkYmhit58Entity.class);
        // 資産集計結果受信情報エンティティ生成
        final N5Skisissyukekjsn58Entity skisissyukekjsn = 
            (N5Skisissyukekjsn58Entity) getEntity(N5Skisissyukekjsn58Entity.class);
        // 一般施工58-004 追加 end

        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);

        // 受渡書作成エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);
        
        // 所内内訳受渡リンクエンティティ生成
        final N5Buiutwuwslnk01Entity entityLnk = (N5Buiutwuwslnk01Entity) getEntity(N5Buiutwuwslnk01Entity.class);
        
        // 受渡書エンティティ用ＤＴＯ生成
        final N5Buiuws02DTO dtoUws = new N5Buiuws02DTO();

        // 共通詳細エンティティ用ＤＴＯ生成
        final N5Buikss02DTO dtoKss = new N5Buikss02DTO();

        // 共通詳細エンティティ用DTOパラメータ設定
        dtoKss.setSksCd(getRequestData(D_SKS_CD));
        dtoKss.setSkjBan(getRequestData(D_SKJBAN));
        dtoKss.setKkn(getRequestData(D_KKN));

        // 受渡書エンティティ用DTOパラメータ設定
        // 施工組織コード
        dtoUws.setSksCd(getRequestData(D_SKS_CD));
        // 総合工事番号
        dtoUws.setSkjBan(getRequestData(D_SKJBAN));
        // 工事計画番号
        dtoUws.setKkn(getRequestData(D_KKN));
        // 開始年月
        dtoUws.setSym(getRequestData(D_SYM));
        // 損益区分
        dtoUws.setSoeKbn(getRequestData(D_SOEKBN));

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 一般施工58-004 追加 start
        // 所外所内区分が所外(1)の場合チェックを行う
        if (getRequestData(D_SGISNIKBN).equals(C_SGISNIKBN_SYOGAI)) {
            // 設備別受渡情報データ存在チェック
            // 該当データが存在しない場合は業務例外を発行
            if (buistbukwjyoKss.getN5BuistbukwjyoDataCnt(getRequestData(D_SKS_CD)
                            , getRequestData(D_SKJBAN), getRequestData(D_KKN)) == 0) {
                String[] errKekka = {"設備別受渡詳細"};
                throw new BusinessException(new Message("NNCW0098", errKekka)
                        , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
            }
            // 未送信データ存在チェック
            if (skisissyukekjsn.getUnsentDataCnt(getRequestData(D_SKS_CD)
                            , getRequestData(D_SKJBAN)) >= 1) {
                String[] errKekka = {"Ｏｐｔｏｓ設備稼働開始流通"};
                throw new BusinessException(new Message("NNCW0100", errKekka)
                        , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
            }
        }
        // 一般施工58-004 追加 end

        // 共通詳細存在チェックの実行
        List listKss = entityKss.kyotuSyosaiSonzaiCheck(dtoKss);

        // 該当データが存在しない場合は業務例外を発行
        if (listKss.size() == 0) {
            throw new BusinessException(new Message("NNCW1100")
                    , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        }

        Object[] objKss = (Object[]) listKss.get(0);

/*        // 損建区分を取得
        String strSonken = getRequestData(D_SOEKBN);
        // 建設工事の場合、委託費の必須チェックを行う
        if (strSonken.equals("0")) {
            // 委託費が0円の場合は業務例外を発行
            if(objKss[C_KSS_SONZAI_CHECK_ITK_HI] != null)
            {
                if(objKss[C_KSS_SONZAI_CHECK_ITK_HI].toString().equals("0"))
                {
                    throw new BusinessException(new Message("NNCW0115", new String[]{"委託費"})
                            , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
                }
            }
        }*/

        // 会計組織コード、取得責任者氏名コード、管理責任者氏名コード、受渡年月日がNULLの場合は
        // 業務例外を発行
        if (objKss[C_KSS_SONZAI_CHECK_KKISCD] == null) {
            throw new BusinessException(new Message("NNCW0115", new String[] {"会計組織コード"})
                , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        } else if (objKss[C_KSS_SONZAI_CHECK_MNG_SKH_NM_CD] == null) {
            throw new BusinessException(new Message("NNCW0115", new String[] {"管理責任者氏名コード"})
                    , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        } else if (objKss[C_KSS_SONZAI_CHECK_STK_SKH_NM_CD] == null) {
            throw new BusinessException(new Message("NNCW0115", new String[] {"取得責任者氏名コード"})
            , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        } else if (objKss[C_KSS_SONZAI_CHECK_UWS_YMD] == null) {
            throw new BusinessException(new Message("NNCW0115", new String[] {"受渡年月日"})
            , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        }

        // 一般施工58-009 追加 start
        // 所外所内区分が所外(1)の場合チェックを行う
        // 締結状態変更データが存在した場合、確認メッセージを表示する。
        // OKボタンを押下した場合、処理を継続するので業務例外を発行するチェックを
        // した後にチェックする
        if (getRequestData(D_SGISNIKBN).equals(C_SGISNIKBN_SYOGAI)) {
            // 締結状態変更データ存在チェック
            if (getRequestData(D_KAKUNINFLG).equals(C_KAKUNINFLG)) {
                // 確認ありの場合のときだけ、締結状態変更データ存在チェックを行う
                if (skikdkYmhit.getChangeStateOfExecutionDataCnt(
                                getRequestData(D_SKS_CD), getRequestData(D_SKJBAN)) == 0) {
                    throw new BusinessException(new Message("NNCC0046"),
                                    "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
                }
            }
        }
        // 一般施工58-009 追加 end
        
        // 所内内訳受渡リンクエンティティ．所内内訳受渡リンク削除の実行
        int delCount = entityLnk.delete(getRequestData(D_SKS_CD)
                , getRequestData(D_SKJBAN)
                , getRequestData(D_KKN));
        if( log.isDebugEnabled() ) {
            log.debug("所内内訳受渡リンクエンティティ．所内内訳受渡リンク削除件数：" + delCount);
        }

        // 受渡データ作成ストアド呼出
        Object[] result = entityUws.ukewatasiDataSakuseiStored(dtoUws
                                                            // 所外所内区分 
                                                            , getRequestData(D_SGISNIKBN)
                                                            // 算定適用年月
                                                            , getRequestData(D_SNTTKY_YM)
                                                            // 内訳書フラグ
                                                            , getRequestData(D_UTSFLG)
                                                            );
        if (!result[0].toString().equals("0")) {
            String[] errKekka = {"受渡データ作成"};
            throw new BusinessException(new Message(result[1].toString(), errKekka)
            , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        }

        // 共通詳細テーブルの受渡書フラグを更新する
        int updCount = entityKss.ukewatasisyoFlgUpdate(dtoKss);

        if (updCount == 0) {
            String[] errKekka = {"受渡データ作成"};
            throw new BusinessException(new Message(result[1].toString(), errKekka)
                , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        }
        
        // 共通詳細テーブルの承認フラグを更新する
        int updSyoninCount = entityKss.syoninFlgUpdate(
                                                    // 施工組織コード
                                                    getRequestData(D_SKS_CD)
                                                    // 総合工事番号
                                                    , getRequestData(D_SKJBAN)
                                                    // 工事計画番号
                                                    , getRequestData(D_KKN));
        
        if (updSyoninCount == 0) {
            String[] errKekka = {"承認解除処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#ukewatashiDataSakusei()");
        }

        // 所外内訳書受渡書データ作成ストアド処理件数格納用変数
        int resultStored = 0;

        // 所外工事かつ、内訳書フラグが1（あり）のときのみストアドを実行する
        if (getRequestData(D_SGISNIKBN).equals(C_SGISNIKBN_SYOGAI)
                                        && getRequestData(D_UTSFLG).equals("1")) {
            // 所外内訳書受渡書データ作成ストアド呼出
            resultStored = entityUws.shogaiUtiwakesyoUkewatasisyoDataSakuseiStored(
                                                                    // 施工組織コード
                                                                    getRequestData(D_SKS_CD)
                                                                    // 総合工事番号
                                                                    , getRequestData(D_SKJBAN)
                                                                    // 工事計画番号
                                                                    , getRequestData(D_KKN));

        }

        // 下り電文に所外内訳書受渡書データ作成ストアドの登録件数を追加
        addResponseData(D_INS_CNT, resultStored);

        /*********************************************************************************/

        /* 個別契約費計算 */
        final List listsebHiMae;

        listsebHiMae = entityKss.seisanbaraihiSansyo(getRequestData(D_SKS_CD)
                                                , getRequestData(D_SKJBAN)
                                                , getRequestData(D_KKN));

        // 参照結果が０件の場合、業務エラーを発行
        if (listsebHiMae.size() == 0) {
            throw new BusinessException(new Message("NNCW0007")
                , "UkewatashisyoSakuseiLogic#kyotuSyosaiSyokai()");
        }
        int resultKssseisanbarai = 0;

        // 共通詳細個別契約費更新ストアド呼出
        resultKssseisanbarai = entityKss.seisanbaraihiUpdateStored(getRequestData(D_SKS_CD)
                                                , getRequestData(D_SKJBAN)
                                                , getRequestData(D_KKN));

        // ストアドの処理結果が0じゃなかった場合は業務例外
        if (resultKssseisanbarai != 0) {
            String[] errKekka = {"共通詳細個別契約費更新処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kobanDataDelete()");
        }

        final List listsebHiAto;

        listsebHiAto = entityKss.seisanbaraihiSansyo(getRequestData(D_SKS_CD)
                                                , getRequestData(D_SKJBAN)
                                                , getRequestData(D_KKN));

        // 参照結果が０件の場合、業務エラーを発行
        if (listsebHiAto.size() == 0) {
            throw new BusinessException(new Message("NNCW0007")
                , "UkewatashisyoSakuseiLogic#kyotuSyosaiSyokai()");
        }

        String sebHi;
        sebHi = "0";

        // データ行の出力
        final Object[] recordMae = (Object[]) listsebHiMae.get(0);
        final Object[] recordAto = (Object[]) listsebHiAto.get(0);
        if (Integer.parseInt(recordMae[0].toString()) >= Integer.parseInt(recordAto[0].toString())) {
            sebHi = String.valueOf(Integer.parseInt(recordMae[0].toString()) - Integer.parseInt(recordAto[0].toString()));
        }

        if (!sebHi.equals("0")) {
            // 個別契約費按分ストアド呼出
            int resultSeisanbaraihi = entityUws.anbunTaisyoSeisanbaraihiAnbunStored(getRequestData(D_SKS_CD)
                                                    , getRequestData(D_SKJBAN)
                                                    , getRequestData(D_KKN)
                                                    , sebHi);

            /* ストアドの処理結果が0じゃなかった場合は業務例外 */
            if (resultSeisanbaraihi != 0) {
                String[] errKekka = {"個別契約費の按分処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#sonotaShisyutuAnbun()");
            }
        }

        // 共通詳細個別契約費更新ストアド呼出
        resultKssseisanbarai = entityKss.seisanbaraihiUpdateStored(getRequestData(D_SKS_CD)
                                                    , getRequestData(D_SKJBAN)
                                                    , getRequestData(D_KKN));

        // ストアドの処理結果が0じゃなかった場合は業務例外
        if (resultKssseisanbarai != 0) {
            String[] errKekka = {"共通詳細個別契約費更新処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kobanDataDelete()");
        }
        /*******************************************************************************************/

        // 委託費按分ストアド呼出
        int resultItakuhiStored = entityUws.itakuhiAnbunStored(getRequestData(D_SKS_CD)
                                                        , getRequestData(D_SKJBAN)
                                                        , getRequestData(D_KKN));

        // ストアドの処理結果が0じゃなかった場合は業務例外
        if (resultItakuhiStored != 0) {
            String[] errKekka = {"委託費の按分処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
            , "UkewatashisyoSakuseiLogic#sonotaShisyutuAnbun()");
        }

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiDataSakusei() - end");
        }
    }

    /**
     * <p>
     * [概 要] 受渡CSVデータ作成。（詳細処理ID：316030003）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException      システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void ukewatashiFdDataSakusei() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiFdDataSakusei() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書接続ＩＤエンティティ生成
        final N5Budukwset_IdEntity entitySet = (N5Budukwset_IdEntity) getEntity(N5Budukwset_IdEntity.class);
        // 受渡書エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);
        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);
        // 受渡書エンティティ用ＤＴＯ生成
        final N5Buiuws02DTO dtoUws = new N5Buiuws02DTO();
        // 共通詳細エンティティ用ＤＴＯ生成
        final N5Buikss02DTO dtoKss = new N5Buikss02DTO();

        // 受渡書エンティティ用DTOパラメータ設定
        dtoUws.setSksCd(getRequestData(D_SKS_CD));
        dtoUws.setSkjBan(getRequestData(D_SKJBAN));

        // 共通詳細エンティティ用DTOパラメータ設定
        dtoKss.setSksCd(dtoUws.getSksCd());
        dtoKss.setSkjBan(dtoUws.getSkjBan());

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 接続ＩＤ照会
        final List listSet = entitySet.findByAll();

        // 取得結果が０件の場合、システムエラーを発行する
        if (listSet.size() == 0) {
            this.setMessage(new Message("NNCE0991"));
            throw new SystemException("E-20055", "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
        }

        // 下り電文に接続ＩＤ一覧を設定
        addResponseData(D_LIST_UKWSET_ID, listSet);

        // 上り電文を取得
        // 工事計画番号一覧
        final List list = getRequestListData(D_LIST_KKN);
        // 受渡CSVファイル出力形態
        final String uwsCsvFileOutKti = getRequestData(D_UWS_CSV_FILE_OUT_KTI);

        // 下り電文編集用List
        List listForKudari = new ArrayList();
        List listForSelect = new ArrayList();

        // 上り電文に登録されている工事計画番号分ループ
        for (int i = 0; i < list.size(); i++) {
            // ------------------
            // 工事計画番号の取得
            // ------------------
            final List record = (List) list.get(i);
            dtoUws.setKkn(record.get(0).toString());
            
            if (D_OUT_TMP_SAVE.equals(uwsCsvFileOutKti)) {
                // 受渡CSVファイル出力形態が"1"(CSV出力)の場合
                
                
                // --------------------------
                // 受渡CSV対象外データ数取得
                // --------------------------
                int intOutDataCnt = entityUws.getOutDataCnt(dtoUws.getSksCd(), dtoUws.getSkjBan(), dtoUws.getKkn());
                // 処理対象外データ数が1件以上ある場合は業務例外
                if (intOutDataCnt > 0) {
                    throw new BusinessException(new Message("NNCW0117"
                            , new String[] {"増減科目(" + dtoUws.getKkn() + ")"})
                    , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                }
                
                // 仕施44-0006により変更 --start
                // --------------------------
                // 共通詳細存在チェックの実行
                // --------------------------
                dtoKss.setKkn(dtoUws.getKkn());
                List listKss = entityKss.kyotuSyosaiSonzaiCheck(dtoKss);
                
                // 該当データが存在しない場合は業務例外を発行
                if (listKss.size() == 0) {
                    throw new BusinessException(new Message("NNCW1100")
                    , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                }
                
                Object[] objKss = (Object[]) listKss.get(0);
                
                // 作成者名がNULLの場合は業務例外を発行
                if (objKss[C_KSS_SONZAI_CHECK_SAKSYA_NM] == null) {
                    throw new BusinessException(new Message("NNCW0115", new String[] { "作成者名" }), 
                            "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                }
                // 仕施44-0006により変更 --end
                
                // 仕施44-0002により変更 --start
                // ----------------------------
                // ペア番号チェックストアド呼出
                // ----------------------------
                /*   int resultPeabangocheck = entityUws.peabangocheckStored(dtoUws.getSksCd(), dtoUws.getSkjBan(), dtoUws.getKkn());
                // ストアドの処理結果が0じゃなかった場合は業務例外
                if(resultPeabangocheck != 0)
                {
                    throw new BusinessException(new Message("NNCW0117", new String[] {"ペア番号(" + dtoUws.getKkn() + ")"})
                    ,"UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                } */ 
                
                // 上り電文のペアチェック番号を取得
                String strCheck = getRequestData(D_CHECKFLG);
                
                // ペア番号チェックフラグがチェックありの場合のみ処理を行う
                if (strCheck.equals("1")) {
                    int resultPeabangocheck = entityUws.peabangocheckStored(dtoUws.getSksCd(), dtoUws.getSkjBan(), dtoUws.getKkn());
                    // ストアドの処理結果が0じゃなかった場合は業務例外
                    if (resultPeabangocheck != 0) {
                        throw new BusinessException(new Message("NNCC5030", new String[] {dtoUws.getKkn()})
                        , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                    }
                }
                // 仕施44-0002により変更 --end
            }


            // ------------------------------------------
            // 受渡書エンティティの受渡CSVデータ検索を実行
            // ------------------------------------------
            listForSelect = entityUws.searchUkewatasiFDKensaku(dtoUws);

            for (int y = 0; y < listForSelect.size(); y++) {

                final Object[] objForSelect = (Object[]) listForSelect.get(y);
                NNCQS001_02OutParamDTO dtoOut;

                // ---------------------------------
                // 工事計画番号の新旧コード変換を行う
                // ----------------------------------
                dtoOut = entityUws.getShinkyuCD(dtoUws);
                // 戻り値が正常以外又はリターンコードが'0'か'9'以外の場合
                if ((dtoOut.getReturnCd() != 0) && (dtoOut.getReturnCd() != 9)) {
                    String[] errKekka = {"新旧コード変換"};
                    throw new BusinessException(new Message("NNCW0044", errKekka)
                            , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                }
                // 新工事計画番号の'-'を削除
                String strEdit = "";
                strEdit = dtoOut.getSekoKKN();
                strEdit = strEdit.replace("-", "");
                
                // 会計組織コード（新）を取得
                String kkiscd = checkNullAndConvertString(objForSelect[C_UWS_FD_KKN]);
                kkiscd = kkiscd.substring(0,5);
                // 任意を取得
                String nini = checkNullAndConvertString(objForSelect[C_UWS_FD_KKN]);
                nini = nini.substring(22);
                
                // 会計組織コード + 工事計画番号 + 任意 を設定
                strEdit = kkiscd + strEdit + nini;
                
                // 変換結果でListの値を差し替え
                objForSelect[C_UWS_FD_KKN] = (Object) strEdit;
                listForSelect.set(y, objForSelect);

                // ------------------------------------
                // 管理区分がNULLのときは業務例外を発行
                // ------------------------------------
                //「%1%を正しく入力してください。」
                if (objForSelect[C_UWS_FD_MNG_KBN] == null) {
                    // 下り電文に受渡FD作成エラー区分を追加
                    addResponseData(D_FD_ERR_KBN, "1");

                    String[] errKekka = {"項番データの管理区分"};
                    throw new BusinessException(new Message("NNCW0029", errKekka)
                        , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                }
                // ------------------------------------------------
                // 管理責任者氏名コードがNULLのときは業務例外を発行
                // ------------------------------------------------
                // 「%1%を正しく入力してください。」
                if (objForSelect[C_UWS_FD_MNG_SKH_NM_CD] == null) {
                    // 下り電文に受渡FD作成エラー区分を追加
                    addResponseData(D_FD_ERR_KBN, "1");
                    String[] errKekka = {"項番データの管理責任者氏名コード"};
                    throw new BusinessException(new Message("NNCW0029", errKekka)
                        , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                // ------------------------------------------------
                // 取得責任者氏名コードがNULLのときは業務例外を発行
                // ------------------------------------------------
                } else if (objForSelect[C_UWS_FD_STK_SKH_NM_CD] == null) {
                    // 下り電文に受渡FD作成エラー区分を追加
                    addResponseData(D_FD_ERR_KBN, "2");

                    throw new BusinessException(new Message("NNCC1033")
                        , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
                }

                // 下り電文設定用リストデータに取得データを追加
                listForKudari.add(listForSelect.get(y));
            }
        }

        // CSV出力対象データが0件の場合は業務例外 
        if (listForKudari.size() == 0) {
            throw new BusinessException(new Message("NNCW0007")
            , "UkewatashisyoSakuseiLogic#ukewatashiFdDataSakusei()");
        }

        // 受渡CSVデータ作成完了報告を実行
        int updCount = entityKss.ukewatasiFdDataSakuseiKanryoHokoku(dtoUws);

        if (updCount == 0) {
            return;
        }

        // 下り電文に受渡CSV情報一覧を追加
        addResponseData(D_LIST_UKWFD_JYO, listForKudari);

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiFdDataSakusei() - end");
        }
    }

    /**
     * <p>
     * [概 要] 物品費ＣＳＶ作成。（詳細処理ID：316030004）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException      システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void buppinCsvSakusei() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("buppinCsvSakusei() - start");
        }

        final List listButCsv;

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 通建会社組織定数エンティティ生成
        final N5Buisgiukh02Entity entitySgiUkh = (N5Buisgiukh02Entity) getEntity(N5Buisgiukh02Entity.class);

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 組織定数－組織変換定数結合参照
        listButCsv = entitySgiUkh.search(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN));
        
        if (listButCsv.size() == 0) {
            // 参照結果が０件の場合、業務エラーを発行
            throw new BusinessException(new Message("NNCW0007")
                    , "UkewatashisyoSakuseiLogic#buppinCsvSakusei()");
        }

        // 下り電文に物品費CSVデータを追加
        addResponseData(D_LIST_BUPPIN, listButCsv);

        if (log.isDebugEnabled()) {
            log.debug("kyotuSyosaiSyokai() - end");
        }
    }

    /**
     * <p>
     * [概 要] 請負費ＣＳＶ作成。(詳細処理ID：316030005)
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException      システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void ukeoiCsvSakusei() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("ukeoiCsvSakusei() - start");
        }

        final List listUoiCsv;

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 記載工程細分別エンティティ生成
        final N5Skiksksib02Entity entityKskSib = (N5Skiksksib02Entity) getEntity(N5Skiksksib02Entity.class);

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 物品費CSVデータ検索
        listUoiCsv = entityKskSib.search(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN));

        if (listUoiCsv.size() == 0) {
            // 参照結果が０件の場合、業務エラーを発行
            throw new BusinessException(new Message("NNCW0007")
                    , "UkewatashisyoSakuseiLogic#ukeoiCsvSakusei()");
        }

        // 下り電文に請負費CSV一覧を追加
        addResponseData(D_LIST_UKEOI, listUoiCsv);

        if (log.isDebugEnabled()) {
            log.debug("ukeoiCsvSakusei() - end");
        }
    }

    /**
     * <p>
     * [概 要] 共通詳細照会。（詳細処理ID：316030006）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws BusinessException    参照結果が０件
     * @throws SystemException      システムエラー発生
     */
    public final void kyotuSyosaiSyokai() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("kyotuShosaiSyoukai() - start");
        }

        List listKss = new ArrayList();
        List listFkj = new ArrayList();
        List listTuk = new ArrayList();

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 含み工事情報エンティティ生成
        final N5Skifkj02Entity entityFkj = (N5Skifkj02Entity) getEntity(N5Skifkj02Entity.class);
        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);
        // 月別委託費情報エンティティ生成
        final N5Skitukith02Entity entityTuk = (N5Skitukith02Entity) getEntity(N5Skitukith02Entity.class);
        // 含み工事情報エンティティ用ＤＴＯ生成
        final N5Skifkj02DTO dtoFkj = new N5Skifkj02DTO();
        // 共通詳細エンティティ用ＤＴＯ生成
        final N5Buikss02DTO dtoKss = new N5Buikss02DTO();

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 含み工事情報エンティティ用DTOパラメータ設定
        dtoFkj.setSksCd(getRequestData(D_SKS_CD));
        dtoFkj.setSkjBan(getRequestData(D_SKJBAN));
        dtoFkj.setKkn(getRequestData(D_KKN));
        dtoFkj.setSoeKbn(getRequestData(D_SOEKBN));

        //共通詳細エンティティ用DTOパラメータ設定
        dtoKss.setSksCd(getRequestData(D_SKS_CD));
        dtoKss.setSkjBan(getRequestData(D_SKJBAN));
        dtoKss.setKkn(getRequestData(D_KKN));
        dtoKss.setUwsFlg(getRequestData(D_UWSFLG));

        // 上り電文の受渡書フラグがNULLの場合
        if (getRequestData(D_UWSFLG).equals("")) {
            // 含み工事情報エンティティ．共通詳細照会(新規作成）の実行
            listFkj = entityFkj.searchKyotuSyosai(dtoFkj);

            // 共通詳細エンティティ．共通詳細照会(新規作成）の実行
            listKss = entityKss.searchSinki(dtoKss);

            // 下り電文の処理種別に"1"(新規作成)を設定
            addResponseData(D_SRICLS, "1");
            // 下り電文に含み工事一覧を追加
            addResponseData(D_LIST_FKJ, listFkj);
            // 下り電文に共通詳細一覧を追加
            addResponseData(D_LIST_KSS, listKss);  
        // 上り電文の受渡書フラグが'0'または'1'の場合
        } else {
            if (getRequestData(D_UWSFLG).equals("0") || getRequestData(D_UWSFLG).equals("1")) {
                // 共通詳細エンティティ．会計組織コード変更の実行（会計組織コード初期設定）
                int iRet = entityKss.updateKkiscd(dtoKss);

                // 共通詳細エンティティ．共通詳細照会(修正）の実行
                listKss = entityKss.searchShusei(dtoKss);

                // 下り電文の処理種別に"0"(修正)を設定
                addResponseData(D_SRICLS, "0");
                // 下り電文に共通詳細一覧を追加
                addResponseData(D_LIST_KSS, listKss);

                // 参照結果が０件の場合、業務エラーを発行
                if (listKss.size() == 0) {
                    throw new BusinessException(new Message("NNCW0007")
                            , "UkewatashisyoSakuseiLogic#kyotuSyosaiSyokai()");
                }
            }
        }

        // 月別委託費情報テーブルから委託費合計を取得する
        listTuk = entityTuk.searchTsukishimeItakuhi(dtoKss);

        // 下り電文に月別委託費情報を追加
        addResponseData(D_LIST_TUK, listTuk);

        if (log.isDebugEnabled()) {
            log.debug("kyotuShosaiSyoukai() - end");
        }
    }

    /**
     * <p>
     * [概 要] その他支出クリアストアド呼び出し。（詳細処理ID：316030007）
     * </p>
     *
     * <p>
     * [詳 細] 
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void sonotaShiSyutuClear() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("sonotaShiSyutuClear() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書作成エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);

        // 共通詳細エンティティ生成:按分
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 個別契約費クリアストアド呼出
        int result = entityUws.seisanbaraiClearStored(getRequestData(D_SKS_CD)
                                                            , getRequestData(D_SKJBAN)
                                                            , getRequestData(D_KKN)
                                                            , getRequestData(D_SGISNIFLG));

        if (result != 0) {
            String[] errKekka = {"その他支出クリア処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#sonotaShiSyutuClear()");
        }
        
        // 承認解除処理実行
        int updSyoninCount = entityKss.syoninFlgUpdate(
                // 施工組織コード
                getRequestData(D_SKS_CD)
                // 総合工事番号
                , getRequestData(D_SKJBAN)
                // 工事計画番号
                , getRequestData(D_KKN));

        if (updSyoninCount == 0) {
            String[] errKekka = {"承認解除処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
            , "UkewatashisyoSakuseiLogic#sonotaShiSyutuClear()");
        }

        // 共通詳細精算払費照会
        final List listsebHi;

        listsebHi = entityKss.seisanbaraihiSansyo(getRequestData(D_SKS_CD)
                                                    , getRequestData(D_SKJBAN)
                                                    , getRequestData(D_KKN));

        // 参照結果が０件の場合、業務エラーを発行
        if (listsebHi.size() == 0) {
            throw new BusinessException(new Message("NNCW0007")
                    , "UkewatashisyoSakuseiLogic#sonotaShiSyutuClear()");
        }

        //下り電文に個別契約費CSVデータを追加
        addResponseData(D_LIST_SEB_HI, listsebHi);

        if (log.isDebugEnabled()) {
            log.debug("sonotaShiSyutuClear() - end");
        }
    }

    /**
     * <p>
     * [概 要] その他支出按分処理。（詳細処理ID：316030008）
     * </p>
     *
     * <p>
     * [詳 細] 
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void sonotaShisyutuAnbun() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("sonotaShisyutuAnbun() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書作成エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);

        // 共通詳細エンティティ生成:按分
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 個別契約費按分ストアド呼出
        int result = entityUws.anbunTaisyoSeisanbaraihiAnbunStored(getRequestData(D_SKS_CD)
                                                        , getRequestData(D_SKJBAN)
                                                        , getRequestData(D_KKN)
                                                        , getRequestData(D_ANBUN_UOIGAKU));

        /* ストアドの処理結果が0じゃなかった場合は業務例外 */
        if (result != 0) {
            String[] errKekka = {"個別契約費の按分処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#sonotaShisyutuAnbun()");
        }

        // 委託費按分ストアド呼出
        int result001 = entityUws.itakuhiAnbunStored(getRequestData(D_SKS_CD)
                                                        , getRequestData(D_SKJBAN)
                                                        , getRequestData(D_KKN));

        /* ストアドの処理結果が0じゃなかった場合は業務例外 */
        if (result001 != 0) {
            String[] errKekka = {"委託費の按分処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kyotuSyousaiTouroku()");
        }

        // 個別契約費更新処理
        int updCountanbunUoigaku = entityKss.updateanbunUoigaku(getRequestData(D_SKS_CD)
                                                        , getRequestData(D_SKJBAN)
                                                        , getRequestData(D_KKN)
                                                        , getRequestData(D_LIST_SEB_HI_UPDATE));

        if (updCountanbunUoigaku == 0) {
            final String[] errKekka = {"共通詳細個別契約費更新処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#sonotaShisyutuAnbun()");
        }
        
        // 承認解除処理実行
        int updSyoninCount = entityKss.syoninFlgUpdate(
                // 施工組織コード
                getRequestData(D_SKS_CD)
                // 総合工事番号
                , getRequestData(D_SKJBAN)
                // 工事計画番号
                , getRequestData(D_KKN));

        if (updSyoninCount == 0) {
            String[] errKekka = {"承認解除処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
            , "UkewatashisyoSakuseiLogic#sonotaShisyutuAnbun()");
        }

        if (log.isDebugEnabled()) {
            log.debug("sonotaShisyutuAnbun() - end");
        }
    }

    /**
     * <p>
     * [概 要] 共通詳細登録。（詳細処理ID：316030009）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void kyotuSyousaiTouroku() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("kyotuSyousaiTouroku() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);
        // 共通詳細エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);
        // 会計組織変換定数エンティティ生成
        final N5KkiscdCnvEntity entityKkiscdCnv = (N5KkiscdCnvEntity) getEntity(N5KkiscdCnvEntity.class);

        // 共通詳細エンティティ用ＤＴＯ生成
        final N5Buikss02DTO dto = new N5Buikss02DTO();

        dto.setSriCls(getRequestData(D_SRICLS));
        dto.setMngSkhUmuFlg(getRequestData(D_MNGSKH_UMUFLG));
        dto.setSksCd(getRequestData(D_SKS_CD));
        dto.setSkjBan(getRequestData(D_SKJBAN));
        dto.setKkn(getRequestData(D_KKN));
        dto.setSgiSniFlg(getRequestData(D_SGISNIFLG));
        dto.setUwsCls(getRequestData(D_UWSCLS));
        dto.setStkSkhCd(getRequestData(D_STKMNG_NM_CD));
        dto.setMngSkhCd(getRequestData(D_MNGSKH_NM_CD));
        dto.setTonYm(getRequestData(D_TUN_YM));
        dto.setStkYm(getRequestData(D_STK_YM));
        dto.setEnkTimSu(getRequestData(D_ENKTIM_SU));
        dto.setCkoYmd(getRequestData(D_CKOYMD));
        dto.setKneYmd(getRequestData(D_KNEYMD));
        dto.setSnkYmd(getRequestData(D_SNKYMD));
        dto.setUkwYmd(getRequestData(D_UKWYMD));
        dto.setSym(getRequestData(D_SYM));
        dto.setUkoCom(getRequestData(D_UKOCOM));
        dto.setSakNm(getRequestData(D_SAKSYA_NM));
        dto.setSagyoTuti(getRequestData(D_SGTMATKTB));
        dto.setKji001(getRequestData(D_KJI001));
        dto.setKji002(getRequestData(D_KJI002));
        dto.setKji003(getRequestData(D_KJI003));
        dto.setKji004(getRequestData(D_KJI004));
        dto.setKksCd(getRequestData(D_KKISCD));
        dto.setIth(getRequestData(D_ITH));
        dto.setKti001(getRequestData(D_KTI001));
        dto.setKti002(getRequestData(D_KTI002));
        dto.setSyoKhi(getRequestData(D_SYOKHI));
        dto.setKshYtiYm(getRequestData(D_KSHYTI_YM));
        dto.setSebGak(getRequestData(D_SEB_HI));

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        try {

            // 登録前データチェック
            List listkkiscd = entityKkiscdCnv.findkss_cd(getRequestData(D_KKISCD));

            // 該当データが存在しない場合は業務例外を発行
            if (listkkiscd.size() == 0) {
                String[] strParam = { "会計組織コード", "会計組織変換定数" };
                throw new BusinessException(new Message("NNCW9005", strParam)
                    , "UkewatashisyoSakuseiLogic#kyotuSyousaiTouroku()");
            }

            // 新規登録処理時（処理種別が1）のときはInsert
            if (getRequestData(D_SRICLS).equals("1")) {
                // 共通詳細エンティティの共通詳細登録処理を実行
                int insCount = entityKss.insert(dto);

                if (insCount == 0) {
                    return;
                }
            // 修正処理時（処理種別が0）のときはUpdate
            } else if (getRequestData(D_SRICLS).equals("0")) {
                int updCount = entityKss.update(dto);

                if (updCount == 0) {
                    return;
                }

                // 管理責任者コードが変更されている場合は以下のSQLを実行
                if (getRequestData(D_MNGSKH_UMUFLG).equals("1")) {
                    updCount = entityUws.ukewatasishoUpdate(dto);

                    if (updCount == 0) {
                        return;
                    }
                }

                // 委託費按分ストアド呼出
                int result = entityUws.itakuhiAnbunStored(getRequestData(D_SKS_CD)
                                                                , getRequestData(D_SKJBAN)
                                                                , getRequestData(D_KKN));

                /* ストアドの処理結果が0じゃなかった場合は業務例外 */
                if (result != 0) {
                    String[] errKekka = {"委託費の按分処理"};
                    throw new BusinessException(new Message("NNCW0044", errKekka)
                        , "UkewatashisyoSakuseiLogic#kyotuSyousaiTouroku()");
                }
            }
            
            // 承認解除処理実行
            int updSyoninCount = entityKss.syoninFlgUpdate(
                                                        // 施工組織コード
                                                        getRequestData(D_SKS_CD)
                                                        // 総合工事番号
                                                        , getRequestData(D_SKJBAN)
                                                        // 工事計画番号
                                                        , getRequestData(D_KKN));
            
            if (updSyoninCount == 0) {
                String[] errKekka = {"承認解除処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#kyotuSyousaiTouroku()");
            }

            if (log.isDebugEnabled()) {
                log.debug("kyotuSyousaiTouroku() - end");
            }
        } catch (UniqueKeyException ue) {
            String[] errKekka = {"施工組織コード、総合工事名、工事計画番号"};
            throw new BusinessException(new Message("NNCW0027", errKekka)
                , "UkewatashisyoSakuseiLogic#kyotuSyousaiTouroku()");
        }
    }

    /**
     * <p>
     * [概 要] 委託費再算出ストアド呼び出し。（詳細処理ID：316030010）
     * </p>
     *
     * <p>
     * [詳 細] 
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException システムエラー発生
     */
    public final void itakuhiSaiSansyutu() throws SystemException {

        if (log.isDebugEnabled()) {
            log.debug("kobanDataItakuhiSantyutu() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書作成エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);

        // 受渡書エンティティ用ＤＴＯ生成
        final N5Buiuws02DTO dtoUws = new N5Buiuws02DTO();

        // 受渡書エンティティ用DTOパラメータ設定
        // 施工組織コード
        dtoUws.setSksCd(getRequestData(D_SKS_CD));
        // 総合工事番号
        dtoUws.setSkjBan(getRequestData(D_SKJBAN));
        // 工事計画番号
        dtoUws.setKkn(getRequestData(D_KKN));
        // 物品費
        dtoUws.setButGak(getRequestData(D_BUTGAK));
        // 請負費
        dtoUws.setUoiGak(getRequestData(D_UOIGAK));
        // 委託費
        dtoUws.setItkGak(getRequestData(D_ITH));
        // 項番
        dtoUws.setKba(getRequestData(D_KBA));

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 項番データ委託費算出ストアド呼出
        int itakuhi = entityUws.kobanDataItakuhiSansyutuStored(dtoUws, getRequestData(D_SYORI_KBN));

        // 下り電文に委託費を追加
        addResponseData(D_ITH, itakuhi); 

        if (log.isDebugEnabled()) {
            log.debug("kobanDataItakuhiSantyutu() - end");
        }
    }

    /**
     * <p>
     * [概 要] 項番データ一覧照会。（詳細処理ID：316030011）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws BusinessException    参照結果が０件
     * @throws SystemException      システムエラー発生
     */
    public final void kobanDataSyokai() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("kobanDataSyokai() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書エンティティ生成
        final N5Buiuws02Entity entityUkw = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);

        // 受渡書エンティティ用ＤＴＯ生成
        final N5Buiuws02DTO dtoUkw = new N5Buiuws02DTO();

        // 受渡書エンティティ用DTOパラメータ設定
        dtoUkw.setSksCd(getRequestData(D_SKS_CD));
        dtoUkw.setSkjBan(getRequestData(D_SKJBAN));
        dtoUkw.setKkn(getRequestData(D_KKN));

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        List listUws = new ArrayList();

        // 受渡書エンティティ．項番データ照会の実行
        listUws = entityUkw.searchKobanData(dtoUkw);

        // 参照結果が０件の場合、業務エラーを発行
        if (listUws.size() == 0) {
            throw new BusinessException(new Message("NNCW0007")
                    , "UkewatashisyoSakuseiLogic#kobanDataSyokai()");
        }

        // 下り電文に項番データ一覧を追加
        addResponseData(D_LIST_KBADAT, listUws); 

        if (log.isDebugEnabled()) {
            log.debug("kyotuSyosaiSyokai() - end");
        }
    }

    /**
     * <p>
     * [概 要] 項番データ削除。（詳細処理ID：316030012）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws BusinessException    参照結果が０件
     * @throws SystemException      システムエラー発生
     */
    public final void kobanDataDelete() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("kobanDataDelete() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);
        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        List listUws = new ArrayList();

        // 上り電文から削除対象のROWIDをListに設定
        listUws = getRequestListData(D_LIST_KBADAT);

        for (int i = 0; i < listUws.size(); i++) {
            final List record = (List) listUws.get(i);

            // 受渡書エンティティ．項番データ削除の実行
            int deleteCount = entityUws.deleteKobanData(getRequestData(D_SKS_CD),
                                                            getRequestData(D_SKJBAN),
                                                            getRequestData(D_KKN),
                                                            (String) record.get(0),
                                                            (String) record.get(1));

            if (deleteCount == 0) {
                throw new BusinessException(new Message("NNCW0044")
                    , "UkewatashisyoSakuseiLogic#kobanDataDelete()");

            }
        }

        // 委託費按分ストアド呼出
        int result = entityUws.itakuhiAnbunStored(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));

        // ストアドの処理結果が0じゃなかった場合は業務例外
        if (result != 0) {
            String[] errKekka = {"委託費の按分処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kobanDataDelete()");
        }

        // 共通詳細個別契約費更新ストアド呼出
        result = entityKss.seisanbaraihiUpdateStored(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));

        // ストアドの処理結果が0じゃなかった場合は業務例外
        if (result != 0) {
            String[] errKekka = {"共通詳細個別契約費更新処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kobanDataDelete()");
        }
        
        // 承認解除処理
        int updSyoninCount = entityKss.syoninFlgUpdate(
                                                     // 施工組織コード
                                                     getRequestData(D_SKS_CD)
                                                     // 総合工事番号
                                                     , getRequestData(D_SKJBAN)
                                                     // 工事計画番号
                                                     , getRequestData(D_KKN));
        
        if (updSyoninCount == 0) {
            String[] errKekka = {"承認解除処理"};
            throw new BusinessException(new Message("NNCW0044", errKekka)
            , "UkewatashisyoSakuseiLogic#kobanDataDelete()");
        }
        

        if (log.isDebugEnabled()) {
            log.debug("kobanDataDelete() - end");
        }
    }

    /**
     * <p>
     * [概 要] 受渡書帳票データ検索。（詳細処理ID：316030013）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws BusinessException    参照結果が０件
     * @throws SystemException      システムエラー発生
     */
    public final void ukewatashiTyohyoDataKensaku() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiTyohyoDataKensaku() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書エンティティ生成
        final N5Buiuws02Entity entityUkw = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);

        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);

        // 含み工事情報エンティティ生成
        final N5Skifkj02Entity entityFkj = (N5Skifkj02Entity) getEntity(N5Skifkj02Entity.class);

        // 受渡書エンティティ用ＤＴＯ生成
        final N5Buiuws02DTO dtoUws = new N5Buiuws02DTO();

        // 含み工事情報エンティティ用ＤＴＯ生成
        final N5Skifkj02DTO dtoFkj = new N5Skifkj02DTO();

        // 受渡書エンティティ用DTOパラメータ設定
        dtoUws.setSksCd(getRequestData(D_SKS_CD));
        dtoUws.setSkjBan(getRequestData(D_SKJBAN));
        dtoUws.setKkn(getRequestData(D_KKN));

        // 含み工事情報エンティティ用DTOパラメータ設定
        dtoFkj.setSksCd(getRequestData(D_SKS_CD));
        dtoFkj.setSkjBan(getRequestData(D_SKJBAN));
        dtoFkj.setKkn(getRequestData(D_KKN));

        //***********************************************************************************************
        // 変数の宣言
        //***********************************************************************************************
        List listUws = new ArrayList();
        List listUwsSum = new ArrayList();
        List listKss = new ArrayList();
        List listFkj = new ArrayList();
        String titleNm = "";
        String csvFileNm = "";
        String tyohyoFileNm = "";

        // 帳票サーバ上に定義したJOBID
        String strJobId = "";
        // 処理種別
        int intDisposalType = 0;

        // 処理区分取得（オンラインの場合は、NULL）
        final String strSyrSbt = this.getRequestData(D_SYRSBT);
        //  センターコード = 接続先のセンターコード
        final String strCurrentCenterCode = this.getCenterCode();

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // バッチ処理からの呼び出しの場合
        if (C_SYRSBT_BAT.equals(strSyrSbt)) {

            // 一般計画工事共通ロジック生成
            N5300000_CommonLogic commonLogic = (N5300000_CommonLogic) getLogic(N5300000_CommonLogic.class);

            // 添付ファイルの場合は、７年保存帳票一連番号シーケンス（N5_SEQ44）から取得する
            final String strRecseq = commonLogic.n5300000_GetSequence("N5_SEQ44");

            strJobId = "P31603E010P";
            csvFileNm = this.getCenterCode() + "P31603E010" + this.getUserID() + DateUtil.getDate("hhmmss") + ".csv";

            tyohyoFileNm = "IPPN" 
                + getRequestData(D_SKS_CD) 
                + getRequestData(D_SKJBAN)
                + StringUtils.leftPad(getRequestData(D_KKN).replace("-", ""), 17, "0")
                + "0"
                + StringUtils.leftPad(strRecseq, 10, "0") 
                + getCenterCode() 
                + "P31603E010.pdf";

            intDisposalType = C_SYRKBN_BAT;
        } else {
            // オンライン処理からの呼び出しの場合
            strJobId = "P31603E010E";
            csvFileNm = "P31603E010" + this.getUserID() + DateUtil.getDate("hhmmss") + ".csv";
            tyohyoFileNm = "P31603E010" + this.getUserID() + DateUtil.getDate("hhmmss") + ".emf";
            intDisposalType = C_SYRKBN_ONLINE;
        }

        if (log.isDebugEnabled()) {
            String strDebug;
            strDebug = "UkewatashisyoSakuseiLogic#ukewatashiTyohyoDataKensaku():";
            log.debug(strDebug + "strJobId    [" + strJobId + "]");
            log.debug(strDebug + "csvFileNm   [" + csvFileNm + "]");
            log.debug(strDebug + "tyohyoFileNm[" + tyohyoFileNm + "]");
        }

        // 受渡書エンティティ．受渡書帳票データ検索の実行
        listUws = entityUkw.ukewatasishoTyohyoKensaku(dtoUws);

        // 受渡書エンティティ．受渡書帳票合計データ検索の実行
        listUwsSum = entityUkw.ukewatasishoTyohyoKensakuGoukei(dtoUws);

        // 共通詳細エンティティ．受渡書帳票データ検索の実行
        listKss = entityKss.ukewatasishoTyohyoKensaku(dtoUws);

        // 含み工事情報エンティティ．帳票作成時データ取得の実行
        listFkj = entityFkj.searchTyohyoData(dtoFkj);

        // 参照結果が０件の場合、業務エラーを発行
        if (listUws.size() == 0 || listKss.size() == 0 || listFkj.size() == 0) {
            // バッチ処理からの呼び出しの場合
            if (C_SYRSBT_BAT.equals(strSyrSbt)) {
                this.addResponseData(D_B_RTN, "100");
                // ファイル名:★DBがNOT NULLのため、ファイル名にエラーメッセージIDを設定する。
                this.addResponseData(D_B_OUT_FILE_NAME, "NNCW0007");
                this.addResponseData(D_B_ERRNAI, "出力対象の帳票がありませんでした");
                return;
            }

            throw new BusinessException(new Message("NNCW0007")
                    , "UkewatashisyoSakuseiLogic#ukewatashiTyohyoDataKensaku()");
        }

        // CSVデータを作成し、ファイルをAPサーバに保存
        FileIoUtil file = new FileIoUtil(SystemUtil.getSystemInfo("print.data.path") + csvFileNm
                                                , FileIoUtil.WRITE_STRING
                                                , FileIoUtil.WINDOWS_31J);

        final Object[] dataFromFkj = (Object[]) listFkj.get(0);

        /* 帳票名を設定 */
        if (dataFromFkj[2].equals("0")) {
            titleNm = "受渡書（一般受渡）";
        } else {
            titleNm = "受渡書（損益工事）";
        }

        // タイトル行の出力
        file.writeFileString("\"header\",\"" + T_TYOHYO_NM + "\",\"" + T_SYORI_SOSIKI + "\",\""
                                             + T_SOGO_KOJI_BANGO + "\",\"" + T_SOGO_KOJI_NM + "\",\""
                                             + T_UKEOI_COM_NM + "\",\"" + T_TYUMON_BANGO + "\",\""
                                             + T_TONYU_YM + "\",\"" + T_SYUTOKU_YM + "\",\""
                                             + T_KOJI_KEIKAKU_BANGO + "\",\"" + T_KOBETU_KOJI_NM + "\",\""
                                             + T_EN_KADO_JIKAN + "\",\""
                                             + T_TYAKKO_YMD + "\",\"" + T_SYUNKO_YMD + "\",\""
                                             + T_KANSEI_YMD + "\",\""
                                             + T_GAK_SUM + "\",\""
                                             + T_BUT_GAK_SUM + "\",\""
                                             + T_UKEOI_GAK_SUM + "\",\""
                                             + T_ITAKU_GAKU_SUM + "\",\""
                                             + T_SEISAN_GAK_SUM + "\",\""
                                             + T_GYOSYA_NM + "\",\""
                                             + T_SAKUSEISYA_NM + "\",\"" + T_SAGYO_KANTOKU_BANGO + "\",\""
                                             + T_KIJI_JODAN + "\",\"" + T_KIJI_GEDAN + "\",\""
                                             + T_KOBAN + "\",\"" + T_ZOGEN + "\",\""
                                             + T_MNG_SKH_CD + "\",\"" + T_SV_CD + "\",\""
                                             + T_BIL_CD + "\",\"" + T_ITM + "\",\""
                                             + T_MNG_KBN + "\",\"" + T_SETUBI + "\",\""
                                             + T_SYUMOKU + "\",\"" + T_SAIMOKU + "\",\""
                                             + T_SAIBUN + "\",\"" + T_HOKANKA_CD + "\",\""
                                             + T_KOBETU_CD + "\",\"" + T_KOBETU_RYAKUGO + "\",\""
                                             + T_KENSETU_NENDO + "\",\"" + T_KADOKAISI_NENDO + "\",\""
                                             + T_KAISI_NENGETU + "\",\""
                                             + T_KEITAI1 + "\",\"" + T_KEITAI2 + "\",\""
                                             + T_SYOKYAKU_KAHI + "\",\"" + T_KAISYO_YOTEI_YM + "\",\""
                                             + T_SURYO1 + "\",\"" + T_GAK + "\",\""
                                             + T_BUT_GAK + "\",\"" + T_UKEOI_GAK + "\",\""
                                             + T_ITAKU_GAKU + "\",\"" + T_SEISAN_GAK + "\",\""
                                             // 仕施44-0012により変更 --start
                                             + T_PEA_BANGO + "\",\""
                                             + T_SYUTOKU_KOJI_KEIKAKU_BANGO + "\"", true);
                                             // T_PEA_BANGO + "\"", true);
                                             // 仕施44-0012により変更 --end

        final Object[] headerRecord = (Object[]) listKss.get(0);
        final Object[] headerRecordSUM = (Object[]) listUwsSum.get(0);

        // header行の出力
        file.writeFileString("\"*\",\"" + titleNm + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_KAIKEI_SOSIKI]) + "\",\""
                                 + getRequestData(D_SKJBAN) + "\",\""
                                 + dataFromFkj[0].toString() + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_UKEOI_COM_NM]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_TYUMON_BANGO]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_TONYU_YM]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_SYUTOKU_YM]) + "\",\""
                                 + getRequestData(D_KKN) + "\",\""
                                 + dataFromFkj[1].toString() + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_ENKADO_JIKAN_SU]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_TYAKKO_YMD]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_SYUNKO_YMD]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_KANSEI_YMD]) + "\",\""
                                 + checkNullAndConvertString(headerRecordSUM[C_UWS_TYOHYO_GAK_SUM]) + "\",\""
                                 + checkNullAndConvertString(headerRecordSUM[C_UWS_TYOHYO_BUT_GAK_SUM]) + "\",\""
                                 + checkNullAndConvertString(headerRecordSUM[C_UWS_TYOHYO_UKEOI_GAK_SUM]) + "\",\""
                                 + checkNullAndConvertString(headerRecordSUM[C_UWS_TYOHYO_ITAKU_GAKU_SUM]) + "\",\""
                                 + checkNullAndConvertString(headerRecordSUM[C_UWS_TYOHYO_SEISAN_GAK_SUM]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_UKEOI_COM_NM]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_SAKUSEISYA_NM]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_SAGYO_KANTOKU_BANGO]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_KIJI1]) 
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_KIJI2]) + "\",\""
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_KIJI3])
                                 + checkNullAndConvertString(headerRecord[C_UWS_TYOHYO_KIJI4]) + "\"", true);

        // データ行の出力
        for (int i = 0; i < listUws.size(); i++) {

             final Object[] record = (Object[]) listUws.get(i);

             // JTEEST:PB.LOGIC.AOBO-2
             int size = record.length - 1;
             for (int x = 0; x < size; x++) {
                 if (record[x] == null) {
                     file.writeFileString("\"\",", false);
                 } else {
                     file.writeFileString("\"" + record[x].toString() + "\",", false);
                 }
             }
             if (record[record.length - 1] == null) {
                 file.writeFileString("\"\"", true);
             } else {
                 file.writeFileString("\"" + record[record.length - 1].toString() + "\"", true);
             }
        }

        // ファイルのクローズ
        file.closeFile();

        ReportCreator report = new ReportCreator();
        report.execute(strJobId, intDisposalType, csvFileNm, tyohyoFileNm, strCurrentCenterCode);

        // バッチ処理からの呼び出しの場合
        if (C_SYRSBT_BAT.equals(strSyrSbt)) {
            this.addResponseData(D_B_OUT_FILE_NAME, tyohyoFileNm);
            this.addResponseData(D_B_RTN, "0");
            this.addResponseData(D_B_ERRNAI, "");
        } else {
            addResponseData(D_PRNIMGFIL_NM, tyohyoFileNm);
        }

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiTyohyoDataKensaku() - end");
        }
    }

    /**
     * <p>
     * [概 要] 明細リストデータ検索。（詳細処理ID：316030014）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws BusinessException    参照結果が０件
     * @throws SystemException      システムエラー発生
     */
    public final void meisaiListDataKensaku() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("meisaiListDataKensaku() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 記載工程細分別情報エンティティ生成
        final N5Skiksksib02Entity entityMeisai = (N5Skiksksib02Entity) getEntity(N5Skiksksib02Entity.class);

        // 含み工事情報エンティティ生成
        final N5Skifkj02Entity entityFkj = (N5Skifkj02Entity) getEntity(N5Skifkj02Entity.class);

        // 含み工事情報エンティティ用ＤＴＯ生成
        final N5Skifkj02DTO dtoFkj = new N5Skifkj02DTO();

        //***********************************************************************************************
        // 変数の宣言
        //***********************************************************************************************
        // csvファイル名、emfファイル名を設定
        String csvFileNm = this.getCenterCode() + "P316030011" + this.getUserID() + DateUtil.getDate("hhmmss") + ".csv";
        String tyohyoFileNm = "";
        // 処理種別
        int intDisposalType = 0;
        // 処理区分取得（オンラインの場合は、NULL）
        final String strSyrSbt = this.getRequestData(D_SYRSBT);

        // SVFの処理ID
        String strJobId = "";
        // センターコード = 接続先のセンターコード
        final String strCurrentCenterCode = this.getCenterCode();

        // 明細リストデータ検索の実行結果を格納する
        List listMeisai = new ArrayList(); 
        // 帳票作成時データ取得の実行結果を格納する
        List listFkj = new ArrayList();

        // 含み工事情報エンティティ用DTOパラメータ設定
        dtoFkj.setSksCd(getRequestData(D_SKS_CD));
        dtoFkj.setSkjBan(getRequestData(D_SKJBAN));
        dtoFkj.setKkn(getRequestData(D_KKN));

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // バッチ処理からの呼び出しの場合
        if (C_SYRSBT_BAT.equals(strSyrSbt)) {

            // 一般計画工事共通ロジック生成
            N5300000_CommonLogic commonLogic = (N5300000_CommonLogic) getLogic(N5300000_CommonLogic.class);

            // 添付ファイルの場合は、７年保存帳票一連番号シーケンス（N5_SEQ44）から取得する
            final String strRecseq = commonLogic.n5300000_GetSequence("N5_SEQ44");

            tyohyoFileNm = "IPPN" 
                + getRequestData(D_SKS_CD) 
                + getRequestData(D_SKJBAN)
                + StringUtils.leftPad(getRequestData(D_KKN).replace("-", ""), 17, "0")
                + "0"
                + StringUtils.leftPad(strRecseq, 10, "0") 
                + getCenterCode() 
                + "P316030011.pdf";

            intDisposalType = C_SYRKBN_BAT;
            strJobId = "P316030011P";
        } else {
            tyohyoFileNm = "P316030011" + this.getUserID() + DateUtil.getDate("hhmmss") + ".emf";
            intDisposalType = C_SYRKBN_ONLINE;
            strJobId = "P316030011E";
        }

        if (log.isDebugEnabled()) {
            String strDebug;
            strDebug = "UkewatashisyoSakuseiLogic#meisaiListDataKensaku():";
            log.debug(strDebug + "strJobId    [" + strJobId + "]");
            log.debug(strDebug + "csvFileNm   [" + csvFileNm + "]");
            log.debug(strDebug + "tyohyoFileNm[" + tyohyoFileNm + "]");
        }

        // 記載工程細分別情報エンティティ．明細リストデータ検索の実行
        listMeisai = entityMeisai.meisaiListKensaku(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));

        // 含み工事情報エンティティ．帳票作成時データ取得の実行
        listFkj = entityFkj.searchTyohyoData(dtoFkj);

        // 参照結果が０件の場合、業務エラーを発行
        if (listMeisai.size() == 0) {
            // バッチ処理からの呼び出しの場合
            if (C_SYRSBT_BAT.equals(strSyrSbt)) {
                this.addResponseData(D_B_RTN, "100");
                // ファイル名:★DBがNOT NULLのため、ファイル名にエラーメッセージIDを設定する。
                this.addResponseData(D_B_OUT_FILE_NAME, "NNCW0007");
                this.addResponseData(D_B_ERRNAI, "出力対象の帳票がありませんでした");
                return;
            }

            throw new BusinessException(new Message("NNCW0007")
                    , "UkewatashisyoSakuseiLogic#meisaiListDataKensaku()");
        }

        final Object[] dataFromFkj = (Object[]) listFkj.get(0);

        // CSVデータを作成し、ファイルをAPサーバに保存
        FileIoUtil file = new FileIoUtil(SystemUtil.getSystemInfo("print.data.path") + csvFileNm
                                                , FileIoUtil.WRITE_STRING
                                                , FileIoUtil.WINDOWS_31J);

        //  タイトル行の出力
        file.writeFileString("\"header\",\"" + T_MEISAI_SOGO_KOJI_BANGO + "\",\"" + T_MEISAI_SOGO_KOJI_NM + "\",\""
                                                 + T_KOBETU_KOJI_BANGO + "\",\"" + T_MEISAI_KOBETU_KOJI_NM + "\",\""
                                                 + T_MEISAI_ZOGEN + "\",\"" + T_MEISAI_BIL_CD + "\",\""
                                                 + T_MEISAI_ITM + "\",\"" + T_MEISAI_MNG_KBN + "\",\""
                                                 + T_MEISAI_SETUBI + "\",\"" + T_MEISAI_SYUMOKU + "\",\""
                                                 + T_MEISAI_SAIMOKU + "\",\"" + T_MEISAI_SAIBUN + "\",\""
                                                 + T_SAIBUN_NM + "\",\"" + T_MEISAI_HOKANKA_CD + "\",\""
                                                 + T_MEISAI_KAISI_NENGETU + "\",\"" + T_UKW_SRO + "\",\""
                                                 + T_KSB_CD + "\",\"" + T_KSK_CD + "\",\""
                                                 + T_NSMNGBAN + "\",\"" + T_KSK_NM + "\",\""
                                                 + T_TANI + "\",\"" + T_SRO + "\",\""
                                                 + T_UKEOIHI + "\",\"" + T_ZSIBETU + "\",\""
                                                 + T_BUT_CD_KANA + "\",\"" + T_AB_LEN + "\",\""
                                                 + T_BUT_SRO + "\",\"" + T_BUTHI + "\"", true);

        // header行の出力
        file.writeFileString("\"*\",\"" + getRequestData(D_SKJBAN) + "\",\""
                                             + dataFromFkj[0].toString() + "\",\""
                                             + getRequestData(D_KKN) + "\",\""
                                             + dataFromFkj[1].toString() + "\"", true);

        // データ行の出力
        for (int i = 0; i < listMeisai.size(); i++) {
             final Object[] record = (Object[]) listMeisai.get(i);

             // 共通項目(増減科目～開始年月）の出力
             for (int x = C_MEISAI_LIST_ZOG; x <= C_MEISAI_LIST_SYM; x++) {
                 if (record[x] == null) {
                     file.writeFileString("\"\",", false);
                 } else {
                     file.writeFileString("\"" + record[x].toString() + "\",", false);
                 }
             }
             // 記載工程データの出力
             // 受渡数量～物品数量までを出力（カンマ区切り）
             for (int x = C_MEISAI_LIST_UWS_SURYO; x <= C_MEISAI_LIST_BUT_SURYO; x++) {
                 if (record[x] == null) {
                     file.writeFileString("\"\",", false);
                 } else {
                     file.writeFileString("\"" + record[x].toString() + "\",", false);
                 }
             }
             // 物品費を出力（改行コード）
             if (record[C_MEISAI_LIST_BUT_GAK] == null) {
                 file.writeFileString("\"\"", true);
             } else {
                 file.writeFileString("\"" + record[C_MEISAI_LIST_BUT_GAK].toString() + "\"", true);
             }
        }

        // ファイルのクローズ
        file.closeFile();

        ReportCreator report = new ReportCreator();
        report.execute(strJobId, intDisposalType, csvFileNm, tyohyoFileNm, strCurrentCenterCode);

        // バッチ処理からの呼び出しの場合
        if (C_SYRSBT_BAT.equals(strSyrSbt)) {
            this.addResponseData(D_B_OUT_FILE_NAME, tyohyoFileNm);
            this.addResponseData(D_B_RTN, "0");
            this.addResponseData(D_B_ERRNAI, "");
        } else {
            addResponseData(D_PRNIMGFIL_NM, tyohyoFileNm);
        }

        if (log.isDebugEnabled()) {
            log.debug("meisaiListDataKensaku() - end");
        }
    }

    /**
     * <p>
     * [概 要] 項番データ登録。（詳細処理ID：316030015）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws SystemException システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void kobanDataTouroku() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("kobanDataTouroku() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************
        // 受渡書エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);

        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);

        // 受渡書エンティティ用ＤＴＯ生成
        final N5Buiuws02DTO dto = new N5Buiuws02DTO();

        dto.setSksCd(getRequestData(D_SKS_CD));
        dto.setSkjBan(getRequestData(D_SKJBAN));
        dto.setKkn(getRequestData(D_KKN));
        dto.setKba(getRequestData(D_KBA));
        dto.setKbaShoki(getRequestData(D_KBA_SHOKI));
        dto.setBilCd(getRequestData(D_BILSKK_CD));
        dto.setZog(getRequestData(D_ZOG));
        dto.setItm(getRequestData(D_ITM));
        dto.setMngKbn(getRequestData(D_MNGKBN));
        dto.setMngSkhCd(getRequestData(D_MNGSKH_CD));
        dto.setMngSkhNmCd(getRequestData(D_MNGSKH_NM_CD));
        dto.setSvCd(getRequestData(D_SV_CD));
        dto.setSetubi(getRequestData(D_SBI));
        dto.setSyumoku(getRequestData(D_SYU));
        dto.setSaimoku(getRequestData(D_SMK));
        dto.setSaibun(getRequestData(D_SBN));
        dto.setHkkCd(getRequestData(D_HKK_CD));
        dto.setKobCd(getRequestData(D_KOB_CD));
        dto.setKobRkg(getRequestData(D_KOBRKG));
        dto.setKnd(getRequestData(D_KND));
        dto.setKsy(getRequestData(D_KSY));
        dto.setSym(getRequestData(D_SYM));
        dto.setSro001(getRequestData(D_SRO001));
        dto.setGak(getRequestData(D_GAK));
        dto.setButGak(getRequestData(D_BUTGAK));
        dto.setUoiGak(getRequestData(D_UOIGAKU));
        dto.setSebGak(getRequestData(D_SEB_HI));
        dto.setKti001(getRequestData(D_KTI001));
        dto.setKti002(getRequestData(D_KTI002));
        dto.setSyoKhi(getRequestData(D_SYOKHI));
        dto.setKshyti(getRequestData(D_KSHYTI_YM));
        dto.setPea(getRequestData(D_PEA));

        // 仕施44-0012により追加 --start
        dto.setSytKkn(getRequestData(D_SYTKKN));
        // 仕施44-0012により追加 --end

        // 一般施工58 追加 start
        dto.setBko1(getRequestData(D_BIKO1));
        dto.setBko2(getRequestData(D_BIKO2));
        // 一般施工58 追加 end
        
        // 9次2期 add start
        dto.setWorkStartDd(getRequestData(D_WORK_START_DD));
        // 9次2期 add end
        dto.setSytDd(getRequestData(D_SYT_DD));

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************

        // 下り電文用更新後更新カウンタ
        String updCntAfterUpdate = "";

        // 追加、修正時のみのチェックを実施する
        if (!getRequestData(D_SYORI_KBN).equals(C_SYORIKBN_UPDATE_IKKATU)) {

            // 一般施工58 追加･修正 start
            // 項目部重複チェックを実施する
            if ("".equals(getRequestData(D_SYM))) {
                // 開始前設備の場合
                if (entityUws.kobanDataKomokubuTyofukuCheck(dto, true) != 0) {
                    throw new BusinessException(new Message("NNCW0106")
                        , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
                }
            } else {
                // 開始設備の場合
                if (entityUws.kobanDataKomokubuTyofukuCheck(dto, false) != 0) {
                    throw new BusinessException(new Message("NNCW1101")
                        , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
                }
            }
            // 一般施工58 追加･修正 end
        }

        // 追加のチェックを実施する
        if (getRequestData(D_SYORI_KBN).equals(C_SYORIKBN_ADD)) {
            // 主キー部重複チェックを行う
            if (entityUws.kobanDataPrimaryKeyTyofukuCheck(dto) != 0) {
                String[] errKekka = {"施工組織コード、総合工事名、工事計画番号、項番"};
                throw new BusinessException(new Message("NNCW0027", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }
        }

        // 修正時かつ、修正前後で項番が変更されているときのチェックを実施する
        if (getRequestData(D_SYORI_KBN).equals(C_SYORIKBN_UPDATE)
                && !getRequestData(D_KBA).equals(getRequestData(D_KBA_SHOKI))) {
            // 主キー部重複チェックを行う            
            if (entityUws.kobanDataPrimaryKeyTyofukuCheck(dto) != 0) {
                String[] errKekka = {"施工組織コード、総合工事名、工事計画番号、項番"};
                throw new BusinessException(new Message("NNCW0027", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }
        }

        // 処理区分が"0"(修正）のとき
        if (getRequestData(D_SYORI_KBN).equals(C_SYORIKBN_UPDATE)) {

            // 受渡書エンティティの項番データを実行
            int updCount = entityUws.update(dto, getRequestData(D_LIST_UPD_CNT).split("/")[0]);

            if (updCount == 0) {
                String[] errKekka = {"修正処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }
            
            // 承認解除処理
            int updSyoninCount = entityKss.syoninFlgUpdate(
                                                     // 施工組織コード
                                                     getRequestData(D_SKS_CD)
                                                     // 総合工事番号
                                                     , getRequestData(D_SKJBAN)
                                                     // 工事計画番号
                                                     , getRequestData(D_KKN));

            if (updSyoninCount == 0) {
                String[] errKekka = {"承認解除処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }

            // 委託費按分ストアド呼出
            int result = entityUws.itakuhiAnbunStored(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));

            // ストアドの処理結果が0じゃなかった場合は業務例外
            if (result != 0) {
                String[] errKekka = {"委託費の按分処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }

            // 共通詳細個別契約費更新ストアド呼出
            result = entityKss.seisanbaraihiUpdateStored(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));

            // ストアドの処理結果が0じゃなかった場合は業務例外
            if (result != 0) {
                String[] errKekka = {"共通詳細個別契約費更新処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }
            if (Long.valueOf(getRequestData(D_LIST_UPD_CNT).split("/")[0]) + 1 > Long.valueOf("9999999999")) {
                updCntAfterUpdate = updCntAfterUpdate + "1/";
            } else {
                updCntAfterUpdate = updCntAfterUpdate + String.valueOf((Long.valueOf(getRequestData(D_LIST_UPD_CNT).split("/")[0]) + 1)) + "/";
            }
        // 処理区分が"1"(一括修正）のとき
        } else if (getRequestData(D_SYORI_KBN).equals(C_SYORIKBN_UPDATE_IKKATU)) {

            String[] updCnt = getRequestData(D_LIST_UPD_CNT).split("/");
            String[] kbaList = getRequestData(D_LIST_KBADAT).split("/");

            int updCount = 0;

            for (int i = 0; i < updCnt.length; i++) {
                updCount = entityUws.updateIkkatu(dto, kbaList[i], updCnt[i]);

                if (updCount == 0) {
                    String[] errKekka = {"一括修正処理"};
                    throw new BusinessException(new Message("NNCW0044", errKekka)
                        , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
                }

                if (Long.valueOf(updCnt[i]) + 1 > Long.valueOf("9999999999")) {
                    updCntAfterUpdate = updCntAfterUpdate + "1/";
                } else {
                    updCntAfterUpdate = updCntAfterUpdate + String.valueOf((Long.valueOf(updCnt[i]) + 1)) + "/";
                }
            }
            
            // 承認解除処理
            int updSyoninCount = entityKss.syoninFlgUpdate(
                                                     // 施工組織コード
                                                     getRequestData(D_SKS_CD)
                                                     // 総合工事番号
                                                     , getRequestData(D_SKJBAN)
                                                     // 工事計画番号
                                                     , getRequestData(D_KKN));

            if (updSyoninCount == 0) {
                String[] errKekka = {"承認解除処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }
            
        // 処理区分が"2"(追加）のとき
        } else if (getRequestData(D_SYORI_KBN).equals(C_SYORIKBN_ADD)) {

            //**************************************************************************
            // 主キー部重複チェックでエラーで無かった場合は登録処理を行う
            //**************************************************************************

            // 登録処理
            int updCount = entityUws.insert(dto);

            if (updCount == 0) {
                String[] errKekka = {"修正処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }

            // 委託費按分ストアド呼出
            int result = entityUws.itakuhiAnbunStored(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));

            // ストアドの処理結果が0じゃなかった場合は業務例外
            if (result != 0) {
                String[] errKekka = {"委託費の按分処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }
            // 共通詳細個別契約費更新ストアド呼出
            result = entityKss.seisanbaraihiUpdateStored(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));

            // ストアドの処理結果が0じゃなかった場合は業務例外
            if (result != 0) {
                String[] errKekka = {"共通詳細個別契約費更新処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }
            
            // 承認解除処理
            int updSyoninCount = entityKss.syoninFlgUpdate(
                                                     // 施工組織コード
                                                     getRequestData(D_SKS_CD)
                                                     // 総合工事番号
                                                     , getRequestData(D_SKJBAN)
                                                     // 工事計画番号
                                                     , getRequestData(D_KKN));

            if (updSyoninCount == 0) {
                String[] errKekka = {"承認解除処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                , "UkewatashisyoSakuseiLogic#kobanDataTouroku()");
            }

        }

        // 下り電文に更新後更新カウンタを設定
        addResponseData(D_LIST_UPD_CNT, updCntAfterUpdate);

        if (log.isDebugEnabled()) {
            log.debug("kobanDataTouroku() - end");
        }
    }

    /**
     * <p>
     * [概 要] 増減科目定数一覧照会。（詳細処理ID：316030016）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @throws BusinessException    参照結果が０件
     * @throws SystemException      システムエラー発生
     */
    public final void zogenKamokuIchiranSyokai() throws BusinessException, SystemException {

        if (log.isDebugEnabled()) {
            log.debug("zogenKamokuIchiranSyokai() - start");
        }

        List listZog = new ArrayList();

        // 増減科目定数エンティティ生成
        final N5Budzog02Entity entityZog = (N5Budzog02Entity) getEntity(N5Budzog02Entity.class);

        // 増減科目定数エンティティ．増減科目コード検索の実行
        listZog = entityZog.search(getRequestData(D_SOEKBN));

        // 下り電文に含み工事一覧を追加
        addResponseData(D_LIST_ZOG, listZog); 

        if (listZog.size() == 0) {
            // 参照結果が０件の場合、業務エラーを発行
            throw new BusinessException(new Message("NNCW0007")
                    , "UkewatashisyoSakuseiLogic#zogenKamokuIchiranSyokai()");
        }

        if (log.isDebugEnabled()) {
            log.debug("zogenKamokuIchiranSyokai() - end");
        }
    }

    /**
     * <p>
     * [概 要] 受渡ＦＤファイルアップロード。（詳細処理ID：316030017）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考] 仕施44-0007により追加
     * </p>
     *
     * @throws SystemException      システムエラー発生
     */
    public final void ukewatashiFdFileUpload() throws SystemException {

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiFdFileUpload() - start");
        }

        // アップロードファイルの置き場所のパス(一時保存フォルダパスのキー)を取得
        String tmpFdPath = getHozonPath(FILE_TMP_SAVE_KEY);
        // NW流通用ファイルの格納フォルダのパス(ＥＡＩ指定のフォルダのパスのキー)を取得
        String outFdPath = getHozonPath(FILE_SAVE_KEY);

        // 受渡CSVファイル出力形態
        final String outKti = getRequestData(D_UWS_CSV_FILE_OUT_KTI);
        
        // アップロードファイル名
        final String uploadFileName = getRequestData(D_UPLOAD_FILE_NAME);
        
        // アップロードファイルのフルパスを作成
        StringBuilder tmpPath = new StringBuilder();
        tmpPath.append(tmpFdPath).append(uploadFileName);
        final String datTmpPath = tmpPath.toString();

        // NW流通用ファイルのフルパスを作成
        StringBuilder path = new StringBuilder();
        path.append(outFdPath).append(uploadFileName);
        final String datPath = path.toString();
        log.debug("path - " + datPath);
        
        // 下り電文返却用のフルパス
        String resFdPath = "";
        
        // アップロードファイル保存
        FileIoUtil fileIo = new FileIoUtil(datTmpPath, FileIoUtil.WRITE_BINARY);
        try {
            fileIo.writeFileBinary(getUploadFile());
        } finally {
            // アップロードされたファイルをクローズする
            fileIo.closeFile();
        }
        
        if (D_OUT_TMP_SAVE.equals(outKti)) {
            // アップロードファイルのバックアップファイルパス
            final String backupUploadFilePath = datTmpPath + "_backup";
            
            // バックアップファイル作成
            FileIoUtil backupFileIoRead = new FileIoUtil(datTmpPath, FileIoUtil.READ_BINARY);
            FileIoUtil backupFileWrite = new FileIoUtil(backupUploadFilePath, FileIoUtil.WRITE_BINARY);
            try {
                backupFileWrite.writeFileBinary(backupFileIoRead.readFileBinary());
            } finally {
                backupFileIoRead.closeFile();
                backupFileWrite.closeFile();
            }
            
            // 流通不可文字一括変換後ファイルパス
            final String changeUploadFilePath = datTmpPath + "_change";
            
            // 流通不可文字一括変換
            boolean bfd = FileUtil.convertSJISFileBadChar(datTmpPath, changeUploadFilePath, SOUSIN_KEIRI);
            log.debug("流通不可文字一括変換結果 - " + bfd);

            // 流通文字一括変換処理に失敗した場合
            if (!bfd) {
                // システム例外を設定する
                throw new SystemException("E-10004", "convertSJISFileBadChar");
            }
            
            // アップロードファイルを流通不可文字変換後のファイルで上書きする
            FileIoUtil renameChange = new FileIoUtil(changeUploadFilePath, FileIoUtil.READ_BINARY);
            FileIoUtil renameUpload = new FileIoUtil(datTmpPath, FileIoUtil.WRITE_BINARY);
            try {
                renameUpload.writeFileBinary(renameChange.readFileBinary());
            } finally {
                renameChange.closeFile();
                renameUpload.closeFile();
            }
            
            //下り電文返却用のフルパスに設定
            resFdPath = datTmpPath;
           
        } else if(D_OUT_SAVE.equals(outKti)) {
            
            // 流通不可文字一括変換
            boolean bfd = FileUtil.convertSJISFileBadChar(datTmpPath, datPath, SOUSIN_KEIRI);
            log.debug("流通不可文字一括変換結果 - " + bfd);

            // 流通文字一括変換処理に失敗した場合
            if (!bfd) {
                // システム例外を設定する
                throw new SystemException("E-10004", "convertSJISFileBadChar");
            }
            
            // ＥＡＩ指定の退避フォルダのパスを取得
            String outFdBackupPath = getHozonPath(FILE_SAVE_BACKUP_KEY);

            // ＥＡＩ指定の退避フォルダにコピー
            File backupFile = new File(datPath);
            FileUtil.copyFile(backupFile, outFdBackupPath);
            
            // FINファイルのパスを生成
            final String finPath = datPath.replaceFirst(TARGET_EXT + "$", TARGET_READY_EXT);

            // 受渡ＦＤファイルと同じ保存先パスに、FINファイルを空ファイルで作成する
            FileIoUtil finFile = new FileIoUtil(finPath, FileIoUtil.WRITE_STRING, FileIoUtil.EUC_JP);

            // FINファイルをクローズする
            finFile.closeFile();
            
            // アップロードファイル削除
            FileUtil.deleteFile(new File(datTmpPath));
            
            //下り電文返却用のフルパスに設定
            resFdPath = datPath;
            
        }

        // 下り電文に文字変換後のファイル名を追加
        addResponseData(D_DOWNLOAD_FILE_NAME, resFdPath);

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiFdFileUpload() - end");
        }
    }

    /**
     * <p>
     * [概 要] 受渡ＦＤファイルダウンロード。（詳細処理ID：316030018）
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考] 仕施44-0007により追加
     * </p>
     *
     * @throws SystemException      システムエラー発生
     * 
     * @throws FileNotFoundException FileNotFoundエラー発生
     */
    public final void ukewatashiFdFileDownload() throws SystemException, FileNotFoundException {

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiFdFileDownload() - start");
        }

        // ダウンロードファイル名
        final String downloadFileName = getRequestData(D_DOWNLOAD_FILE_NAME);
        log.debug("downloadFileName - " + downloadFileName);

        // ダウンロードファイル取得
        FileIoUtil fileIo = new FileIoUtil(downloadFileName, FileIoUtil.READ_BINARY);

        // ファイルダウンロード処理
        setDownloadFile(fileIo.readFileBinary());

        if (log.isDebugEnabled()) {
            log.debug("ukewatashiFdFileDownload() - end");
        }
    }

    /**
     * <p>[概 要] ダウンロードファイル削除。（詳細処理ID：316030021）</p>
     * <p>[詳 細] </p>
     * <p>[備 考] </p>
     */
    public final void downloadFileDelete() {
        
        // ダウンロード名取得
        final String downloadFileName = getRequestData(D_DOWNLOAD_FILE_NAME);
        
        // ダウンロードファイル削除
        FileUtil.deleteFile(new File(downloadFileName));
        
        // 流通不可文字変換後ファイル削除
        FileUtil.deleteFile(new File(downloadFileName + "_change"));
        
        // バックアップファイル削除
        FileUtil.deleteFile(new File(downloadFileName + "_backup"));
        
    }

    /**
     * <p>[概 要] 工事内訳書情報登録ファイル作成。（詳細処理ID：316030022）</p>
     * <p>[詳 細] </p>
     * <p>[備 考] </p>
     * 
     * @throws SystemException      システムエラー発生
     * @throws BusinessException 業務例外発生
     */
    public final void kojiUtiwakeTourokuFileSakusei() throws BusinessException, SystemException {
        
        if (log.isDebugEnabled()) {
            log.debug("kojiUtiwakeTourokuFileSakusei() - start");
        }
        
        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************
        
        // 所内内訳GAIA送信エンティティ生成
        final N5Buiutwgiassn01Entity entitySsn = (N5Buiutwgiassn01Entity) getEntity(N5Buiutwgiassn01Entity.class);
        
        // GAIA送信履歴管理エンティティ生成
        final N5Buigiassnrrk01Entity entityRrk = (N5Buigiassnrrk01Entity) getEntity(N5Buigiassnrrk01Entity.class);
        
        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);
        
        // 会計組織変換定数エンティティ生成
        final N5KkiscdCnvEntity entityKkiscdCnv = (N5KkiscdCnvEntity) getEntity(N5KkiscdCnvEntity.class);

        // 工事内訳書情報登録リクエストボディ部用VO
        N5BreakdownOfWorkOrderVO breakdownOfWorkOrder = null;
        
        // JAX-RSのクライアントクラス
        N5RestClientVO requestParam = new N5RestClientVO();
        
        // クライアント要求呼び出しビルダー
        Builder invocationBuilder;
        
        // Entityインスタンス
        Entity<N5BreakdownOfWorkOrderVO> entityVo = null;
        
        // 上り電文取得
        final String sksCd = getRequestData(D_SKS_CD);  // 施工組織コード
        final String sksNm = getRequestData(D_SKS_NM);  // 施工組織名
        final String skjban = getRequestData(D_SKJBAN); // 総合工事番号
        final String skjNm = getRequestData(D_SKJ_NM);  // 総合工事名
        final String kkn = getRequestData(D_KKN);       // 工事計画番号
        final String kojNm = getRequestData(D_KOJ_NM);  // 工事名
        
        // 共通詳細エンティティ用ＤＴＯ生成
        final N5Buikss02DTO dtoKss = new N5Buikss02DTO();

        // 共通詳細エンティティ用DTOパラメータ設定
        dtoKss.setSksCd(sksCd);
        dtoKss.setSkjBan(skjban);
        dtoKss.setKkn(kkn);
        
        // 共通詳細存在チェックの実行
        List listKss = entityKss.kyotuSyosaiSonzaiCheck(dtoKss);

        // 該当データが存在しない場合は業務例外を発行
        if (listKss.size() == 0) {
            throw new BusinessException(new Message("NNCW1100")
                    , "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }

        Object[] objKss = (Object[]) listKss.get(0);
        
        // 会計組織コード（新）がNULLの場合は
        // 業務例外を発行
        if (objKss[C_KSS_SONZAI_CHECK_KKISCD] == null) {
            throw new BusinessException(new Message("NNCW0115", new String[] {"会計組織コード"})
                , "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }
        
        // 任意が存在するかチェックする
        List listnini = entityKkiscdCnv.findnini(objKss[C_KSS_SONZAI_CHECK_KKISCD].toString());
        // 取得したデータ数が０件の場合は業務例外を発行
        if (listnini.size() == 0) {
            throw new BusinessException(new Message("NNCE2001", new String[] { "会計組織変換定数" }),
                "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }
        
        // 所内内訳GAIA送信エンティティ．所内内訳GAIA送信削除の実行
        int delCount = entitySsn.delete(getRequestData(D_SKS_CD), getRequestData(D_SKJBAN), getRequestData(D_KKN));
        if( log.isDebugEnabled() ) {
            log.debug("所内内訳GAIA送信エンティティ．所内内訳GAIA送信削除件数：" + delCount);
        }
        
        // 工事内訳書情報登録リクエストボディ部用VO作成処理を呼び出す
        breakdownOfWorkOrder = N5BreakdownOfWorkOrderVOCreate(sksCd, sksNm, skjban, skjNm, kkn, kojNm);
        if( log.isDebugEnabled() ) {
            log.debug("工事内訳書情報登録リクエストボディ部用VO：" + breakdownOfWorkOrder.toString());
        }
        
        entityVo = Entity.entity(breakdownOfWorkOrder, MEDIA_TYPE_JSON);
        
        // 方式提供のプロパティを設定する
        requestParam.setRestReadTimeout(Integer.parseInt(SystemUtil.getSystemInfo("gaia.read.timeout")));       // リクエストのタイムアウト時間
        requestParam.setRestConnectTimeout(Integer.parseInt(SystemUtil.getSystemInfo("gaia.connect.timeout"))); // コネクションのタイムアウト時間
        requestParam.setBasicAuthUser(SystemUtil.getSystemInfo("gaia.user"));                                   // ＨＴＴＰのユーザ名
        requestParam.setBasicAuthPassword(SystemUtil.getSystemInfo("gaia.password"));                           // ＨＴＴＰのパスワード
        requestParam.setUrl(SystemUtil.getSystemInfo("gaia.uri"));                                              // ＵＲＬ
        requestParam.setResource("");                                                                           // リソース名
        
        Map<String, String> queryParamMap = new LinkedHashMap<String, String>();
        queryParamMap.put(GYOUMID, SystemUtil.getSystemInfo("gaia.resource.name5"));
        requestParam.setQueryParamMap(queryParamMap);
        
        invocationBuilder = setParam(requestParam);
        
        // RestClientインスタンスのexecutePost呼び出し
        Response response = null;
        response = executePost(invocationBuilder, entityVo);
        
        // HTTPステータス
        int httpStatus = 0;
        // EAIレスポンスヘッダ．コンテンツタイプ
        MediaType mediaType = null;
        // EAIレスポンスヘッダ．リターンコード
        String headReturn = null; 
        // EAIレスポンスヘッダ．ステータス
        String headStatus = null;
        
        // RestClientインスタンスのexecutePost戻り値判定
        httpStatus = response.getStatus();
        mediaType = response.getMediaType();
        headReturn = response.getHeaderString(RES_HERD_RETURN);
        headStatus = response.getHeaderString(RES_HERD_STATUS);
        
        // HTTPステータスコードが“200”以外の場合
        if (httpStatus != HTTP_OK) {
            log.error("N-GAIA連携エラー(HTTPステータス不正) " +
                    "HttpStatus=[" + httpStatus + "] " +
                    "MediaType=[" + mediaType + "] " +
                    "Head-Return=[" + headReturn + "] " +
                    "Head-Status=[" + headStatus + "]");
            throw new SystemException("E-10099", "N-GAIA連携エラー(HTTPステータス不正)"
                    , "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }
        
        // レスポンスヘッダのリターンコードが“0000”以外かつ“E002”以外の場合
        if (!HEAD_RET_NORMAL.equals(headReturn) && !HEAD_RET_GAIA_ERR.equals(headReturn)) {
            log.error("N-GAIA連携エラー(リターンコード不正) " +
                    "HttpStatus=[" + httpStatus + "] " +
                    "MediaType=[" + mediaType + "] " +
                    "Head-Return=[" + headReturn + "] " +
                    "Head-Status=[" + headStatus + "]");
            throw new SystemException("E-10099", "N-GAIA連携エラー(リターンコード不正)"
                    , "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }
        
        // レスポンスヘッダのステータスコードが“200”以外かつ“500”以外の場合
        if (!HEAD_STS_OK.equals(headStatus) && !HEAD_STS_SERVER_ERR.equals(headStatus)) {
            log.warn("N-GAIA連携エラー(ステータス不正) " +
                    "HttpStatus=[" + httpStatus + "] " +
                    "MediaType=[" + mediaType + "] " +
                    "Head-Return=[" + headReturn + "] " +
                    "Head-Status=[" + headStatus + "]");
            throw new BusinessException(new Message("NNCE0990",new String[] {"受渡書作成", "kojiUtiwakeTourokuFileSakusei"
                    , ""}), "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }
        
        // レスポンスヘッダのコンテンツタイプが“application/json;charset=UTF-8”以外の場合
        if (!MEDIA_TYPE_JSON.equals(mediaType.toString())) {
            log.error("N-GAIA連携エラー(Content-Type不正) " +
                    "HttpStatus=[" + httpStatus + "] " +
                    "MediaType=[" + mediaType + "] " +
                    "Head-Return=[" + headReturn + "] " +
                    "Head-Status=[" + headStatus + "]");
            throw new SystemException("E-10099", "N-GAIA連携エラー(Content-Type不正)"
                    , "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }
        
        // HTTPレスポンスコードを判定しレスポンスの取得
        N5CommonResponseVO commonResponse = new N5CommonResponseVO();
        
        // レスポンスボディ部解析
        commonResponse = response.readEntity(N5CommonResponseVO.class);
        
        String resultCode = "";
        String errMessage = "";
        // 処理結果（エラーコード）取得
        if (commonResponse != null) {
            resultCode = commonResponse.getResultCode();
            errMessage = commonResponse.getErrorMessage();
        }
        // レスポンスヘッダのステータスコードが“E002”の場合
        if (HEAD_RET_GAIA_ERR.equals(headReturn) || commonResponse == null) {
            log.info("N-GAIA連携エラー(処理結果（エラーコード）異常) " +
                    "HttpStatus=[" + httpStatus + "] " +
                    "MediaType=[" + mediaType + "] " +
                    "Head-Return=[" + headReturn + "] " +
                    "Head-Status=[" + headStatus + "] " +
                    "Response=[" + commonResponse + "] " +
                    "resultCode=[" + resultCode + "] " +
                    "errMessage=[" + errMessage + "]");
            throw new BusinessException(new Message("NNCE0990",new String[] {"受渡書作成", "kojiUtiwakeTourokuFileSakusei"
                    , errMessage}), "UkewatashisyoSakuseiLogic#kojiUtiwakeTourokuFileSakusei()");
        }
        
        // GAIA送信履歴管理エンティティ．最大履歴管理通番取得を呼び出す
        int rrkMngBan = entityRrk.getMaxRrkMngBan(sksCd, kkn);
        
        // GAIA送信履歴管理DTO生成
        N5Buigiassnrrk01DTO dto = new N5Buigiassnrrk01DTO();
        dto.setSks_cd(sksCd);                                            // 施工組織コード
        dto.setKkn(kkn);                                                 // 工事計画番号
        dto.setRrkmngban(BigDecimal.valueOf(++rrkMngBan));               // 履歴管理通番
        dto.setGaia_prckek(commonResponse.getResultCode());              // GAIA処理結果（エラーコード）
        dto.setGaia_errmsg(commonResponse.getErrorMessage());            // GAIAエラーメッセージ
        dto.setGaia_dtlerr_cd(commonResponse.getDetailedErrorCode());    // GAIA詳細エラーコード
        dto.setGaia_dtlerrmsg(commonResponse.getDetailedErrorMessage()); // GAIA詳細エラーメッセージ
        
        // GAIA送信履歴管理エンティティ．GAIA送信履歴管理登録を呼び出す。
        int insCount = entityRrk.insert(dto);
        
        if( log.isDebugEnabled() ) {
            log.debug("GAIA送信履歴管理エンティティ．GAIA送信履歴管理登録件数：" + insCount);
        }
        
        // 共通詳細エンティティ．GAIA送信区分更新を呼び出す。
        int updCount = entityKss.updateGaiaSsnKbn(sksCd, skjban, kkn);
        
        if( log.isDebugEnabled() ) {
            log.debug("共通詳細エンティティ．GAIA送信区分更新件数：" + updCount);
        }
        
        if (log.isDebugEnabled()) {
            log.debug("kojiUtiwakeTourokuFileSakusei() - end");
        }
    }
    
    /**
     * <p>
     * [概 要] 承認時チェック。（詳細処理ID：316030023）
     * </p>
     * 
     * <p>
     * [詳 細]
     * </p>
     * 
     * <p>
     * [備 考]
     * </p>.
     *
     * @throws SystemException      システムエラー発生
     * @throws BusinessException    業務例外発生
     */
    public final void syoninjiCheck() throws SystemException, BusinessException {
        
        if (log.isDebugEnabled()) {
            log.debug("syoninjiCheck() - start");
        }

        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 受渡書エンティティ生成
        final N5Buiuws02Entity entityUws = (N5Buiuws02Entity) getEntity(N5Buiuws02Entity.class);
        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);
        // 会計組織変換定数エンティティ生成
        final N5KkiscdCnvEntity entityKkiscdCnv = (N5KkiscdCnvEntity) getEntity(N5KkiscdCnvEntity.class);
        // 受渡書エンティティ用ＤＴＯ生成
        final N5Buiuws02DTO dtoUws = new N5Buiuws02DTO();
        // 共通詳細エンティティ用ＤＴＯ生成
        final N5Buikss02DTO dtoKss = new N5Buikss02DTO();

        // 受渡書エンティティ用DTOパラメータ設定
        dtoUws.setSksCd(getRequestData(D_SKS_CD));
        dtoUws.setSkjBan(getRequestData(D_SKJBAN));

        // 共通詳細エンティティ用DTOパラメータ設定
        dtoKss.setSksCd(dtoUws.getSksCd());
        dtoKss.setSkjBan(dtoUws.getSkjBan());

        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************
        
        // 上り電文を取得
        // 工事計画番号一覧
        final List list = getRequestListData(D_LIST_KKN);

        // 下り電文編集用List
        List listForKudari = new ArrayList();
        List listForSelect = new ArrayList();

        // 上り電文に登録されている工事計画番号分ループ
        for (int i = 0; i < list.size(); i++) {
            // ------------------
            // 工事計画番号の取得
            // ------------------
            final List record = (List) list.get(i);
            dtoUws.setKkn(record.get(0).toString());
            
            // --------------------------
            // 受渡CSV対象外データ数取得
            // --------------------------
            int intOutDataCnt = entityUws.getOutDataCnt(dtoUws.getSksCd(), dtoUws.getSkjBan(), dtoUws.getKkn());
            // 処理対象外データ数が1件以上ある場合は業務例外
            if (intOutDataCnt > 0) {
                throw new BusinessException(new Message("NNCW0117"
                    , new String[] {"増減科目(" + dtoUws.getKkn() + ")"})
                    , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
            }
            
            // --------------------------
            // 共通詳細存在チェックの実行
            // --------------------------
            dtoKss.setKkn(dtoUws.getKkn());
            List listKss = entityKss.kyotuSyosaiSonzaiCheck(dtoKss);
            
            // 該当データが存在しない場合は業務例外を発行
            if (listKss.size() == 0) {
                throw new BusinessException(new Message("NNCW1100")
                , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
            }
            
            Object[] objKss = (Object[]) listKss.get(0);
            
            // 作成者名がNULLの場合は業務例外を発行
            if (objKss[C_KSS_SONZAI_CHECK_SAKSYA_NM] == null) {
                throw new BusinessException(new Message("NNCW0115", new String[] { "作成者名" }), 
                    "UkewatashisyoSakuseiLogic#syoninjiCheck()");
            }
            
            // 任意が存在するかチェックする
            List listnini = entityKkiscdCnv.findnini(objKss[C_KSS_SONZAI_CHECK_KKISCD].toString());
            // 取得したデータ数が０件の場合は業務例外を発行
            if (listnini.size() == 0) {
                throw new BusinessException(new Message("NNCE2001", new String[] { "会計組織変換定数" }),
                    "UkewatashisyoSakuseiLogic#syoninjiCheck()");
            }
            
            // 上り電文のペアチェック番号を取得
            String strCheck = getRequestData(D_CHECKFLG);
            
            // ペア番号チェックフラグがチェックありの場合のみ処理を行う
            if (strCheck.equals("1")) {
                int resultPeabangocheck = entityUws.peabangocheckStored(dtoUws.getSksCd(), dtoUws.getSkjBan(), dtoUws.getKkn());
                // ストアドの処理結果が0じゃなかった場合は業務例外
                if (resultPeabangocheck != 0) {
                    throw new BusinessException(new Message("NNCC5030", new String[] {dtoUws.getKkn()})
                    , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
                }
            }

            // ------------------------------------------
            // 受渡書エンティティの受渡CSVデータ検索を実行
            // ------------------------------------------
            listForSelect = entityUws.searchUkewatasiFDKensaku(dtoUws);

            for (int y = 0; y < listForSelect.size(); y++) {

                final Object[] objForSelect = (Object[]) listForSelect.get(y);
                NNCQS001_02OutParamDTO dtoOut;

                // ---------------------------------
                // 工事計画番号の新旧コード変換を行う
                // ----------------------------------
                dtoOut = entityUws.getShinkyuCD(dtoUws);
                // 戻り値が正常以外又はリターンコードが'0'か'9'以外の場合
                if ((dtoOut.getReturnCd() != 0) && (dtoOut.getReturnCd() != 9)) {
                    String[] errKekka = {"新旧コード変換"};
                    throw new BusinessException(new Message("NNCW0044", errKekka)
                            , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
                }
                // 新工事計画番号の'-'を削除
                String strEdit = "";
                strEdit = dtoOut.getSekoKKN();
                strEdit = strEdit.replace("-", "");
                
                // 会計組織コード（新）を取得
                String kkiscd = checkNullAndConvertString(objForSelect[C_UWS_FD_KKN]);
                kkiscd = kkiscd.substring(0,5);
                // 任意を取得
                String nini = checkNullAndConvertString(objForSelect[C_UWS_FD_KKN]);
                nini = nini.substring(22);
                
                // 会計組織コード + 工事計画番号 + 任意 を設定
                strEdit = kkiscd + strEdit + nini;
                
                // 変換結果でListの値を差し替え
                objForSelect[C_UWS_FD_KKN] = (Object) strEdit;
                listForSelect.set(y, objForSelect);

                // ------------------------------------
                // 管理区分がNULLのときは業務例外を発行
                // ------------------------------------
                //「%1%を正しく入力してください。」
                if (objForSelect[C_UWS_FD_MNG_KBN] == null) {
                    // 下り電文に受渡FD作成エラー区分を追加
                    addResponseData(D_FD_ERR_KBN, "1");

                    String[] errKekka = {"項番データの管理区分"};
                    throw new BusinessException(new Message("NNCW0029", errKekka)
                        , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
                }
                // ------------------------------------------------
                // 管理責任者氏名コードがNULLのときは業務例外を発行
                // ------------------------------------------------
                // 「%1%を正しく入力してください。」
                if (objForSelect[C_UWS_FD_MNG_SKH_NM_CD] == null) {
                    // 下り電文に受渡FD作成エラー区分を追加
                    addResponseData(D_FD_ERR_KBN, "1");
                    String[] errKekka = {"項番データの管理責任者氏名コード"};
                    throw new BusinessException(new Message("NNCW0029", errKekka)
                        , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
                // ------------------------------------------------
                // 取得責任者氏名コードがNULLのときは業務例外を発行
                // ------------------------------------------------
                } else if (objForSelect[C_UWS_FD_STK_SKH_NM_CD] == null) {
                    // 下り電文に受渡FD作成エラー区分を追加
                    addResponseData(D_FD_ERR_KBN, "2");

                    throw new BusinessException(new Message("NNCC1033")
                        , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
                }

                // 下り電文設定用リストデータに取得データを追加
                listForKudari.add(listForSelect.get(y));
            }
        }

        // CSV出力対象データが0件の場合は業務例外 
        if (listForKudari.size() == 0) {
            throw new BusinessException(new Message("NNCW0007")
            , "UkewatashisyoSakuseiLogic#syoninjiCheck()");
        }

        // 下り電文に受渡CSV情報一覧を追加
        addResponseData(D_LIST_UKWFD_JYO, listForKudari);

        if (log.isDebugEnabled()) {
            log.debug("syoninjiCheck() - end");
        }
    }
    
    /**
     * <p>
     * [概 要] 受渡データ承認。（詳細処理ID：316030024）
     * </p>
     * 
     * <p>
     * [詳 細]
     * </p>
     * 
     * <p>
     * [備 考]
     * </p>.
     *
     * @throws SystemException      システムエラー発生
     * @throws BusinessException    業務例外発生
     */
    public final void ukewatashiDataSyonin() throws SystemException, BusinessException {
        
        if (log.isDebugEnabled()) {
            log.debug("ukewatashiDataSyonin() - start");
        }
        
        //***********************************************************************************************
        // エンティティ生成
        //***********************************************************************************************

        // 共通詳細エンティティ生成
        final N5Buikss02Entity entityKss = (N5Buikss02Entity) getEntity(N5Buikss02Entity.class);
        // 共通詳細エンティティ用ＤＴＯ生成
        final N5Buikss02DTO dtoKss = new N5Buikss02DTO();
        
        // 共通詳細エンティティ用DTOパラメータ設定
        dtoKss.setSksCd(getRequestData(D_SKS_CD));
        dtoKss.setSkjBan(getRequestData(D_SKJBAN));
        
        //***********************************************************************************************
        // 実処理開始
        //***********************************************************************************************
        
        // 上り電文を取得
        // 工事計画番号一覧
        final List list = getRequestListData(D_LIST_KKN);
        // 承認者ＩＤ
        final String syoninsyaId = getRequestData(D_SYONINSYA_ID);
        // 承認者名
        final String syoninsyaNm = getRequestData(D_SYONINSYA_NM);
        
        // 上り電文に登録されている工事計画番号分ループ
        for (int i = 0; i < list.size(); i++) {
            
            // ------------------
            // 工事計画番号の取得
            // ------------------
            final List record = (List) list.get(i);
            dtoKss.setKkn(record.get(0).toString());
            
            // 承認処理実行
            int updCount = entityKss.ukewatasiDataSyonin(dtoKss, syoninsyaId, syoninsyaNm);
            
            if (updCount == 0) {
                final String[] errKekka = {"承認処理"};
                throw new BusinessException(new Message("NNCW0044", errKekka)
                    , "UkewatashisyoSakuseiLogic#ukewatashiDataSyonin()");
            }
        }
        
        
        if (log.isDebugEnabled()) {
            log.debug("ukewatashiDataSyonin() - end");
        }
    }

    /**
     * <p>
     * [概 要] DBから取得したデータをString型に変換する
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @param objData DBから取得したデータ（Object型 ) 
     * 
     * @return String String型に変換したデータ
     * 
     * @throws SystemException      システムエラー発生
     */
    public final String checkNullAndConvertString(final Object objData) throws SystemException {

        // データがNullではないときはString型に変換して返す
        if (objData != null) {
            return objData.toString();
        }

        // データがNullの場合は空文字を返す
        return "";

    }

    /**
     * <p>[概 要] 保存ディレクトリの取得。</p>
     * <p>[詳 細] 保存ディレクトリの取得を行う。</p>
     * <p>[備 考] 仕施44-0007により追加</p>
     * 
     * @param key キー
     * 
     * @return 保存パス
     * 
     * @throws SystemException システムエラーが発生した場合
     */
    private String getHozonPath(String key) throws  SystemException {
        String ret = SystemUtil.getFilePath(getCenterCode() + "." + key);
        return ret;
    }

    /**
     * <p>[概 要] 該当年度を判定する。</p>
     * <p>[詳 細] 該当年度を判定する。</p>
     * <p>[備 考] 仕施44-0011により追加</p>
     * 
     * @param nendo 判定年度
     * 
     * @param gatouNendo 該当年度
     * 
     * @return 保存パス
     * 
     * @throws SystemException システムエラーが発生した場合
     */
    private boolean isGatouNendo(String nendo, String gatouNendo) throws  SystemException {
        boolean ret = false;

        // 和暦年度変換定数エンティティ生成
        final NnWaNendoCd02Entity entityWaNendoCd = (NnWaNendoCd02Entity) getEntity(NnWaNendoCd02Entity.class);

        // 和暦年度取得
        List listWanendo = entityWaNendoCd.findNnWaNendoCd(gatouNendo);

        // 下り電文に和暦年度設定
        if (listWanendo != null && listWanendo.size() > 0) {
           String strWanendo = ((Object[]) listWanendo.get(0))[0].toString();
           if (strWanendo.equals(nendo)) {
               ret = true;
           }
        }
        return ret;
    }

    /**
     * <p>
     * [概 要] 工事内訳書情報登録リクエストボディ部用VO作成処理
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @param sksCd  施工組織コード
     * @param sksNm  施工組織名
     * @param skjban 総合工事番号
     * @param skjNm  総合工事名
     * @param kkn    工事計画番号
     * @param kojNm  工事名
     * 
     * @return N5BreakdownOfWorkOrderVO 工事内訳書情報登録リクエストボディ部用VO
     * 
     * @throws SystemException      システムエラー発生
     */
    private N5BreakdownOfWorkOrderVO N5BreakdownOfWorkOrderVOCreate(String sksCd, String sksNm, String skjban, 
            String skjNm, String kkn, String kojNm) throws SystemException {
        
        if (log.isDebugEnabled()) {
            log.debug("N5BreakdownOfWorkOrderVOCreate() - start");
        }
        
        // 所内内訳書エンティティ生成
        final N5Buibututk02Entity entityButUtk = (N5Buibututk02Entity) getEntity(N5Buibututk02Entity.class);
        
        // 物品要求GAIA受信情報エンティティ生成
        final N5BuibykgiajsnjyoEntity entityButGiaJsn = (N5BuibykgiajsnjyoEntity) getEntity(N5BuibykgiajsnjyoEntity.class);
        
        // 所内内訳GAIA送信エンティティ生成
        final N5Buiutwgiassn01Entity entitySsn = (N5Buiutwgiassn01Entity) getEntity(N5Buiutwgiassn01Entity.class);
        
        // 工事内訳書情報登録リクエストボディ部用VO
        N5BreakdownOfWorkOrderVO breakdownOfWorkOrder = new N5BreakdownOfWorkOrderVO();
        
        // 前回の繰り返し分物品情報グループID
        String strOldButjyogrpId = "";
        
        // 前回の繰り返し分物品情報グループID通番
        String strOldButjyogrpIdSeq = "";

        // 前回の繰り返し分物品情報数量リスト
        List<Double> listOldButjyoSro = new ArrayList<Double>();
        
        // 工事内訳書情報リスト取得
        List listUtiwakeJoho = entityButUtk.getKojiUtiwakesyoJyohoList(sksCd, skjban, kkn);
        
        // 工事内訳書情報登録リクエストボディ部用VOの項目を設定する
        Object[] UtiwakeJoho = (Object[]) listUtiwakeJoho.get(0);
        
        // 会計組織コード（新）を取得
        final String kkiscdNew = checkNullAndConvertString(UtiwakeJoho[C_UTW_JOHO_LIST_KKISCD_NEW]);
        // 任意を取得
        final String nini = checkNullAndConvertString(UtiwakeJoho[C_UTW_JOHO_LIST_NINI]);
        
        // 工事計画番号のハイフンを取り除く
        final String nohyphenknn = kkn.replace("-", "");
        
        // 工事計画番号を設定（会計組織コード（新）+工事計画番号+任意）
        breakdownOfWorkOrder.setWorkOrderPlanNo(kkiscdNew + nohyphenknn + nini);
        
        // 工事内訳書情報リスト取得で取得した件数分ループ
        for (int u = 0; u < listUtiwakeJoho.size(); u++) {
            
            if (log.isDebugEnabled()) {
                log.debug("工事内訳書情報リスト" + (u + 1) + "件目");
            }
            
            final Object[] objForUtiwakeJoho = (Object[]) listUtiwakeJoho.get(u);

            // 物品情報ID
            final String strButjyoskbId = checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTJYOSKB_ID]);
            
            // 物理リソースID
            final String strBtrrscId = checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BTRRSC_ID]);
            
            // 物品情報グループID
            final String strButjyogrpId = checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTJYOGRP_ID]);
            
            // 物品情報グループID通番
            final String strButjyogrpIdSeq = checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTJYOGRP_IDSEQ]);
            
            if (log.isDebugEnabled()) {
                log.debug("物品情報グループID：" + strButjyogrpId + "　物品情報グループID通番：" + strButjyogrpIdSeq);
            }
            
            // 物品情報数量リスト
            List<Double> listButjyoSro = new ArrayList<Double>();
            listButjyoSro.clear();
            
            // 設定用物品情報IDリスト
            List<String> listArticleId = new ArrayList<String>();
            
            // 設定用物理リソースIDリスト
            List<String> listPhysicalResourceId = new ArrayList<String>();
            
            // 設定用物品情報IDリストと設定用物理リソースIDリストをクリアする。
            listArticleId.clear();
            listPhysicalResourceId.clear();
            
            // 物品要求GAIA受信情報エンティティ．物品情報ID検索を呼び出し、リスエスト送信対象のデータを取得する。
            List listBuppinJyohoId = entityButGiaJsn.getBuppinJyohoId(sksCd, kkn, 
                    checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTJYOGRP_ID]), checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTJYOGRP_IDSEQ]));
            
            // 取消区分が‘０’（取消）の場合
            if (checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TRIKSKBN]).equals("0")) {
                
                // 物品情報IDを、設定用物品情報IDリストに追加する。
                listArticleId.add(strButjyoskbId);
                
                // 物理リソースIDを、設定用物理リソースIDリストに追加する。
                listPhysicalResourceId.add(strBtrrscId);
                
            }
            
            // 取消区分が‘１’（取消以外）の場合
            else {
                
                // 物品情報ID検索で取得したデータ数分、以下の処理を繰り返す。
                for (int b = 0; b < listBuppinJyohoId.size(); b++) {
                    
                    final Object[] objBuppinJyohoId = (Object[]) listBuppinJyohoId.get(b);
                    
                    // 物品情報IDを、設定用物品情報IDリストに追加する。
                    listArticleId.add(checkNullAndConvertString(objBuppinJyohoId[C_BUTJYO_ID_LIST_BUTJYOSKB_ID]));
                    
                    // 物理リソースIDを、設定用物理リソースIDリストに追加する。
                    listPhysicalResourceId.add(checkNullAndConvertString(objBuppinJyohoId[C_BUTJYO_ID_LIST_BTRRSC_ID]));
                    
                    // 数量を、物品情報数量リストに追加する。
                    listButjyoSro.add(((BigDecimal)objBuppinJyohoId[C_BUTJYO_ID_LIST_SRO]).doubleValue());
                }
                
            }
            
            // 工事内訳書情報リストの物品情報グループIDと物品情報グループID通番がNULLでない場合 かつ
            // 工事内訳書情報リストの物品情報グループID + 物品情報グループID通番が前回の繰り返しで取得した物品情報グループID + 物品情報グループID通番が一致する場合 かつ
            // 工事内訳書情報リストの取消区分が‘１’（取消以外）の場合
            if ((!strButjyogrpId.equals("") && !strButjyogrpIdSeq.equals(""))
                    && (strButjyogrpId + strButjyogrpIdSeq).equals(strOldButjyogrpId + strOldButjyogrpIdSeq)
                    && checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TRIKSKBN]).equals("1")) {
                
                if (log.isDebugEnabled()) {
                    log.debug("同一通番の分割あり　物品情報グループID：" + strButjyogrpId + "　物品情報グループID通番：" + strButjyogrpIdSeq);
                }
                
                // 前回の繰り返しで設定した新設数量
                double dblOldSinsetuSro = 0.0;
                // 前回の繰り返しで設定した撤去数量
                double dblOldTekkyoSro = 0.0;
                // 分割用数量
                double dblBunkatuSro = 0.0;
                // 分割元物品情報IDリスト
                List<String> listBmtArticleId = new ArrayList<String>();
                // 分割先物品情報IDリスト
                List<String> listBskArticleId = new ArrayList<String>();
                // 分割元物理リソースIDリスト
                List<String> listBmtPhysicalResourceId = new ArrayList<String>();
                // 分割先物理リソースIDリスト
                List<String> listBskPhysicalResourceId = new ArrayList<String>();
                
                // 前回の繰り返しで設定した工事内訳書情報登録リクエストボディ部用VO.工事内訳書情報リストから取得する
                List<String> listTmpArticleId = new ArrayList<String>();
                List<String> listTmpPhysicalResourceId = new ArrayList<String>();
                if (u > 0) {
                    listTmpArticleId = breakdownOfWorkOrder.getBreakdownOfWorkOrderList().get(u - 1).getArticleIdList();
                    listTmpPhysicalResourceId = breakdownOfWorkOrder.getBreakdownOfWorkOrderList().get(u - 1).getPhysicalResourceIdList();
                    
                    // 数量を分割用数量に代入する
                    dblOldSinsetuSro = Double.parseDouble(breakdownOfWorkOrder.getBreakdownOfWorkOrderList().get(u - 1).getNewQuantity());
                    dblOldTekkyoSro = Double.parseDouble(breakdownOfWorkOrder.getBreakdownOfWorkOrderList().get(u - 1).getRemovalQuantity());
                    dblBunkatuSro = (double)Math.round(dblOldSinsetuSro + dblOldTekkyoSro);
                }

                if (log.isDebugEnabled()) {
                    log.debug("前回の繰り返しで設定した物品情報IDリストのデータ数：" + listTmpArticleId.size());
                }
                if (log.isDebugEnabled()) {
                    log.debug("前回の繰り返しで設定した物理リソースIDリストのデータ数：" + listTmpPhysicalResourceId.size());
                }
                if (log.isDebugEnabled()) {
                    log.debug("前回の繰り返しで設定した新設数量：" + dblOldSinsetuSro);
                }
                if (log.isDebugEnabled()) {
                    log.debug("前回の繰り返しで設定した撤去数量：" + dblOldTekkyoSro);
                }
                if (log.isDebugEnabled()) {
                    log.debug("分割用数量：" + dblBunkatuSro);
                }
                if (log.isDebugEnabled()) {
                    log.debug("前回の繰り返しで設定した物品情報数量リストのデータ数：" + listOldButjyoSro.size());
                }
                
                // 前回の繰り返しで設定した物品情報数量リストのデータ数分、以下の処理を繰り返す。
                int intTmpOldButjyoSroSize = listOldButjyoSro.size();
                for (int s = 0; s < intTmpOldButjyoSroSize; s++) {
                    
                    // 前回の繰り返しで設定した物品情報数量リストからデータを取り出し、分割用数量から減算する。
                    dblBunkatuSro -= listOldButjyoSro.remove(0);
                    
                    // 物品情報IDリストからデータを取り出し、分割元物品情報IDリストに追加する。
                    if (listTmpArticleId.size() > 0) {
                        listBmtArticleId.add(s, listTmpArticleId.remove(0));
                    }
                    
                    // 物理リソースIDリストからデータを取り出し、分割元物理リソースIDリストに追加する。
                    if (listTmpPhysicalResourceId.size() > 0) {
                        listBmtPhysicalResourceId.add(s, listTmpPhysicalResourceId.remove(0));
                    }
                    
                    // 分割用数量が０以下の場合、繰り返しを終了する。
                    if (dblBunkatuSro <= 0) {
                        break;
                    }
                    
                }

                // 取り出していない物品情報IDリストを、分割先物品情報IDリストとする
                listBskArticleId.addAll(listTmpArticleId);
                
                // 取り出していない物品情報IDリストを、分割先物理リソースIDリストとする
                listBskPhysicalResourceId.addAll(listTmpPhysicalResourceId);
                
                // 前回の繰り返しで設定した物品情報数量リストの中で取り出していないデータがあれば、物品情報数量リストに再設定する。
                listButjyoSro.clear();
                listButjyoSro.addAll(listOldButjyoSro);

                if (log.isDebugEnabled()) {
                    log.debug("分割元物品情報IDリストのデータ数：" + listBmtArticleId.size());
                }
                if (log.isDebugEnabled()) {
                    log.debug("分割元物理リソースIDリストのデータ数：" + listBmtPhysicalResourceId.size());
                }
                if (log.isDebugEnabled()) {
                    log.debug("分割先物品情報IDリストのデータ数：" + listBskArticleId.size());
                }
                if (log.isDebugEnabled()) {
                    log.debug("分割先物理リソースIDリストのデータ数：" + listBskPhysicalResourceId.size());
                }
                if (log.isDebugEnabled()) {
                    log.debug("物品情報数量リストのデータ数：" + listButjyoSro.size());
                }
                
                //前回の繰り返しで設定した工事内訳書情報登録リクエストボディ部用VO.工事内訳書情報リストの項目を再設定する。
                if (u > 0) {
                    breakdownOfWorkOrder.getBreakdownOfWorkOrderList().get(u - 1).setArticleIdList(listBmtArticleId);
                    breakdownOfWorkOrder.getBreakdownOfWorkOrderList().get(u - 1).setPhysicalResourceIdList(listBmtPhysicalResourceId);
                }
                
                // 分割先物品情報IDリストを設定用物品情報IDリストに再設定する。
                listArticleId.clear();
                listArticleId.addAll(listBskArticleId);
                
                // 分割先物理リソースIDリストを設定用物理リソースIDリストに再設定する。
                listPhysicalResourceId.clear();
                listPhysicalResourceId.addAll(listBskPhysicalResourceId);
                
            }
            
            if (log.isDebugEnabled()) {
                log.debug("設定用物品情報IDリストのデータ数：" + listArticleId.size());
            }
            if (log.isDebugEnabled()) {
                log.debug("設定用物理リソースIDリストのデータ数：" + listPhysicalResourceId.size());
            }
            
            // 工事内訳書情報登録リクエストボディ部用VOの項目を設定する。
            N5BreakdownOfWorkOrderListVO breakdownOfWorkOrderList = new N5BreakdownOfWorkOrderListVO();
            breakdownOfWorkOrderList.setArticleIdList(listArticleId);                                                                      //物品情報IDリスト
            breakdownOfWorkOrderList.setPhysicalResourceIdList(listPhysicalResourceId);                                                    //物理リソースIDリスト
            breakdownOfWorkOrderList.setLastUpdate(DateUtil.getDate("yyyy-MM-dd HH:mm:ss"));                                               //最終更新日時
            breakdownOfWorkOrderList.setContractorCode(checkNullAndConvertString(sksCd));                                                  //施工組織コード
            breakdownOfWorkOrderList.setContractorName(checkNullAndConvertString(sksNm));                                                  //施工組織名
            breakdownOfWorkOrderList.setWorkOrderAllNo(checkNullAndConvertString(skjban));                                                 //総合工事番号
            breakdownOfWorkOrderList.setWorkOrderAllName(checkNullAndConvertString(skjNm));                                                //総合工事名
            breakdownOfWorkOrderList.setBranchCode(checkNullAndConvertString(null));                                                       //支店コード
            breakdownOfWorkOrderList.setBranchName(checkNullAndConvertString(null));                                                       //支店名
            breakdownOfWorkOrderList.setSrvWorkAllContractCode(checkNullAndConvertString(null));                                           //サ総契約コード
            breakdownOfWorkOrderList.setManagementNo(checkNullAndConvertString(null));                                                     //管理番号
            breakdownOfWorkOrderList.setWorkOrderName(checkNullAndConvertString(kojNm));                                                   //工事名
            breakdownOfWorkOrderList.setBuildingName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BIL_NM]));                //ビル名
            breakdownOfWorkOrderList.setTitleQuantityChanged(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_ZOG]));           //増減科目
            breakdownOfWorkOrderList.setResponsiblePerson(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_MNGSKH]));           //管理責任者
            breakdownOfWorkOrderList.setHoldingAreaCode(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYK_CD]));             //収容区域コード
            breakdownOfWorkOrderList.setRecordNo(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_CHOBAN]));                    //調書管理番号
            breakdownOfWorkOrderList.setBusinessDivision(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SV_CD]));             //サービスコード
            breakdownOfWorkOrderList.setCommonItem(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_ITM]));                     //共通アイテム
            breakdownOfWorkOrderList.setManagementDivision(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_MNGKBN]));          //管理区分
            breakdownOfWorkOrderList.setEquipment(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SBI]));                      //設備
            breakdownOfWorkOrderList.setItem(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYU]));                           //種目
            breakdownOfWorkOrderList.setDetail(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SMK]));                         //細目
            breakdownOfWorkOrderList.setSubdivision(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SBN]));                    //細分
            breakdownOfWorkOrderList.setArrangementCode(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SIRBAN]));             //整理コード
            breakdownOfWorkOrderList.setCustodyTeamCode(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_HKK_CD]));             //保管課コード
            breakdownOfWorkOrderList.setIndividualCode(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KOB_CD]));              //個別コード
            breakdownOfWorkOrderList.setSubdivisionBreakdownName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SAIBUN_NM])); //細分/本体内訳名
            breakdownOfWorkOrderList.setConstructionYear(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KND]));               //建設年度
            breakdownOfWorkOrderList.setFloor(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_FRA]));                          //フロア
            breakdownOfWorkOrderList.setRackGroup(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_GUN]));                      //群
            breakdownOfWorkOrderList.setSerialNo(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TBN]));                       //通番
            breakdownOfWorkOrderList.setRackName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KMI]));                       //架名(施工管理)
            breakdownOfWorkOrderList.setDeviceName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_STM]));                     //装置名(施工管理)
            breakdownOfWorkOrderList.setRackNo(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KAB]));                         //架番号
            breakdownOfWorkOrderList.setDeviceNo(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SUIBAN]));                    //装置番号
            breakdownOfWorkOrderList.setMainComponentDivision(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_HTIUTWKHF]));    //本体構成品区分
            breakdownOfWorkOrderList.setKanaName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KNA]));                       //カナ品名
            breakdownOfWorkOrderList.setAbLength(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_AB_LEN]));                    //ａｂ長
            breakdownOfWorkOrderList.setArticleCode(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTU_CD]));                //物品コード
            breakdownOfWorkOrderList.setMainQuantity(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_HTISRO]));                //本体数量
            breakdownOfWorkOrderList.setComponentQuantity(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KOUSEI_SRO]));       //構成数量
            breakdownOfWorkOrderList.setNewQuantity(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SINSRO]));                 //新設数量
            breakdownOfWorkOrderList.setRemovalQuantity(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TEKSRO]));             //撤去数量
            breakdownOfWorkOrderList.setUnitPrice(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TAK]));                      //単価
            breakdownOfWorkOrderList.setTotalPrice(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_GOK]));                     //合価
            breakdownOfWorkOrderList.setNote(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJIUTW]));                        //記事
            breakdownOfWorkOrderList.setTotalOperationalTime(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_EKDTIM_SU]));     //延稼働時間
            breakdownOfWorkOrderList.setRemovalRatio(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TEKHRT]));                //撤去比率
            breakdownOfWorkOrderList.setNewRatio(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SINHRT]));                    //新設比率
            breakdownOfWorkOrderList.setRemovalWorkOrderCost(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TEKKJH]));        //撤去工事費
            breakdownOfWorkOrderList.setStartYearMonthDay(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_CKOYMD]));           //着工年月日
            breakdownOfWorkOrderList.setCompletionYearMonthDay(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SHKYMD]));      //竣工年月日
            breakdownOfWorkOrderList.setVendorName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_UKOCOM]));                  //業者名
            breakdownOfWorkOrderList.setCreatorName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SAKSYA_NM]));              //作成者名
            breakdownOfWorkOrderList.setNotificationNo(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SGTMATKTB]));           //通知番号
            breakdownOfWorkOrderList.setNote1(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI001]));                       //記事1
            breakdownOfWorkOrderList.setNote2(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI002]));                       //記事2
            breakdownOfWorkOrderList.setNote3(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI003]));                       //記事3
            breakdownOfWorkOrderList.setNote4(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI004]));                       //記事4
            breakdownOfWorkOrderList.setMakerCode(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_MAK_CD]));                   //メーカコード
            breakdownOfWorkOrderList.setMakerName(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_NKM]));                      //メーカ名
            breakdownOfWorkOrderList.setBuildingCode(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BIL_CD]));                //ビルコード
            breakdownOfWorkOrderList.setForm1(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KTI001]));                       //形態1
            breakdownOfWorkOrderList.setForm2(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KTI002]));                       //形態2
            breakdownOfWorkOrderList.setRepayable(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYOKHIFLG]));                //償却可否
            breakdownOfWorkOrderList.setAcquireYearMonth(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYT_YM]));            //取得年月
            breakdownOfWorkOrderList.setStartYearMonth(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYM]));                 //開始年月
            breakdownOfWorkOrderList.setOperationalStartYear(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KSY]));           //稼働開始年度
            breakdownOfWorkOrder.getBreakdownOfWorkOrderList().add(u, breakdownOfWorkOrderList);
            
            // 前回の繰り返し分を設定する
            strOldButjyogrpId = strButjyogrpId;
            strOldButjyogrpIdSeq = strButjyogrpIdSeq;
            listOldButjyoSro.clear();
            listOldButjyoSro.addAll(listButjyoSro);
            
            // 所内内訳GAIA送信DTO生成
            N5Buiutwgiassn01DTO dto = new N5Buiutwgiassn01DTO();
            dto.setSks_cd(sksCd);                                                                                                  // 施工組織コード
            dto.setSkjban(skjban);                                                                                                 // 総合工事番号
            dto.setKkn(kkn);                                                                                                       // 工事計画番号
            dto.setSeqnum(BigDecimal.valueOf(u + 1));                                                                              // 連番
            dto.setRec(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_REC]));                                         // レコード通番
            dto.setButjyogrp_id(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTJYOGRP_ID]));                       // 物品情報グループID
            dto.setButjyogrp_idseq(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTJYOGRP_IDSEQ]));                 // 物品情報グループID通番
            dto.setSks_nm(sksNm);                                                                                                  // 施工組織名
            dto.setSkj_nm(skjNm);                                                                                                  // 総合工事名
            dto.setKoj_nm(kojNm);                                                                                                  // 工事名
            dto.setBil_nm(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BIL_NM]));                                   // ビル名
            dto.setZog(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_ZOG]));                                         // 増減科目
            dto.setMngskh(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_MNGSKH]));                                   // 管理責任者
            dto.setSyk_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYK_CD]));                                   // 収容区域コード
            dto.setChomngban(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_CHOBAN]));                                // 調書管理番号
            dto.setSv_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SV_CD]));                                     // サービスコード
            dto.setItm(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_ITM]));                                         // 共通アイテム
            dto.setMngkbn(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_MNGKBN]));                                   // 管理区分
            dto.setSbi(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SBI]));                                         // 設備
            dto.setSyu(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYU]));                                         // 種目
            dto.setSmk(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SMK]));                                         // 細目
            dto.setSbn(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SBN]));                                         // 細分
            dto.setSir_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SIRBAN]));                                   // 整理コード
            dto.setHkk_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_HKK_CD]));                                   // 保管課コード
            dto.setKob_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KOB_CD]));                                   // 個別コード
            dto.setSaibun_htiutw_nm(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SAIBUN_NM]));                      // 細分-本体内訳名
            dto.setKnd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KND]));                                         // 建設年度
            dto.setFra(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_FRA]));                                         // フロア
            dto.setGun(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_GUN]));                                         // 群
            dto.setTbn(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TBN]));                                         // 通番
            dto.setKmi(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KMI]));                                         // 架名（施工管理）
            dto.setStm(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_STM]));                                         // 装置名（施工管理）
            dto.setKab(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KAB]));                                         // 架番号
            dto.setSuiban(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SUIBAN]));                                   // 装置番号
            dto.setHtikhnkbn(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_HTIUTWKHF]));                             // 本体構成品区分
            dto.setKna(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KNA]));                                         // カナ品名
            dto.setAb_len(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_AB_LEN]));                                   // ａｂ長
            dto.setButu_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BUTU_CD]));                                 // 物品コード
            dto.setHtisro(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_HTISRO]));                                   // 本体数量
            dto.setKousei_sro(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KOUSEI_SRO]));                           // 構成数量
            dto.setSinsro(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SINSRO]));                                   // 新設数量
            dto.setTeksro(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TEKSRO]));                                   // 撤去数量
            dto.setTak(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TAK]));                                         // 単価
            dto.setGok(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_GOK]));                                         // 合価
            dto.setKji(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJIUTW]));                                      // 記事
            dto.setEkdtim(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_EKDTIM_SU]));                                // 延稼働時間
            dto.setTekhrt(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TEKHRT]));                                   // 撤去比率
            dto.setSinhrt(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SINHRT]));                                   // 新設比率
            dto.setTekkjh(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_TEKKJH]));                                   // 撤去工事費
            dto.setCkoymd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_CKOYMD]));                                   // 着工年月日
            dto.setShkymd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SHKYMD]));                                   // 竣工年月日
            dto.setGyosya_nm(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_UKOCOM]));                                // 業者名
            dto.setSaksya_nm(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SAKSYA_NM]));                             // 作成者名
            dto.setTutban(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SGTMATKTB]));                                // 通知番号
            dto.setKji001(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI001]));                                   // 記事１
            dto.setKji002(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI002]));                                   // 記事２
            dto.setKji003(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI003]));                                   // 記事３
            dto.setKji004(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KJI004]));                                   // 記事４
            dto.setMak_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_MAK_CD]));                                   // メーカコード
            dto.setNkm(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_NKM]));                                         // メーカ名
            dto.setBil_cd(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_BIL_CD]));                                   // ビルコード
            dto.setKti001(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KTI001]));                                   // 形態１
            dto.setKti002(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KTI002]));                                   // 形態２
            dto.setSyokhiflg(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYOKHIFLG]));                             // 償却可否
            dto.setSyt_ym(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYT_YM]));                                   // 取得年月
            dto.setSym(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_SYM]));                                         // 開始年月
            dto.setKsy(checkNullAndConvertString(objForUtiwakeJoho[C_UTW_JOHO_LIST_KSY]));                                         // 稼働開始年度
            
            // 所内内訳GAIA送信エンティティ.所内内訳GAIA送信登録を呼び出す。
            int insCount = entitySsn.insert(dto);
            
            if( log.isDebugEnabled() ) {
                log.debug("所内内訳GAIA送信エンティティ.所内内訳GAIA送信登録件数：" + insCount);
            }
            
        }

        if (log.isDebugEnabled()) {
            log.debug("N5BreakdownOfWorkOrderVOCreate() - end");
        }
        return breakdownOfWorkOrder;
        
    }
    
    
    /**
     * <p>
     * [概 要] 方式提供のプロパティを設定する
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @param requestParam パラメータ設定用のVO
     * 
     * @return Builder クライアント要求呼び出しビルダー
     * 
     * @throws SystemException      システムエラー発生
     */
    private Builder setParam(N5RestClientVO requestParam) throws SystemException {
        
        if( log.isDebugEnabled() ) {
            log.debug("setParam() - start");
        }
        
        // 変数を用意
        Client client = ClientBuilder.newClient();
        Builder invocationBuilder;
        
        // 接続タイムアウト、読み取りタイムアウトの設定
        client.property(ClientProperties.READ_TIMEOUT, requestParam.getRestReadTimeout());
        client.property(ClientProperties.CONNECT_TIMEOUT, requestParam.getRestConnectTimeout());
        
        // BASIC認証のアカウント、パスワードの設定
        HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(requestParam.getBasicAuthUser(), requestParam.getBasicAuthPassword());
        client.register(feature);
        
        // URIの設定
        WebTarget target = client.target(requestParam.getUrl());
        
        WebTarget queryWebTarget = null;
        
        // PATH(Resource)の設定
        WebTarget resourceWebTarget = target.path(requestParam.getResource());
        // get実行時のクエリパラメータの設定
        queryWebTarget = resourceWebTarget;
        if (requestParam.getQueryParamMap() != null) {
            for (String key: requestParam.getQueryParamMap().keySet()) {
                queryWebTarget = queryWebTarget.queryParam(key, requestParam.getQueryParamMap().get(key));
            }
        }
        
        // リクエスト実行用のinvocationBuilderの生成、Acceptヘッダ値は「Accept: application/json」を指定
        invocationBuilder = queryWebTarget.request(MediaType.APPLICATION_JSON);
        
        if( log.isDebugEnabled() ) {
            log.debug("setParam() - end");
        }
        return invocationBuilder;
    }
    
    /**
     * <p>
     * [概 要] 工事内訳書更新IF送信処理
     * </p>
     *
     * <p>
     * [詳 細]
     * </p>
     *
     * <p>
     * [備 考]
     * </p>
     *
     * @param invocationBuilder クライアント要求呼び出しビルダー
     * @param entity            工事内訳書情報登録リクエストボディ部用VO
     * 
     * @return Response 結果
     * 
     * @throws SystemException      システムエラー発生
     */
    public Response executePost(Builder invocationBuilder, Entity<N5BreakdownOfWorkOrderVO> entity) throws SystemException {

        if( log.isDebugEnabled() ) {
            log.debug("executePost() - start");
        }
        
        Response response = null;
        response = invocationBuilder.post(entity);
        response.bufferEntity();
        
        if( log.isDebugEnabled() ) {
            log.debug("executePost() - end");
        }
        return response;
        
    }

}
	１０．ＣＳＶファイル仕様（物品費ＣＳＶ）																																							
	　　１０．１ＣＳＶファイル仕様																																						1-1-5全D	
		ファイル名					「XXXXXXXX」＋_B  【「XXXXXXXX」はメインメニュー（一般）画面で選択した総合工事番号】																																	
		拡張子					CSV																																	
		ファイル形態					テキストファイル																																	
		項目の区切り					項目の後ろに半角カンマで区切る。																																	
		レコードの末尾					最終項目の後ろに改行コード（ＣＲＬＦ）で区切る。																																	
		レコードの構成					"①先頭レコードに見出し行を出力。　表示項目は【補足票　１０．４　ＣＳＶファイル編集内容（物品費）】のＣＳＶ項目名／見出し名を出力する。
②２レコード目以降に明細レコードを出力する。【補足票　１０．４　ＣＳＶファイル編集内容（物品費）】参照"																																	
																																								
		注意事項					"文字項目はダブルクオートで囲む。（受渡数量、数量、ＡＢ長、合価以外の項目全て）
項目を省略した場合も項目区切りの半角カンマを設定する。レコードの末尾までのカンマの数は常に一定となる。
レコードの最終項目の後に半角カンマの設定はなし。"																																	
																																								
																																								
																																								
	　　１０．２ＣＳＶファイルソート順・集計単位																																							
	　　　　（１）ソート順																																							
	　　　　　　①工事計画番号、②ビル・収容区域コード、③共通アイテム、④管理区分、⑤設備、⑥種目、⑦細目、⑧細分、⑨保管課コード、⑩償却未償却区分、																																							
	　　　　　　⑪区分（在・再）、⑫ＮＳ物品管理番号、⑬物品コード																																							
	　　　　（２）集計単位																																							
	　　　　　　上記ソートキー単位で受渡数量・数量・合価を集計する。																																							
																																								
	　　１０．３ 1ＣＳＶファイル出力条件																																						1-1-5C	
	　　　　建設工事を対象とする。（増減科目が‘４１’（新設）のみ）																																							
	　　　　受払精算書作成処理を行ったものを対象とする。																																							
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																	構成識別ID				ＤＥＤＡ３－３１６０３Ｅ－ＦＥＤＡ１４											ページ			13／52					
																																								
																																								
	　　１０．４ 2ＣＳＶファイル編集内容（物品費）																																						1-1-5全C	
		項番	ＣＳＶ項目名／見出し名					編集条件																																
								フォーマット					"桁
数"	"必
須"	その他																									
																																								
		1	総合工事番号					固定長半角数字					8	○	総合工事選択画面で選択した総合工事番号を設定出力。																									
		2	工事計画番号					固定長半角文字					23	○	所外受払テーブル・工事計画番号を設定出力。																									
		3	増減科目					固定長半角数字					2	○	所外受払テーブル・増減科目を設定出力。																									
		4	ビル・収容区域コード					固定長半角数字					10	○																										
																パターン		所外受払テーブルの内容											ＣＳＶファイルに設定出力する項目（所外受払テーブル）											
																		ビルコード			収容区域コード				端局区間コード															
																1		設定あり			判定しない				判定しない				ビルコードを設定出力。											
																2		設定なし			設定あり				設定あり				‘００００００００００’を設定出力。											
																3		設定なし			設定あり				設定なし				収容区域コード＋‘００’を設定出力。											
																4		設定なし			設定なし				設定あり				‘００００００００００’を設定出力。											
																																								
		5	共通アイテム					固定長半角数字					7		"所外受払テーブル・ビルコードが設定されていない場合、所外受払テーブル・端極区間コードを設定出力。
上記以外の場合は未設定で出力。"																									
																																							1-1-5A	
		6	管理区分					固定長半角数字					2		所外受払テーブル・管理区分を設定出力。																									
		7	設備					固定長半角数字					3	○	所外受払テーブル・設備を設定出力。																									
		8	種目					固定長半角数字					2	○	所外受払テーブル・種目を設定出力。																									
		9	細目					固定長半角数字					2	○	所外受払テーブル・細目を設定出力。																									
		10	細分					固定長半角数字					3	○	所外受払テーブル・細分＋「０」を設定出力。																									
		11	細分名					可変長全角文字					25	○	設備／細分定数・細分名を設定出力。																									
		12	保管課コード					固定長半角英数字					5	○	含み工事情報テーブル・保管課コードを設定出力。																									
		13	開始年月					固定長半角文字					7		"所外受払テーブル・償却未償却区分が‘１’（償却）の場合、
共通詳細テーブル・開始年月を設定出力。　（YYYY-MM形式）
上記以外の場合は未設定で出力。"																									
																																								
																																							1-1-5A	
		14	受渡数量					可変長半角数字					9	○	所外受払テーブル・使用数量を設定出力。　整数部最大７桁、小数点以下最大１桁																									
		15	区分（在・再）					固定長半角数字					1	○	所外受払テーブル・在再別フラグを設定出力。（０：在庫品、１：再用品）																									
		16	ＮＳ物品管理番号					固定長半角英数字					6	○	所外受払テーブル・ＮＳ物品管理番号を設定出力。																									
		17	物品コード					固定長半角英数字					8	○	所外受払テーブル・物品コードを設定出力。																									
		項番	ＣＳＶ項目名／見出し名					編集条件																																
								フォーマット					"桁
数"	"必
須"	その他																									
																																								
		18	カナ品名					可変長半角文字					50	○	物品定数テーブル・カナ品名を設定出力。																									
		19	単位					可変長半角文字					3	○	物品定数テーブル・単位を設定出力。																									
		20	数量					可変長半角数字					9	○	所外受払テーブル・物品数量を設定出力。　整数部最大７桁、小数点以下最大１桁																									
		21	ａｂ長					可変長半角数字					7		所内内訳書テーブル・ａｂ長を設定出力。　整数部最大５桁、小数点以下最大１桁																									
		22	合価					可変長半角数字					13	○	所外受払テーブル・使用数量合価を設定出力。																									
																																								
																																								
																	構成識別ID				ＤＥＤＡ３－３１６０３Ｅ－ＦＥＤＡ１４											ページ			14／52					
																																								
																																								
	１１．請負費ＣＳＶ作成ファイル編集内容																																						1-1-5C	
	　　記載工程細分別情報を施工組織コード、総合工事番号、振替先計番で検索して、増減科目コード＝４１（新増設）の場合、請負費ＣＳＶファイルに出力する。																																							
		項番		項目					内容																														1-1-5全D	
		1		総合工事番号					記載工程細分別情報の総合工事番号																															
		2		工事計画番号					記載工程細分別情報の振替先計番																															
		3		増減科目					記載工程細分別情報の増減科目コード																															
		4		ビル・収容区域コード					記載工程細分別情報のビルコード																															
		5		共通アイテムコード					記載工程細分別情報の端局区間コード																															
		6		管理区分					記載工程細部別情報の管理区分コード																															
		7		設備					記載工程細分別情報の設備コード																															
		8		種目					記載工程細分別情報の種目コード																															
		9		細目					記載工程細分別情報の細目コード																															
		10		細分					記載工程細分別情報の細分コード＋‘０’																															
		11		細分名					設備／細分定数の細分名																															
		12		保管課コード					含み工事情報の保管課コード																															
		13		開始年月					"記載工程細分別情報の償却未償却区分が１（償却）の場合
　　共通詳細の開始年月
以外は未設定"																															
																																								
																																								
		14		受渡数量					記載工程細分別情報の受渡数量																															
		15		工程種別コード					記載工程細分別情報の工程種別コード																															
		16		記載工程コード					記載工程細分別情報の記載工程コード																															
		17		記載工程名					算定記載工程定数の記載工程名																															
		18		単位					算定記載工程定数の表示単位																															
		19		数量					記載工程細分別情報の今回出来高数量（表示単位での数量である為、記載倍率を用いての変換は行わない）																															
		20		請負費					記載工程細分別情報の設計費＋施工費																															
	　　　※　文字項目は、ダブルクォーテーションで囲み出力する。																																							
	　　ＣＳＶファイルは、工事計画番号、ビル・収容区域コード、共通アイテムコード、設備、種目、細目、細分、保管課コード順に出力する。																																							
	　　記載工程細分別情報に該当情報が存在しない場合、ファイル出力は行わない。																																							
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																																								
																	構成識別ID				ＤＥＤＡ３－３１６０３Ｅ－ＦＥＤＡ１４											ページ			15／52					
																																								
																																								
		項番	ＣＳＶ項目名／見出し名					編集条件																															1-1-5全A	
								フォーマット					"桁
数"	"必
須"	その他																									
																																								
		1	総合工事番号					半角数字					8	○	記載工程細分別情報の総合工事番号を出力。																									
		2	工事計画番号					半角文字					23	○	記載工程細分別情報の振替先計番を出力。																									
		3	増減科目					半角数字					2	○	記載工程細分別情報の増減科目コードを出力。																									
		4	ビル・収容区域コード					半角数字					10	○	記載工程細分別情報のビルコードを出力。																									
		5	共通アイテムコード					半角数字					7	－	記載工程細分別情報の端局区間コードを出力。																									
		6	管理区分					半角数字					2	－	記載工程細部別情報の管理区分コードを出力。																									
		7	設備					半角数字					3	○	記載工程細分別情報の設備コードを出力。																									
		8	種目					半角数字					2	○	記載工程細分別情報の種目コードを出力。																									
		9	細目					半角数字					2	○	記載工程細分別情報の細目コードを出力。																									
		10	細分					半角数字					2	○	記載工程細分別情報の細分コード＋‘０’を出力。																									
		11	細分名					全角文字					50	○	設備／細分定数の細分名を出力。																									
		12	保管課コード					半角英数字					5	○	含み工事情報の保管課コードを出力。																									
		13	開始年月					半角文字					7	－	"記載工程細分別情報の償却未償却区分が１（償却）の場合
　　共通詳細の開始年月を出力。
以外は未設定で出力。"																									
																																								
																																								
		14	受渡数量					半角数字					12	○	記載工程細分別情報の受渡数量を出力。																									
		15	工程種別コード					半角数字					1	－	記載工程細分別情報の工程種別コードを出力。																									
		16	記載工程コード					半角数字					6	－	記載工程細分別情報の記載工程コードを出力。																									
		17	記載工程名					全角文字					8	－	算定記載工程定数の記載工程名を出力。																									
		18	単位					半角文字					5	○	算定記載工程定数の表示単位を出力。																									
		19	数量					半角数字					12	○	記載工程細分別情報の今回出来高数量を出力。（表示単位での数量である為、記載倍率を用いての変換は行わない）																									
		20	請負費					半角数字					12	－	記載工程細分別情報の設計費＋施工費を出力。																									
																																								
																																								
