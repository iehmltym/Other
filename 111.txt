
/* 共通パッケージインポート; */
import "../bizcommon/pkgBuppinCommonFunction.crs"
import "../bizcommon/pkgBuppinKakuchoParts.crs"
import "../../../common/pkgHttp.crs";
import "../../../common/pkgMessage.crs";
import "../../../common/pkgCheck.crs";

/* @[概要]:装置名種別ダイアログ; */
clsBuppinDialog dlgG32Z040010_07 {

	/* @[概要]:起動画面ボタン名称; */
	String btnNm;
	
	/* @[概要]:使用不可フラグ; */
	String fukaFlg;
	
	/*
	@[概要]:パラメタ設定用ファンクション;
	@[詳細]:パラメタを設定する。;
	@[備考]:;
	@[引数]:btnNm 起動画面ボタン名称;
	@[引数]:fukaFlg 使用不可フラグ;
	@[戻値]:なし;
	*/
	Function SetParam(btnNm, fukaFlg) {
		this.btnNm = (btnNm == null) ? "" : btnNm;
		this.fukaFlg = (fukaFlg == null) ? "" : fukaFlg;
		
		/************デバッグ**************/
		pkgLog.log( "***********パラメタ設定" );
		pkgLog.log( "起動画面ボタン名称：" + this.btnNm);
		pkgLog.log( "使用不可フラグ：" + this.fukaFlg);
		/*********************************/
		
	}
	
	
	/*
	@[概要]:入力値の妥当性チェックを行う;
	@[詳細]:入力値の妥当性チェックを行う。;
	@[備考]:;
	@[引数]:なし;
	@[戻値]:$TRUE エラー発生 $FALSE エラーなし;
	*/
	Function validate() {
		/* サーバサイドに処理を実行する */
		/* MessageBox("サーバサイドに処理を実行する"); */
		try{
			
			/* 項目別妥当性チェック */
			
			/* 使用不可フラグ */
			if ( pkgCheck.chkInput( this.fukaFlg ) == $FALSE ) {
				/* 必須チェック */
				String args[1];
				args[0] = "使用不可フラグ";
				pkgMessage.putMessageBox("NNCW0115", args, this);
				return $TRUE;
			}
			
		} catch (e) {
			pkgMessage.putException(e, this.Name);
		}
		
		return $FALSE;
	}
	
	/*
	@[概要]:サーバサイドに処理を実行する;
	@[詳細]:サーバサイドに処理を実行する。;
	@[備考]:;
	@[引数]:なし;
	@[戻値]:なし;
	*/
	Function execute() {
		/* サーバサイドに処理を実行する */
		/* MessageBox("サーバサイドに処理を実行する"); */
		try{
			
			/* 入力チェックを行います */
			if ( this.validate() == $TRUE ) {
				/* 画面を閉じる */
				this.Delete();
				return;
			}
			
			/* 上り電文設定 */
			var aryNobori = new Array();
			aryNobori["FUKA_FLG"] = this.fukaFlg;
			
			/* サーバ問合せ */
			var rcdKudari = pkgHttp.callGateway("32Z040070", aryNobori);
			
			if( rcdKudari.result == pkgHttp.Result.SYSTEM_ERROR ){
				/* システムエラーの場合 */
				pkgScreenControl.lockScreen(this.frmG32Z040010_07);
				/* 画面を閉じる */
				this.Delete();
				
			} else if( rcdKudari.result == pkgHttp.Result.BUSINESS_ERROR ) {
				/* 業務エラーの場合 */
				var messageId = rcdKudari.msgId;
				if( messageId == "NNCW0007" ){
					pkgMessage.putMessageBox(messageId, null, this);
					this.frmG32Z040010_07.btnOK.Active = $FALSE;
					this.Delete();
				}
				
			} else if( rcdKudari.result == pkgHttp.Result.SUCCESS ) {
				/* データを取得に成功した場合 */
				var listData = new CSVDocument();
				/* フレックスビューにデータを設定する */
				listData = pkgHttp.convertResponseList( rcdKudari.businessData["LIST_DATA"]);
				this.frmG32Z040010_07.flxStm << listData;
				/* OKボタンを活性化する */
				this.frmG32Z040010_07.btnOK.Active = $TRUE;
			}
		} catch (e) {
			pkgMessage.putException(e, this.Name);
		}
	}
	
	/* @[概要]:ダイアログ用基本フォーム; */
	clsBuppinSekoDialog frmG32Z040010_07 {
		
		/**************************************************************************
			変数定義
		***************************************************************************/
		
		Width = 278;
		Height = 392;
		
		/* @[概要]:画面ID; */
		String GID = "G32Z040010_07";
		
		/* @[概要]:画面Ver */
		String GVER = "5.0";
		
		
		/**************************************************************************
			画面ヘッダ情報定義
		***************************************************************************/
		
		/* 「画面タイトルラベル」 */
		this.lblTitle.Value = "装置名種別参照";
		
		/* 「ウィンドウタイトル」 */
		this.setWindowTitle(GVER, GID);
		
		/**************************************************************************
			画面オブジェクト定義
		***************************************************************************/
		
		/* @[概要]:装置名種別検索フレックスビュー; */
		clsBuppinFlexView flxStm {
			/* X：10pixel（固定） */
			X = 10;
			/* Y：ヘッダ情報(間仕切り線（上）+ 13pixel) */
			Y = 35 + 13;
			/* 幅：フレックスビューオブジェクトサイズの合計 */
			Width = 258;
			/* 高さ：フォーム高さ - ヘッダ情報(間仕切り線（上）+ 13pixel) - フッタ情報(間仕切り線（下）+ 8pixel) */
			Height = ^.Height -(35 + 13) - (32 + 8);
			VScroll = $STATIC;
			HScroll = $NONE;
			
			/* @[概要]:装置名種別検索フレックスレコード; */
			this.flxRecord{
				
				/* @[概要]:装置名種別; */
				clsBuppinFlexLabel flbStmcls{
					Title = "装置名種別";
					pkgBuppinCommonFunction.setWidth(10,flbStmcls);
					BorderStyle = $SUNKEN;
				}
				
				/* @[概要]:装置名種別名; */
				clsBuppinFlexLabel flbStmsbm{
					Title = "装置名種別名";
					pkgBuppinCommonFunction.setWidth(20,flbStmsbm);
					BorderStyle = $SUNKEN;
				}
			}
		}
		
		/* @[概要]:ボタン名： Ｏ　Ｋ; */
		clsBuppinKinouButton btnOk {
			Title = pkgBuppinPartsGlobal.KBTN_NM_OK;
			
			/*
			@[概要]:Ｏ　Ｋボタン押下処理;
			@[詳細]:遷移元の画面に選択レコード情報を設定する。;
			@[備考]:;
			@[引数]:e イベントオブジェクト;
			@[戻値]:なし;
			*/
			Function OnTouch( e ) {
				
				try{
					/* 現在選択しているレコードを取得 */
					var record = ^.flxStm.GetRow( ^.flxStm.RowPosition );
					/* ダイアログイベント生成 */
					var dialogEvent = new clsBuppinDialogEvent() {
						/* ダイアログID */
						String dialogId;
						/* 起動画面ボタン名称 */
						String btnNm;
						/* 装置名種別 */
						String stmcls;
						/* 装置名種別名 */
						String stmsbm;
					}
					
					/* 呼出元のフォーム画面に渡すデータセット */
					dialogEvent.dialogId = ^.^.name;
					dialogEvent.btnNm = ^.^.btnNm;
					dialogEvent.stmcls = record.flbStmcls.Value;
					dialogEvent.stmsbm = record.flbStmsbm.Value;
					
					/* ダイアログイベント発行 */
					PostEvent(dialogEvent);
					
					/* ダイアログ消去 */
					^.^.Delete();
					
				} catch (e) {
					/* 例外メッセージを表示 */
					pkgMessage.putException(e, name);
					/* 全コントロールをロック */
					pkgScreenControl.lockScreen(dlgG32Z040010_07);
				}
			}
		}
		
		
		/*
		@[概要]:キャンセルボタン;
		*/
		clsBuppinKinouButton btnCancel {
			Title = pkgBuppinPartsGlobal.KBTN_NM_CANCEL;
			
			/*
			@[概要]:キャンセルボタン押下処理;
			@[詳細]:画面を閉じる。;
			@[備考]:;
			@[引数]:e イベントオブジェクト;
			@[戻値]:なし;
			*/
			Function OnTouch( e ) {
				/* OnTouch イベントハンドラ */
				try{
					/* 呼び出し元画面へ遷移 */
					^.^.Delete();
					
				} catch (e) {
					/* 例外メッセージを表示 */
					pkgMessage.putException(e, name);
					/* 全コントロールをロック */
					pkgScreenControl.lockScreen(dlgG32Z040010_07);
				}
			}
		}
		
		/**************************************************************************
			画面オブジェクト配置処理：
			【メモ】 初期処理の中ではなく、ここに記述しないと、BizDesinerのデザインレイアウト
				で画面を確認するときにレイアウトが崩れます。
		***************************************************************************/
		
		/* フッタ情報 */
		
		/* 「機能領域ボタン」群配列を定義する */
		var btnList = new Array;
		btnList[0] = btnOk;
		btnList[1] = btnCancel;
		
		
		/* 「機能領域ボタン」群を設定する */
		pkgBuppinCommonFunction.setDialogKinouBtnPosition(btnList, frmG32Z040010_07.Height);
		
		/**************************************************************************
			初期処理：
			【注意】 初期処理で使用するオブジェクトが、上部で定義されていることが前提となります
		***************************************************************************/
		if ( !$DESIGNTIME ) {
			/* ここに初期化処理を記述してください */
		}
	}
}


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

/* eslint-disable */
import { useEffect, useState } from "react";
import PkgBasicParts from "../../../common/PkgBasicParts";
import PkgHttp from "../../../common/PkgHttp";
import PkgKakuchoParts from "../../../common/PkgKakuchoParts";
import PkgGlobal from "../../../conf/PkgGlobal";
import { BaseDialogProps, ButtonOnClickEvent, FormItemOnChangeEvent } from "../../../common/PkgType";
import MockupJson from "../../../mockup/300000/32Z/DlgG32Z040010_01.json";
import PkgMessage from "../../../common/PkgMessage";
import PkgScreenControl from "../../../common/PkgScreenControl";
import PkgCheck from "../../../common/PkgCheck";

const DlgG32Z040010_01 = {

  Dialog: ({ props }: DlgG32Z040010_01Props) => {
    /** 画面ID  */
    const GID = "G32Z040010_01";
    /** 画面Version */
    const GVER = "1.0";
    /** 詳細処理ID　初期処理） */
    const SYOKI_SYORI = "32Z040010";

    /* 実行処理(初回)フラグ True:初回 False:初回ではない ; */
    let initExecuteFlg = true;

    /* 所内所外が設定されていたかどうかを確認する ; */
    let noSettingSgisniFlg = false;


    // コード一覧
    /*
    @[概要]:画面の初期化;
    @[詳細]:画面を初期化する。;
    @[備考]:;
    @[引数]:なし;
    @[戻値]:なし;
    */
    useEffect(() => {
      PkgBasicParts.setDisabled("btnOkG32Z040010_01", true);
    }, []);
    const [list, setList] = useState({
      src: [] as string[][],
      selectedIndex: -1,
      setSelectedIndex: (i: number) =>
        setList((l) => ({ ...l, selectedIndex: i })),
    });

    const [form, setForm] = useState({
      sksCd: "",
      ittsCd: "",
      ittbksCd: "",
      fukaFlg: "",
      sgisniFlg: "",
      optSgisniFlgOpt: "",
       /*初期表示フラグ True:初期処理 False:初期処理ではない */
       initFlg: true,

    });
    const optSgisniFlgOptBtn = [
      ["2", "所内"],
      ["1", "所外"]
    ];

    /**
  * @[概要]コントロール要素-値変更イベント;
  */
    const handleForm = (ev: FormItemOnChangeEvent) => {
      setForm(f => ({ ...f, [ev.target.name]: ev.target.value }));
    };
    /**
        @[概要]:オプションアイテム選択時の処理;
        @[詳細]:遷移元の画面に選択レコード情報を設定する。;
        @[備考]:;
        @[引数]:e イベントオブジェクト;
        @[戻値]:なし;
        */
        const handleOptSgisniFlgOpt = async (ev: FormItemOnChangeEvent) => {
          try {
             /* 初期表示の場合、処理を行いません */
            if (!form.initFlg) {
              /* 入力パラメタを設定する */
              setForm(f => ({ ...f, optSgisniFlgOpt: _getSnisgiKbn(ev.target.value) }));
              _initScreen();
              /* 検索処理を実行します */
              await _syokisyori();
            }
          } catch (e) {
            PkgMessage.putException(e, "handleOptSgisniFlgOpt");
            PkgScreenControl.lockDialog("btnCancelG32Z040010_01");
          }
        }

    /**
   * モックアップ用
   */
    const mockup = () => {
      PkgKakuchoParts.setDialogTitle(GVER, GID);
      setList((l) => ({ ...l, ...MockupJson.listSearchResult }));
      setForm(f => ({ ...f, ...MockupJson.form }));
    };

    /*
    @[概要]:入力値の妥当性チェックを行う;
    @[詳細]:入力値の妥当性チェックを行う。;
    @[備考]:;
    @[引数]:なし;
    @[戻値]:$TRUE エラーなし $FALSE エラー発生;
    */
    const validate = () => {
      try {
        /* 施工組織コード */
        if (PkgCheck.chkInput(props.sksCd) === false) {
          PkgMessage.putMessageBox("NNCW0115", ["施工組織コード"]);
          return false;
        }
        /* 使用不可フラグ */
        if (PkgCheck.chkInput(props.fukaFlg) === false) {
          PkgMessage.putMessageBox("NNCW0115", ["使用不可フラグ"]);
          return false;
        }
        return true;
      } catch (e) {
        PkgMessage.putException("e", "onShow");
        PkgScreenControl.lockDialog("btnCancelG32Z040010_01");
      }finally {
         // スピナー非表示
        PkgScreenControl.switchLoadingSpinner(false);
      }
    };

    /**
     * @[概要]表示時イベント
     * @[詳細]パラメタをチェックする; パラメタを設定する;  検索処理を実行する;
     */
    const onShow = async () => {
      try {
        if (!validate()) {
          props.setShow(false);
          return;
        }
        PkgKakuchoParts.setDialogTitle(GVER, GID);
        if (props.sgisniFlg === "1") {
          /* 1:所外 */
          setForm(f => ({ ...f, optSgisniFlgOpt: "1" }));
          PkgBasicParts.setDisabled(["optSgisniFlgOpt_1", "optSgisniFlgOpt_2"], true);
          noSettingSgisniFlg = false;
          form.optSgisniFlgOpt = "1";
        } else if (props.sgisniFlg === "2") {
          /* 2:所内 */
          setForm(f => ({ ...f, optSgisniFlgOpt: "2" }));
          PkgBasicParts.setDisabled(["optSgisniFlgOpt_1", "optSgisniFlgOpt_2"], true);
          noSettingSgisniFlg = false;
          form.optSgisniFlgOpt = "2";
        } else {
          /* パラメタが設定されていない場合、デフォルト2:所内に設定する */
          setForm(f => ({ ...f, optSgisniFlgOpt: "2" }));
          PkgBasicParts.setDisabled(["optSgisniFlgOpt_1", "optSgisniFlgOpt_2"], false);
          noSettingSgisniFlg = true;
          form.optSgisniFlgOpt = "2";
        }
          _initScreen();
          /* 検索処理を実行します */
          await _syokisyori();
          /* 初期表示の場合 */
          setForm(f => ({ ...f, initFlg: false }));
        } catch (e) {
          PkgMessage.putException(e, "onShow");
          PkgScreenControl.lockDialog("btnCancelG32Z040010_01");
        }
      };
       
      const _syokisyori = async () => {
        try {
          // スピナー表示
          await PkgScreenControl.switchLoadingSpinner(true);

        /* 上り電文設定 */
        const aryNobori = {
          SKS_CD: props.sksCd,
          SGISNI_FLG: form.optSgisniFlgOpt,
          ITTS_CD: props.ittsCd,
          ITTBKS_CD: props.ittbksCd,
          FUKA_FLG: props.fukaFlg,
        };

        type kudari_t = {
          RESULT_LIST: string[][];
        };

        /* サーバ問合せ */
        const rslt = await PkgHttp.callGateway<kudari_t>(SYOKI_SYORI, aryNobori);
        
        // 処理結果による分岐
        if (rslt.RESULT === PkgHttp.Result.BUSINESS_ERROR) {
          /* システムエラーの場合 */
          PkgMessage.putMessageBox("NNCW0007", [""]);
          PkgScreenControl.lockDialog("btnCancelG32Z040010_01");
          /* 初期処理の場合、画面を表示しない。 */
          props.setShow(false);
        }else if (rslt.RESULT === PkgHttp.Result.SYSTEM_ERROR) {
          // 業務エラーの場合
          const messageId = rslt.MESSAGE_ID;
          // フォーカスの設定
          PkgBasicParts.focus("btnCancelG32Z040010_01");
          PkgScreenControl.lockDialog("btnCancelG32Z040010_01");
          if (messageId === "NNCW0007") {
            PkgMessage.putMessageBox(messageId, [""]);
            if (initExecuteFlg && !noSettingSgisniFlg) {
              /* 初期処理の場合、画面を表示しない。 */
              props.setShow(false);
            }
          }
        }else if (rslt.RESULT === PkgHttp.Result.SUCCESS) {
          /* データを取得に成功した場合 */
          /*初期選択レコード */
          let selected_index = 0;
          if (props.sksCd && props.ittbksCd) {
            // 下り電文から一致する行を検索
            rslt.BUSINESS_DATA.RESULT_LIST.forEach((rec: string[], i: number) => {
             if (rec[0] === props.sksCd && rec[2] === props.ittbksCd){
                return (selected_index = i);
              }
            });
          }
          // リストを表示
          setList((l) => ({
            ...l,
            src: rslt.BUSINESS_DATA.RESULT_LIST.map((rec: string[]) => [
              rec[0],
              rec[1],
              rec[2],
              rec[3],
            ]),
            selectedIndex: selected_index,
          }));
          /* OKボタンを活性化する */
          PkgBasicParts.setDisabled("btnOkG32Z040010_01", false);
        }

        /* 実行処理(初回)フラグをOFFにします */
        initExecuteFlg = false;

      } catch (e) {
        PkgMessage.putException("e", "onShow");
        PkgScreenControl.lockDialog("btnCancelG32Z040010_01");
      }finally {
        // スピナー非表示
        await PkgScreenControl.switchLoadingSpinner(false);
      }
    };

    /**
     * リストが更新されたときにスクロールを選択行に移動
     */
    useEffect(() => {
      // スクロールを選択行に移動（-1にしないとstickyの陰に隠れてしまう）
      (
        document.getElementById("tbG32Z040010_01")?.childNodes[1]?.childNodes[
        list.selectedIndex - 1
        ] as HTMLElement
      )?.scrollIntoView();
    }, [list.src]);

    /**
     * @[概要]OKボタン押下
     * @param {*} ev
     *  YOUS_CD: string; // 要求組織コード
     *  SSM: string; // 要求組織名
     * YSSBKS_CD: string; //  要求物管者コード
     *  KJIBKS: string; //  記事（物管者）
     */
    const btnOkG32Z040010_01OnClick =  async (ev: ButtonOnClickEvent) => {
      try {
        const args = {
          YOUS_CD: list.src[list.selectedIndex][0],
          SSM: list.src[list.selectedIndex][1],
          YSSBKS_CD: list.src[list.selectedIndex][2],
          KJIBKS: list.src[list.selectedIndex][3],
        };
        // 呼び出し元のボタン押下イベントを発行
        props.btnOkClickEvent(ev, args);
        // ダイアログを閉じる
        props.setShow(false);
      } catch (e) {
        PkgMessage.putException(e, "btnOkG32Z040010_01OnClick");
        PkgScreenControl.lockDialog("G32Z040010_01");
      }
    };

    /**
     * @[概要]キャンセルボタン押下
     *  {*} e イベントオブジェクト
     */
    const btnCancelG32Z040010_01OnClick = async () => {
      try {
        props.setShow(false);
      } catch (e) {
        PkgMessage.putException(e, "btnCancelG32Z040010_01OnClick");
        PkgScreenControl.lockDialog("G32Z040010_01");
      }
    };

    /**
      @[概要]:所内所外区分を返します;
      @[詳細]:指定されたoptionValueを判定し所内所外区分の値を返します;
      @[備考]:;
      @[引数]:optionValue オプションボタンValue;
      @[戻値]:所内所外区分 1: 所外 2:所内;
      */
      const _getSnisgiKbn = (optionValue: string) => {
          /* 画面を初期化します */
          if (optionValue === "2") {
            form.optSgisniFlgOpt = "2";
            return optionValue;
          } else {
            /* 1:所外を設定する */
            form.optSgisniFlgOpt = "1";
            return optionValue;
          }
      }

    /**
      @[概要]:画面の初期化;
      @[詳細]:画面を初期化する。;
      @[備考]:;
      @[引数]:なし;
      @[戻値]:なし;
        */
      const _initScreen = () => {
        /* 画面を初期化します */
        PkgBasicParts.setDisabled("btnOkG32Z040010_01", true);
        setList((l) => ({ ...l, src: [] }));
      }

    // フッターボタン群
    const footerButtons = [
      { id: "btnOkG32Z040010_01", text: "Ｏ　Ｋ", onClick: btnOkG32Z040010_01OnClick },
      { id: "btnCancelG32Z040010_01", text: "キャンセル", onClick: btnCancelG32Z040010_01OnClick, },
    ];

    return (
      <PkgKakuchoParts.ClsDialog
        show={props.show}
        onShow={PkgGlobal.MOCKUP_MODE ? mockup : onShow}
      >
        <PkgKakuchoParts.ClsDialogHeader title="要求組織物管者コード" />
        <PkgKakuchoParts.ClsDialogMain>
          <div className="col-4" >
            <PkgBasicParts.ClsBaseGroupBox
              style={{ marginLeft: 10, position: "relative" }}
            >
              <div style={{ position: "absolute", top: -12, left: 5, backgroundColor: "var(--body-background-color)" }}>
                <PkgBasicParts.ClsBaseLabel
                  value="所内所外区分選択"
                  width={PkgBasicParts.getWidth.Label(16)}
                />
              </div>

              <div className='form-item' style={{ marginTop: 10 }}>
                <div className="form-item">
                  <span className='form-item'>
                    <PkgBasicParts.ClsBaseOptionButton
                      id='optSgisniFlgOpt'
                      name='optSgisniFlgOpt'
                      width={PkgBasicParts.getWidth.OptionButton(6)}
                      option={optSgisniFlgOptBtn[0]}
                      valueIndex={0}
                      displayIndex={1}
                      tabIndex={1}
                      value={form.optSgisniFlgOpt}
                      onChange={(ev) => {
                        handleForm(ev);
                        handleOptSgisniFlgOpt(ev);
                      }}
                    />
                  </span>

                  <span className='form-item'>
                    <PkgBasicParts.ClsBaseOptionButton
                      id='optSgisniFlgOpt'
                      name='optSgisniFlgOpt'
                      width={PkgBasicParts.getWidth.OptionButton(6)}
                      option={optSgisniFlgOptBtn[1]}
                      valueIndex={0}
                      displayIndex={1}
                      tabIndex={1}
                      value={form.optSgisniFlgOpt}
                      onChange={(ev) => {
                        handleForm(ev);
                        handleOptSgisniFlgOpt(ev);                          
                        }}
                    />
                  </span>
                </div>
              </div>
            </PkgBasicParts.ClsBaseGroupBox>
          </div>
          <PkgKakuchoParts.ClsDialogMain>
            <PkgBasicParts.ClsBaseFlexView id="tblG22BZ4E010_01" height={310}>
              <PkgBasicParts.ClsBaseFlexHeader
                columns={[
                  {
                    width: PkgBasicParts.getWidth.TextBox(14),
                    title: "要求組織コード",
                  },
                  {
                    width: PkgBasicParts.getWidth.TextBox(30),
                    title: "要求組織名",
                  },
                  {
                    width: PkgBasicParts.getWidth.TextBox(16),
                    title: "要求物管者コード",
                  },
                  {
                    width: PkgBasicParts.getWidth.TextBox(60),
                    title: " 記事（物管者）",
                  },
                ]}
              />
              <PkgBasicParts.ClsBaseFlexBody
                src={list.src}
                selectedIndex={list.selectedIndex}
                setSelectedIndex={list.setSelectedIndex}
              >
                <PkgBasicParts.ClsBaseFlexLabel valueIndex={0} />
                <PkgBasicParts.ClsBaseFlexLabel valueIndex={1} />
                <PkgBasicParts.ClsBaseFlexLabel valueIndex={2} />
                <PkgBasicParts.ClsBaseFlexLabel valueIndex={3} />
              </PkgBasicParts.ClsBaseFlexBody>
            </PkgBasicParts.ClsBaseFlexView>
          </PkgKakuchoParts.ClsDialogMain>
        </PkgKakuchoParts.ClsDialogMain>

        <PkgKakuchoParts.ClsDialogFooter buttons={footerButtons} />
      </PkgKakuchoParts.ClsDialog>
    );
  },
};
export default DlgG32Z040010_01;

export type DlgG32Z040010_01Props = {
  props: BaseDialogProps & {
    btnOkClickEvent: ButtonOnClickEvent;
    sksCd: string; //施工組織コード
    sgisniFlg: string; //所外所内フラグ
    ittsCd: string; // 委託元組織コード
    ittbksCd: string; //委託元物管者コード
    fukaFlg: string; //使用不可フラグ
  };
};

export type DlgG32Z040010_01Args = {
  /** 要求組織コード */
  YOUS_CD: string;
  /**要求組織名 */
  SSM: string;
  /**要求者コード */
  YSSBKS_CD: string;
  /**記事(物管者) */
  KJIBKS: string;
};
