/* eslint-disable */
import { useEffect, useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import MockupJson from "../../../mockup/300000/316/DlgG316020040_07.json";

const DlgG316020040_07 = {
  Dialog: ({ props }: DlgG316020040_07Props) => {
    /** 画面ID */
    const GID = "G316020040_07";
    /** 画面Version */
    const GVER = "1.0";
    /** サーバ処理ID */
    const SYORI_ID = "316020040";

    // 検索結果の状態管理
    const [searchResult, setSearchResult] = useState({
      tekiokubn: "",      // 適応区分
      tekiokubnnm: "",    // 適応区分名称
      setubisaibunnm: "", // 設備細分名
      tekiyonendo: "",    // 適応年度
      kikankaisi: "",     // 期間開始
      kikanryo: "",       // 期間終了
    });

    // エラー状態管理
    const [error, setError] = useState<string | null>(null);
    // ローディング状態管理
    const [isLoading, setIsLoading] = useState(false);

    /**
     * @概要 初期表示処理
     */
    const initDisplay = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // モック環境の場合
        if (process.env.NEXT_PUBLIC_MOCK_MODE === "true") {
          mockup();
          return;
        }

        // 検索条件の設定
        const searchParams = {
          SETUBI: props.kensakuJouken?.setubi || "",
          SYUMOKU: props.kensakuJouken?.syumoku || "",
          SAIMOKU: props.kensakuJouken?.saimoku || "",
          SAIBUN: props.kensakuJouken?.saibun || "",
          SEIRI_CD: props.kensakuJouken?.seiri_cd || ""
        };

        // TODO: 実際のAPI呼び出しに置き換えてください
        // サーバー通信のシミュレーション
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // モックレスポンス
        const mockResponse = {
          RESULT: "SUCCESS",
          BUSINESS_DATA: {
            tekiokubn: "優遇税制適応区分テスト",
            tekiokubnnm: "区分名称テスト",
            setubisaibunnm: "対象設備名称テスト",
            tekiyonendo: "2024",
            kikankaisi: "2024-04-01",
            kikanryo: "2025-03-31"
          }
        };

        if (mockResponse.RESULT === "SUCCESS") {
          setSearchResult(mockResponse.BUSINESS_DATA);
        } else {
          setError("データの取得に失敗しました");
          props.setShow(false);
        }

      } catch (error) {
        setError("システムエラーが発生しました");
        console.error("Error in initDisplay:", error);
      } finally {
        setIsLoading(false);
      }
    };

    /**
     * @概要 モックアップ用処理
     */
    const mockup = () => {
      if (MockupJson.searchResult) {
        setSearchResult(MockupJson.searchResult);
      }
    };

    /**
     * @概要 OKボタンクリック時の処理
     */
    const handleOkClick = () => {
      try {
        if (props.onConfirm) {
          props.onConfirm();
        }
        props.setShow(false);
      } catch (error) {
        setError("処理中にエラーが発生しました");
        console.error("Error in handleOkClick:", error);
      }
    };

    // 初期表示時の処理
    useEffect(() => {
      if (props.show) {
        initDisplay();
      }
    }, [props.show]);

    return (
      <Dialog open={props.show} onOpenChange={props.setShow}>
        <DialogContent className="sm:max-w-[608px] bg-[#F0F0F0]">
          <DialogHeader>
            <DialogTitle className="text-base font-normal">優遇税制参照</DialogTitle>
          </DialogHeader>

          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div className="space-y-4 py-4">
            {/* 適応区分 */}
            <div className="flex items-start space-x-4">
              <span className="w-24 text-right pt-2">適応区分:</span>
              <div className="flex-1 p-2 bg-white border border-gray-200 min-h-[30px]">
                {searchResult.tekiokubn}
              </div>
            </div>

            {/* 適応区分名称 */}
            <div className="flex items-start space-x-4">
              <span className="w-24 text-right pt-2">適応区分名称:</span>
              <div className="flex-1 py-2">
                {searchResult.tekiokubnnm}
              </div>
            </div>

            {/* 設備細分名 */}
            <div className="flex items-start space-x-4">
              <span className="w-24 text-right pt-2">設備細分名:</span>
              <div className="flex-1 p-2 bg-white border border-gray-200 min-h-[30px]">
                {searchResult.setubisaibunnm}
              </div>
            </div>

            {/* 適応年度 */}
            <div className="flex items-start space-x-4">
              <span className="w-24 text-right pt-2">適応年度:</span>
              <div className="flex-1 py-2">
                {searchResult.tekiyonendo && 
                  `${searchResult.tekiyonendo}年度（${searchResult.kikankaisi}～${searchResult.kikanryo}）`
                }
              </div>
            </div>
          </div>

          <div className="flex justify-start mt-4 space-x-4">
            <button
              onClick={handleOkClick}
              disabled={isLoading}
              className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Ｏ　Ｋ
            </button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }
};

export default DlgG316020040_07;

/**
 * Props型定義
 */
export interface DlgG316020040_07Props {
  props: {
    show: boolean;
    setShow: (show: boolean) => void;
    onConfirm?: () => void;
    kensakuJouken?: {
      setubi: string;      // 設備
      syumoku: string;     // 種目
      saimoku: string;     // 細目
      saibun: string;      // 細分
      seiri_cd: string;    // 整理コード
    };
  };
}












.json文件


{
  "searchResult": {
    "tekiokubn": "優遇税制適応区分テスト",
    "tekiokubnnm": "区分名称テスト",
    "setubisaibunnm": "対象設備名称テスト",
    "tekiyonendo": "2024",
    "kikankaisi": "2024-04-01",
    "kikanryo": "2025-03-31"
  }
}
